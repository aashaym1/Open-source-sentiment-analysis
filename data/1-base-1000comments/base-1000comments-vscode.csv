id,body,created_at
290098092,"Beware that if `""editor.hover"": false` is used and you intend to use `Ctrl+k, Ctrl+i` to force tooltip display at caret position, you may encounter an error that will prevent tooltip to display in any case after **VS Code** has restarted. 

Error will be `Cannot read property 'startShowingAt' of undefined`
To fix this, you have no choice but set `""editor.hover"": true,` and restart **Code**.

Thus `""editor.hover"": false` is far from being ideal since it will break the tooltips even when you try to force them to show up.

~~Well it is the case for my setup after Code has restarted: v1.10.2 on Win 10 x64 pro.~~

## Edit : this is fixed now",2017-03-29T13:57:44Z
336195652,"Uploading a screenshot too since the bug report comment strips the indentation:

![image](https://user-images.githubusercontent.com/13824553/31508083-d68807f2-af31-11e7-8297-a379fd6089ba.png)
",2017-10-12T16:44:16Z
376009355,This is actually fixed in #14554,2018-03-25T22:35:12Z
391513147,"> This missing feature is the sole reason I still have Notepad++ installed.

I have a second reason: Notepad++ opens instantly.

EDIT: No longer applies nowadays, vscode startup speed has improved a lot since then.",2018-05-23T22:11:59Z
404502125,"Agreed, the Unix world learnt to use a fixed physical tabstop (of every 8 monospaced characters) a _very_ long time ago. It is the only way that generic tools (like XTerm or Powershell!) and text editors can reliably expand tabs in any file they come across.

The problem is that many Windows editors pretend they can flout the rules and cause many problems for themselves and others. A common misconception is that tabs can be any number of spaces and this can be used to change the indenting of a file. A little bit of thought shows that this only works if tabs only occur at the start of the line and spaces are only ever used as lone characters so you cannot align things anywhere except the indent.

So at the moment vscode cannot deal with tabs correctly.

Edit: Clarify the rules for ""any-width"" tabs in files.",2018-07-12T12:54:30Z
419452746,"I have a similar issue and I don't know should I open a new one. 

# Code

```js
panel = vscode.window.createWebviewPanel(...);
this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));

  onPanelDisposed() {
    console.log('onPanelDisposed');
    this._currentPanel = undefined;
  }

  dispose() {
    console.log('Home::dispose', this._currentPanel);
    if (this._currentPanel) {
      console.log('Going to kill home');
      this._currentPanel.dispose();
      this._currentPanel = undefined;
    }
}
```

# Problem

1. I don't know is it a feature or bug of VSCode, but each time when we add a new folder to workspace VSCode kills our extension via `deactivate()` and then `activate()` again. This workflow requires a lot of CPU resources for our `activate()` implementation. https://github.com/platformio/platformio-vscode-ide/blob/develop/src/main.js

2. When VSCode calls `deactivate()`, we call `panel.dispose()`, to close active PIO Home tab. Sometimes it works, sometimes does not. See log from debug console:
```
deactivating extension
extension.js:409
Home::dispose
home.js:132
Object
_isDisposed:false
_visible:true
_active:true
_onDisposeEmitter:Object
_onDidChangeViewStateEmitter:Object
_handle:""1""
_proxy:Object
_viewType:""pioHome""
_options:Object
_viewColumn:1
_title:""PIO Home""
_webview:Object
_iconPath:Object
Going to kill home
home.js:134
onPanelDisposed
home.js:127
activating extension
extension.js:26
starting language server
```

# Result

Our panel is not closed

",2018-09-07T14:14:14Z
419503668,@ivankravets Unrelated to original problem. Please open a new issue,2018-09-07T17:02:51Z
424919309,Is there any plan to support this feature in VSCode any time soon ?,2018-09-27T00:55:46Z
435757983,Looking for such an extension for Java,2018-11-05T05:18:02Z
450462013,"For the later part, you can set `workbench.editor.closeEmptyGroups: false` so closing last tab in a group will result in an empty group.",2018-12-29T03:31:22Z
471156387,I am missing this feature so much. I really hope they will implement it.,2019-03-09T08:04:52Z
475032055,+1 This is a great feature from IntelliJ that should definitetly be ported to vscode.,2019-03-20T21:17:30Z
476648614,I would really like to have this for python!,2019-03-26T13:50:43Z
479993107,+1 for JS,2019-04-04T17:36:13Z
498621200,"Just saw this feature in my coworkers WebStorm, now I want this feature in VSCode. :smiley: ",2019-06-04T10:48:59Z
503913633,Add me to the waiting list. It looks really cool on Intellij.,2019-06-20T07:36:15Z
505008298,It would be a very helpful feature. ,2019-06-24T13:24:41Z
511046621,I agree with the others! ,2019-07-12T21:58:27Z
511751173,Need!,2019-07-16T09:59:23Z
512183236,This would be really useful.,2019-07-17T09:44:33Z
513298526,phpstorm has it.  I saw this and wanted in Vscode :),2019-07-19T16:47:53Z
513512719,"@mjbvz Requesting this feature too - could we know the status, will it be implemented by the VS Code team?",2019-07-21T02:00:18Z
514957961,Would love to see this in VS Code.,2019-07-25T08:51:32Z
533920270,"any news on this?
",2019-09-22T21:27:36Z
534391074,any news on this?,2019-09-24T05:09:31Z
534391891,"> any news on this?

If there were, I am quite certain the vscode team would post an appropriate update to this thread.",2019-09-24T05:13:14Z
534441963,"2020 is approaching and this feature is not implemented yet !!
would be a great improvement :smiley: ",2019-09-24T08:02:45Z
534828249,"**Please** add this! It would be such a useful feature and, at least in my use, IntelliJ would have nothing over VS Code. Please!!!",2019-09-25T02:50:11Z
545400209,"any new on this , i see my friend have this 
![image](https://user-images.githubusercontent.com/24865815/67388724-35873200-f567-11e9-8178-469a4e818764.png)
This is awesome, how activate this in vscode ??
Or a plugin ?
",2019-10-23T11:32:33Z
548911020,"@alexr00 Hence, setting task group programmatically does not make any sense. The little trouble is that not every task can be easily added to **tasks.json** and marked as **build**. Anyway, thank you, at least I know what is going on.",2019-11-01T18:58:34Z
561851965,"Got a bunch of questions about ligatures when tweeting about the WebGL renderer so I'll give an update here. Here's the remaining work to do on this:

- xterm.js
  - [x] Integrate [xtermjs/xterm-addon-ligatures](https://github.com/xtermjs/xterm-addon-ligatures) into the [xtermjs/xterm.js](https://github.com/xtermjs/xterm.js) repo, this will enable automated publishing and ensure tests continue to pass https://github.com/xtermjs/xterm.js/issues/2726
  - [ ] Hook up ligatures into the demo
  - [ ] Set up some puppeteer tests that verify on all renderers (dom, canvas, webgl) that ligatures are working
  - [ ] Slim down the dependencies as much as possible
  - [ ] Leverage web font API
- vscode
  - [ ] Integrate xterm-addon-ligatures such that the addon code is not loaded if ligatures is off, add the setting, etc.",2019-12-04T21:41:49Z
570830850,This feature would be extremely useful!,2020-01-05T00:02:26Z
571355472,"This feature would be great! Meanwhile, I'm using JS Parameter Annotations",2020-01-06T23:07:46Z
571837789,"This would be a really great feature. Please, hear us out. 🚀 ",2020-01-08T00:36:24Z
571925790,"anyone can edit `%directories%\Microsoft VS Code\resources\app\extensions\%theLanguage%\language-configuration.json` . but yes, they should be configurable trough settings (settings.json at least) .

it allows setting up multiple-characters assets, alike this line from Extension for Python `{ ""open"": ""r\"""", ""close"": ""\"""", ""notIn"": [""string"", ""comment""] },` .",2020-01-08T07:30:06Z
573310687,It has been 3 years!!!,2020-01-11T12:01:31Z
577375162,This is very helpful and give us a large productivity scale.,2020-01-22T20:39:43Z
577799431,"You need to be on corpnet for this. The specific call to the TS Server is:

```cs
   var result = await this.taskHandler.InvokeTSServerAsync(CommandNames.NameOrDottedNameSpan, document, TaskPriority.High, cancellationToken,
                         (proxy, endpoint, operationToken) => proxy.GetNameOrDottedNameSpan(endpoint, document, endPoint.Value.Position, operationToken));
```

We don't use this command currently",2020-01-23T18:04:30Z
637636502,"> Just add those keys bellow to your environment:
> 
> ```
> DISPLAY=needs-to-be-defined
> SSH_ASKPASS=/mingw64/libexec/git-core/git-gui--askpass
> ```
https://github.com/microsoft/vscode/issues/13680#issuecomment-575204695
This solves it! Thank you very much!

Please, check this [section](https://code.visualstudio.com/docs/editor/versioncontrol#_can-i-use-ssh-git-authentication-with-vs-code). In short, it says that you need to start `VSCode` from `GitBash` or such to have required environment variables. Also, if you'd checked these variables in `GitBash` you might get something like this:
![](https://i.imgur.com/4W2kEVb.png).

## Step 1 of 2

For example, if you want to not use `GitBash` to start `VSCode` every time(*because this nonsense! IMHO*), it's possible to add these using `Environment Variables` [window](https://superuser.com/a/949577) or using a command `rundll32.exe sysdm.cpl,EditEnvironmentVariables`(i.e. through cmd.exe).

## Step 2 of 2

In the result it might look like that:
![](https://i.imgur.com/ENniimQ.png)

Now, just restart(not reload) `VSCode` and it should work:
![](https://i.imgur.com/p7YgYeL.png)

Funny thing that it works even if `DISPLAY=WTHeck`, so, it might look for this variable's existence only.

Why not just simply define these(`private key file path` or `SSH_ASKPASS`) as a `JSON` config value somewhere as a workaround, so the `VSCode` would appended these at startup to its internal environment variables?

Related:
<https://github.com/git/git/blob/master/git-gui/git-gui--askpass>",2020-06-02T15:44:12Z
649614357,Any updates? My game-changing extension desperately needs this!!!! https://marketplace.visualstudio.com/items?itemName=EthanSK.restore-terminals,2020-06-25T15:14:54Z
666363124,@CoffeeFueledPanda I never use Snaps. I installed it through AUR on Manjaro. ,2020-07-30T13:25:51Z
683478403,"The current generic implementation works as follows:
- in a debug session VS Code considers only the source of the focused stack frame for showing inline values.
- VS Code's internal tokenizer is used to find all variables in the source (without understanding scope regions of the language).
- the potential variables are looked up in the VARIABLE views and for successful matches the value is shown inline in the editor.

This implementation is lightweight and scales well because:
- instead of a full language parser or AST the implementation piggybacks on the results of the tokenizer.
- finding the variable values piggybacks on the already fetched variable values available in the VARIABLE view.
- any false positives of the tokenizer are easily eliminated because there will be no matching variables in the VARIABLES view.

Problems:
- same named variables from different scope ranges show all the same value. 
- some lookups don't really work or make no sense (see #101797, #113813, #113987) 
- formatting of the inlined value presentation is hardcoded to `variable = value`.",2020-08-30T22:27:02Z
686306343,Is there any estimation on this? Having environment variables available with settings-sync now integrated into _stable_ would be more useful than ever.,2020-09-03T07:21:04Z
692834813,"### `NotebookDocument#languages`

Currently notebook content provider uses this property to indicate which languages for code cells are supported in a specific notebook type. However in Jupyter, supported language is actually a kernel info (standard kernels are single language kernel).

```json
""metadata"": {
	""kernelspec"": {
		""display_name"": ""Micronaut"",
		""language"": ""groovy"",
		""name"": ""micronaut""
	},
	""language_info"": {
		""codemirror_mode"": ""groovy"",
		""file_extension"": "".groovy"",
		""mimetype"": """",
		""name"": ""Groovy"",
		""nbconverter_exporter"": """",
		""version"": ""2.5.6""
	}
}
```

If content provider and kernel provider are registered in different extensions, content provider only knows what's the language being used last time when the document is connected to a kernel

* if there is a `language_info`, it means that's the language being used in existing cells or new cells
* if a new kernel is connected to a document, `kernel_spec/language_info` will be changed accordingly, it will also change the preferred language being used in the document 
* Jupyter document currently doesn't have concepts of polyglot yet.
  * available languages (a .NET kernel supports `csharp`, `fsharp`, `ps1`)
  * default language (maybe `csharp`)


Imagine we built a jupyter content provider, to meet the requirements listed above it needs to

- [x] provide available languages
- [x] provide preferred language (preferred language is from kernel)
- [x] listen to active kernel change event on the document, and read the supported languages of the kernel
  - [x] the kernel should describe what code languages it supports (maybe by `NotebookKernel.metadata` which is a dictionary)
  - [x] the content provider then update the available languages used in the document
- [x] language for a new cell
  - [x] when an untitled document is opened, we can probably ask users what language they want to use (when there are multiple ones)
  - [x] when appending a cell to the document, we can guess based on the context

_notes_

In Jupyter, the frontend gets `kernel_info_reply` from the kernel, which contains kernelInfo and languageInfo.",2020-09-15T16:39:44Z
698489117,"@jrieken I think that would work for an `onDidCopy` event that lets extensions update the clipboard.

However I do think we want VS Code to drive what happens on paste. A few reasons:

- If an extension is misbehaving (such as taking a long time to resolve) we can cut them off.
- VS Code can define settings for what happens on paste instead of leaving it up to each extension.
- We can control how multiple extensions that implement `onWillPaste` are sequenced.
- We can more easily implement a `simple paste` command that pastes without triggering any extensions.
- We could add ui for paste, such [what Office does](https://support.microsoft.com/en-gb/office/control-the-formatting-when-you-paste-text-20156a41-520e-48a6-8680-fb9ce15bf3d6)

",2020-09-24T17:42:25Z
698804428,"Absolutely, but then why a core developer, Microsoft representative, would say otherwise, that you can use the marketplace with Code - OSS?",2020-09-25T08:42:32Z
706507970,"@

- [ ] 

- 

> 

> _**[](url)**_",2020-10-10T08:01:00Z
716694418,Is there an update on this? We are still having this happen in Windows Docker containers making our CI a pain.,2020-10-26T17:09:57Z
717081560,"I'm having the same issues with the Git Graph extension:
![obraz](https://user-images.githubusercontent.com/30685349/97277219-809dea00-1838-11eb-8a78-42d270ea29e8.png)

Related: https://github.com/microsoft/vscode/issues/106667, https://github.com/mhutchie/vscode-git-graph/issues/378

",2020-10-27T08:41:53Z
720143371,"I need this feature. I can't use VSCode because of this.

My screen is constantly littered with a million irrelevant style warnings. They are distracting, unnecessary, and ugly. I cannot work with this.

For the most part, VSCode with its Intellisense, code actions, problem highlighting, and its integration with language extensions is incredible. I need these features to help me code—it's why I want to use this platform. So simply switching off all error highlighting for me is not a solution.

I need filtering. Extension designers add new warnings, corrections and code actions on a whim, and why wouldn't they? They want to add features and create tools that have as much functionality as possible. But because of the lack of customization on the client end, it can be incredibly annoying when this happens. You see, we as coders and (in my case, former) VSCode users also need simplicity. We want to have control over our tools. We want to code with peace of mind.

---

EDIT: I was a bit passionate when I made this post, and I apologize for coming on so hard about VSCode which is an amazing tool—I'm in awe of the work you all do :grinning:. In the end, I hacked my own version of the Haskell Language Server, which was the main offender—so I could use VSCode in the end!—and working with a TypeScript project, for example, is already just a dream experience. Anyhow, though I'll be very excited to see more progress on customizability, meantime, thanks for the great word done! :smile:",2020-11-01T20:03:46Z
721965556,"This doesn't just happen with Markdown files; it is also the case with Python files (.py, ipynb), .cpp files,... anything where the text has highlighting or formatting, I think. This is a big issue for me because I copy and paste code snippets into OneNote, and I want to keep the syntax highlighting in OneNote, but then if I copy and paste from OneNote back into VS code, the code is pasted with non-breaking spaces and doesn't work.",2020-11-04T20:44:57Z
726097284,"I leave this to the respective owners to decide. There are many use-cases with these extensions, and I am not familiar with all of them. So I cannot say for sure what the impact would be if they would be activated after the startup.

The ask is to evaluate if you would like to switch to `onStartupFinished` from `*`.
- [x] vscode.debug-auto-launch @weinand  @connor4312 
- [x] vscode.emmet @rzhao271
- [x] vscode.git @joaomoreno 
- [x] vscode.github @joaomoreno 
- [x] vscode.merge-conflict @chrmarti 
- [x] vscode.search-result @JacksonKearl ",2020-11-12T14:03:27Z
732226970,"I would love to take this out of my (logging) code:
```
// VSCode does not support colors in the output channel:
// https://github.com/Microsoft/vscode/issues/571
NoColor:    true,
```",2020-11-23T15:18:35Z
735768391,"Changing `Terminal > Integrated: Render Type` from `auto` to `canvas` seems to work for me.

![image](https://user-images.githubusercontent.com/3740137/100612551-77aaa780-3313-11eb-837a-874e782ff7a5.png)

UPDATE: This did NOT solve the problem for me.
",2020-11-30T12:54:11Z
739239424,"I also met the same issue when using vs code (not vs code insider) to ssh login CentOS with non-root account, eventually solved it.

After setting `PermitRootLogin no` and changing ssh default port to `8888` for security, my ssh config for vs code is below:

```
Host qcloud
    HostName <IP_ADDRESS>
    User foo
    Port 8888
```

The **true reason** of `Failed to save 'default': Unable to write file (NoPermissions
 (FileSystemError): Error: EACCES: permission denied, open 
'/etc/nginx/sites-available/default')` is below:
the new user account (""foo"" here) need to get the permission of the destination directory first, we can implement it by running the command below:

```bash
sudo setfacl -R -m u:foo:rwx /etc/nginx
```
for my case.

<br>

More general usage:
```bash
sudo setfacl -R -m u:username:rwx /path/to/directory
```

This command will help you get the permission of the directory `/path/to/directory`, without influencing the permissions of any other user or group. Not recommend to use `chown`. This solution can be used on `Mac/Linux`.

When you finish running above command, you can edit and save in VS code. May it be helpful for you. ",2020-12-05T11:36:21Z
739443796,"I also find that the autocomplete in the debug console is unnecessarily agressive. Many other places where autocomplete is used (including VSCode's file editor) are not like this. In the debug console, it replaces what I'm writing when I press enter. If I don't want the suggestion to occur I have to explicitly press escape. It would be much better to have tab use the autocomplete suggestion, and have enter simply execute the command.

I wholeheartedly agree with the person who opened the issue originally: in a shell-like environment, enter is expected to execute what has been typed, not replace it with something unwanted.

EDIT: Yes, reading other comments enter DOES accept in the body of the editor. I simply never noticed because I usually use languages with explicit line endings. Please forgive the mistake.

I still agree that this functionality should be changed. For languages with no line endings, one has to purposefully try to avoid the suggestions. I think that sticking to `tab` for autocomplete, or enter with a modifier (e.g. `shift + enter`) would be a much better choice: users should accept autocomplete by a conscious decision, not by accident.",2020-12-06T02:07:19Z
744016712,"I'd like to suggest that it should use the same format to differentiate between the paths then, like this:
![workBenchTestService.ts .../common <-> workBenchTestService.ts .../browser](https://user-images.githubusercontent.com/43523968/102014689-8d7a8c80-3d57-11eb-9932-df78d3e90954.png)

What do you think about this format? @shasiru if you don't want to implement it and @bpasero if that's ok for you, I'd like to give it a try.",2020-12-13T14:36:31Z
744198728,"TBH I haven’t read the threat thoroughly just wanted to mention one use case which would be nice to be covered by the new API:
Catch2 C++ test framework support BDD style. And the implementation comes with limitation: One can define “sub-test-case” in a test-case but that sub-test-case become available/listed only when the test-case is running/were run. This means that a leaf/test-case has to be able to became a branch/suite and sub-test-cases has to be added at runtime or shortly after the run with the corresponding states.

A couple of months ago the proposed API design might were able to support this. After that I lost tracking. Thanks for considering the use case.

Other thing we have to deal with is the activation event. For user-user perspective they usually prefer lazy init/listing but some actually the opposite. For them now they can init the extension with an “onOpen”-task. 

Bests,


Thank you for your consideration 🙏",2020-12-14T06:18:34Z
747274750,"I see that this thread has been going on for over two and a half years, so it's probably a waste of time to even comment here.

Since I am such a procrastinator and am great at wasting my time, I'll go ahead and throw in my two cents and my vote for this feature.

VSC is not a full-fledged IDE, it is a text editor at heart.  As a text editor it is the best text editor you will find, for the price, ever.  It is not a basic, low footprint editor, like Notepad++ is intended to be.  It has all the bells and whistles any text editor could ever have.  It's as advanced as Sublime, but without the $80 price tag.  It far exceeds Atom, which has a huge community base.  While it'll never beat VIM, it leaves all the others in the dust.  

I've just starting checking out Komodo, and it looks like it could be a little bit of competition in the Gabteide, or the ""Grey Area Between Text Editor and IDE, landscape.

Even though VSC is not a 'real' IDE (whatever that means), it is most certainly an advanced piece of software.  More advanced than any of the other editors listed above.  And you know the one thing it is missing?  It is missing something that all those other editors have.  Even Notepad++ has the ability to do it (though not well implemented).  

Multiple Activity Bar Side Panels (not multiple activity bars)  There's absolutely no reason you couldn't get this in there.  There are at least a hundred viable use cases for this feature.  

Oh yea, except VIM.  No panels at all in that one.  Nope, none.  Not much UI to speak of.  And you'll still never beat VIM!

Sadly, the lack of this feature will keep VSC at the bottom of my toolbox.  I need to be able to take in a lot of information at once.  Those extra panels allow me to do that, which can be more important than any number of editor features in terms of convenience and efficiency.

Multiple Activity Bar Side Panels (not multiple activity bars) could keep VSC in second place though, instead of third, fourth or maybe even fifth (tentative on how Komodo works out for me).

I'd really like to keep you VSC, but when you're only the 5th or occasionally the 4th tool choice for editing my text files, I may as well just uninstall you.",2020-12-17T07:51:41Z
749635068,"I guess that's not a wish list here, but #25887 (extend diff editor with merge features) has no downvote and quite a big community-request-level:
![grafik](https://user-images.githubusercontent.com/6699539/102910490-f1e5cc00-447a-11eb-8ae8-ddfe2604f803.png)
",2020-12-22T16:27:42Z
750755396,"Thanks for the tip @jrieken, I figured that adding the following to my **keybindings.json** worked:

_**EDIT: swapped the two keys, to be aligned with the default value (`insert`) of `editor.suggest.insertMode`**_

```json
  {
    ""key"": ""enter"",
    ""command"": ""acceptSelectedSuggestion"", // to insert
    ""when"": ""suggestWidgetVisible && textInputFocus""
  },
  {
    ""key"": ""tab"",
    ""command"": ""acceptAlternativeSelectedSuggestion"", // to replace
    ""when"": ""suggestWidgetVisible && textInputFocus""
  },
```",2020-12-24T05:50:40Z
750897544,"Also microsoft/vscode#92945

Which subsequently causes xdebug/vscode-php-debug#320",2020-12-24T14:27:33Z
752194599,"**Edited to remove all snark**

Great job VS Code team!",2020-12-29T18:26:06Z
753702600,"You can also reproduce this problem on Linux using symbolic links.

```bash
C:\>ver

Microsoft Windows [Version 10.0.19042.685]

C:\>wsl -d Ubuntu-18.04
/mnt/c$ cd
~$ uname -r
4.19.128-microsoft-standard
~$ git --version
git version 2.17.1
~$ mkdir realgit
~$ cd realgit/
~/realgit$ git init
Initialized empty Git repository in /home/austin/realgit/.git/
~/realgit$ echo test > test.txt
~/realgit$ git add test.txt
~/realgit$ git commit -m inital
[master (root-commit) 9ec21ef] inital
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
~/realgit$ cd
~$ ln -s realgit fakegit
~$ cd fakegit
~/fakegit$ git rev-parse --show-toplevel
/home/austin/realgit
```

If you open `~/realgit` with VS Code, it works correctly. If you open `~/fakegit` with VS Code, it exhibits the same problems described in this bug.

I also tried a 2.27 version of Git inside docker and `git rev-parse --show-toplevel` behaves the same.

FYI, I think the relevant Git for Windows issue that prompted the behavior change on the Windows side was git-for-windows/git#2481.",2021-01-04T00:39:16Z
754308162,/extPython,2021-01-05T00:28:20Z
754308276,"It looks like this is caused by the Python extension. Please file it with the repository [here](https://github.com/microsoft/vscode-python). Make sure to check their issue reporting template and provide them relevant information such as the extension version you're using. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines for more information.

Happy Coding!",2021-01-05T00:28:40Z
754314019,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [git push to a remote with an ssh password (#69033)](https://www.github.com/microsoft/vscode/issues/69033) <!-- score: 0.501 -->
<!-- potential_duplicates_comment -->",2021-01-05T00:44:20Z
754314023,Thank you as well @bpasero for your continuous effort and assistance in pushing this PR forward!,2021-01-05T00:44:21Z
754318648,"b565c422aa3a9e789d4c6beeec61269350ab6231 adds a `find file references` command for JS/TS. It is implemented by setting `""references.preferredLocation"": ""view""`, calling `editor.action.showReferences`, and then trying to restore the user's old setting",2021-01-05T00:59:52Z
754319670,"@deepak1556 
Thanks for your reply.
[profile.zip](https://github.com/microsoft/vscode/files/5767504/profile.zip)
",2021-01-05T01:03:07Z
754320086,After a few lines of code I was able to convert char index to Position. But it would be good to have it in the API natively. What do you think?,2021-01-05T01:04:29Z
754325140,"For some of us, the problem is much simpler: VSCode takes a while to load up, and then complains about PASCAL not loading correctly, and then that no Python tests were found, and then takes a while to scan the entire source directory for ruby gems, and then tells us that we need to upgrade dart because the dart extension just updated, and then the file loads, but we can't type anything into it because yet another extension is loading and then the extension host crashes and VSCode is brought down to a very basic form without extensions and then we restart the host and then it takes forever and maybe it succeeds.....

All so we can change a line in a C# script for Unity.

It would be nice to say in the global config ""These set extensions should always load on every VSCode instance"" and then in a local config file in the project ""Enable these extensions"". and as long as the latter exists, all extensions not listed in the former are disabled while those in the latter are re-enabled for that specific workspace. Even if changes to the file required reloading the window, that would be preferable to having everything load and having to trust the extension author was smart enough and considerate enough to get right when the extension should be loaded. This isn't even really a problem because VSCode reloads already upon opening a workspace or folder. 

But we can't. why is Pascal loading in a C# Unity workspace? Why is Python loading for that javascript project I'm working on over here? Being able to disable them all except globally enabled ones, and re-enable them by workspace and in user defined groupings (C# group, Unity Group, Python Group, Flask Group, etc) would be the best. ",2021-01-05T01:22:51Z
754336449,"Also #113741

I believe any SCM view refresh will trigger this bug (possibly because it replaced the input box element with a new one), including stage/unstage files, clicking refresh button, etc

![GIF 2021-1-5 9-57-48](https://user-images.githubusercontent.com/1330321/103597990-856bd200-4f3c-11eb-95d9-a02828287a2d.gif)

However, it behaves a little different on my machine, the SCM refresh cancels my text composition, but I can still input more Chinese to the input box.

```
Version: 1.53.0-insider (user setup)
Commit: 98106c48a07d4d07f0f71b4db9b3ff156f223339
Date: 2021-01-01T05:22:15.141Z
Electron: 11.1.0
Chrome: 87.0.4280.88
Node.js: 12.18.3
V8: 8.7.220.29-electron.0
OS: Windows_NT x64 10.0.17763
```",2021-01-05T02:01:21Z
754339693,"#113297 'Source Control' commit message input some time block

Maybe another variant.",2021-01-05T02:12:11Z
754349567,"> will this work fine on Windows ARM?

@roblourens I ran through some of the scenarios, thanks to @sbatten running some things for me, and believe this should all work fine on Windows ARM because:

1. ""Windows PowerShell"" on ARM is x86 as is ""Windows PowerShell (x86)"" on ARM...
2. There is no Windows ARM PowerShell 7 MSI... and even if it existed it would go in the same place as the x64 version and would be called ""PowerShell"" not ""PowerShell x64"" which I think makes sense",2021-01-05T02:40:24Z
754350779,"> If you want to search in .git, you need to set that to `false`

ensure it enable, ""search.exclude"" will effect.
![image](https://user-images.githubusercontent.com/7554917/103600621-d4b50100-4f42-11eb-8e32-ab8929124bbf.png)
",2021-01-05T02:43:44Z
754352154,"version 1.52.1, every time",2021-01-05T02:47:38Z
754358272,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:03:43Z
754358403,"<!-- 9078ab2c-c9e0-7adb-d31b-1f23430222f4 -->
:slightly_smiling_face: This feature request received a sufficient number of community upvotes and we moved it to our backlog. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:07Z
754358414,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:09Z
754358418,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:11Z
754358438,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:13Z
754358447,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:15Z
754358469,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:18Z
754358480,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:20Z
754358497,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:23Z
754358507,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T03:04:25Z
754359392,"Merging in, although this feature is still experimental 

You can set `simpleBrowser.opener.enabled` to enable opening http and https links in the simple browser",2021-01-05T03:06:41Z
754365002,New upstream issue: https://github.com/nodejs/node/issues/36790,2021-01-05T03:23:04Z
754367218,"A few questions:

* What version of PowerShell is this? (open a PowerShell console and type `$PSVersionTable`)
* Do you have any antivirus software on your machine that could be blocking PowerShell?
* Did this just start happening recently? (did this work before?)
* Are you opening a folder? Is that folder a network drive/UNC path?",2021-01-05T03:29:17Z
754368728,"There is some kind of error being shown in the console, but that's before I even open the terminal.

Attached is the screen recording of what I see.

```
ERR [File Watcher (node.js)] Error: ENOENT: no such file or directory, stat '/Users/yaakov/workspaces/temp/.vscode'
/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.desktop.main.js:1779
```

https://user-images.githubusercontent.com/4999744/103603555-e368cd00-4edc-11eb-870a-3d09ab7bfdfa.mp4
",2021-01-05T03:33:43Z
754370054,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Word navigation not working with screen reader (#90578)](https://www.github.com/microsoft/vscode/issues/90578) <!-- score: 0.787 -->
- [重庆双桥区医保取现提现-2020-12-19 19:16:15 (#113090)](https://www.github.com/microsoft/vscode/issues/113090) <!-- score: 0.708 -->
- [重庆北碚区京东白条取现提现-2020-12-19 19:21:52 (#113100)](https://www.github.com/microsoft/vscode/issues/113100) <!-- score: 0.684 -->
- [重庆大渡口区京东白条取现提现-2020-12-19 19:37:58 (#113131)](https://www.github.com/microsoft/vscode/issues/113131) <!-- score: 0.628 -->
- [重庆双桥区医保取现-2020-12-19 19:17:33 (#113092)](https://www.github.com/microsoft/vscode/issues/113092) <!-- score: 0.604 -->
<!-- potential_duplicates_comment -->",2021-01-05T03:37:45Z
754370584,"感谢您创建此问题！

然而，由于您没有使用英语，我们很难进行处理。如果可能，请您将此问题描述修改为英文。请您直接编辑此问题，不要提交回复或新问题。

请注意，机器翻译服务通常无法处理用于讨论软件问题所需的技术性语言，所以我们推荐您寻找一位熟悉相关技术的人来协助翻译。

如果您无法做到，没有关系。此问题已经被标记为需要翻译，等待社区成员志愿进行翻译。

---
Thanks for creating this issue!

Unfortunately, as the description is not in English, it's hard for us to work on. If possible, please edit the original issue to be in English.

In our experience, automatic translation services are not able to handle the technical language needed to effectively communicate about software issues, so we recommend finding a human translator who is familiar with our technology to help.

Otherwise, we have marked this as needing translation and a community member may be able to help out.
<!-- translation_requested_comment -->",2021-01-05T03:39:30Z
754373926,"> Having this in keybinding.json just works for me
> 
> ```json
> 	{
> 		""key"": ""shift+alt+h"",
> 		""command"": ""editor.showCallHierarchy"",
> 		""when"": ""editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor""
> 	}
> ```

@jrieken I confirm this worked the way I expected. Thank you for your patience",2021-01-05T03:50:02Z
754388438,Can you provide the contents of the Git Output panel when you first open the folder?,2021-01-05T04:35:25Z
754390539,"This is already supported today, as VS Code relies on your configured Git authentication.",2021-01-05T04:41:23Z
754391441,"@bpasero , File exclude will allow VSCode to stop monitoring that specific files. That is not what we want. 

Below is the scenario :

Let us say Below is my directory  
```
~/.config
~/.cabal/
~/project/python
~/project/node
~/project/haskell
~/project/Clojure
~/project/Shell
~/.nvm/
.bash_profile
.bashrc
```

**Now:**
Currently, the vscode monitors every folders inside `~/project/` separately. (i.e., `python`, `node`, `haskell`, etc.). Structure of the workspace

```
/python
/node
/haskell
/project/
 | /python
 | /node
 | /haskell
 | /Clojure/
 | /Shell/
```

If i add `~/project/` or `/python` to `files.exclude`, this is excluding entire projects directory and ignoring `python`, `node`, and `haskell`.   Workspace will look like below -
```
~| /.config
 | /.cabal/
 | /.nvm/
 | .bash_profile
 | .bashrc
```

**What is needed**
Now, we want to add `~` that has `~/.config`, `~/.cabal/`, `~/.nvm/`, `.bash_profile`, `.bashrc`. But also monitor `python`, `node`, and `haskell`. That way, Workspace will look like below

```
~| 
 | /.config
 | /.cabal/
 | /.nvm/
 | .bash_profile
 | .bashrc
/python
/node
/haskell
/project/
 | /Clojure/
 | /Shell/
```

The only solution is to add `~` fully and remove `~/project` from it. That way, vsc will be able to track  `python`, `node`, and `haskell` inside `project` and also can have `~/.config`, `~/.cabal/`, `~/.nvm/`, `.bash_profile`, `.bashrc`.

I have also posted this question on [stackoverflow](https://stackoverflow.com/questions/65430256/vscode-removing-a-specific-sub-directory-from-workspace). Created a github ticket as there is no response.

Appreciate if you can keep the ticket open until this issue is fixed.

",2021-01-05T04:43:53Z
754393451,"> A few questions:
> 
> * What version of PowerShell is this? (open a PowerShell console and type `$PSVersionTable`)
> * Do you have any antivirus software on your machine that could be blocking PowerShell?
> * Did this just start happening recently? (did this work before?)
> * Are you opening a folder? Is that folder a network drive/UNC path?

1> PowerShell Version is 4.0
2> I have not any Antivirus on my System.
3>It was working fine but from 3-4 days this is happening.
4>No, I am opening a recent project, which on I was working recently.",2021-01-05T04:49:41Z
754396921,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T04:59:30Z
754397320,"You can enable this behavior today in git, by setting `merge.autoStash` or `rebase.autoStash` in your git config.

If we were to add this explicitly to `git pull` we should use the `--autoStash` option to provide the behavior, rather than implementing it ourselves.

I also, related to https://github.com/microsoft/vscode/pull/97525 I think we should adopt [`--discard-changes`](https://www.git-scm.com/docs/git-switch#Documentation/git-switch.txt---discard-changes) for force, and maybe also use [`--merge`](https://www.git-scm.com/docs/git-switch#Documentation/git-switch.txt---merge) for smart (although `--merge` would probably have a slightly different behavior in the case where the stash pop fails).",2021-01-05T05:00:29Z
754397946,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [The terminal process failed to launch (#112065)](https://www.github.com/microsoft/vscode/issues/112065) <!-- score: 0.876 -->
- [will not update (#111905)](https://www.github.com/microsoft/vscode/issues/111905) <!-- score: 0.662 -->
- [Not using installed extensions  (#113701)](https://www.github.com/microsoft/vscode/issues/113701) <!-- score: 0.66 -->
- [Image File Not Showing (#111306)](https://www.github.com/microsoft/vscode/issues/111306) <!-- score: 0.653 -->
- [output (#112828)](https://www.github.com/microsoft/vscode/issues/112828) <!-- score: 0.65 -->
<!-- potential_duplicates_comment -->",2021-01-05T05:02:24Z
754398210,Nothing special about the SVGs and I've never seen them disappear like that before.,2021-01-05T05:03:08Z
754398240,"It looks like you're using the VS Code Issue Reporter but did not paste the text generated into the created issue. We've closed this issue, please open a new one containing the text we placed in your clipboard.

Happy Coding!",2021-01-05T05:03:14Z
754398888,"> Did you have the x64 insiders installed before on this device ?
> 
> 
> 
> What is the output of `code-insiders --verbose` ?

Yes I think I did have a intel version of the insider VSCode installed previously but I have uninstalled it beforehand to install the arm version of VSCode insider

And since I cannot open VSCode insider to install the VSCode command to my PATH, this command cannot be run (not found)",2021-01-05T05:05:10Z
754400644,"> Visual Studio now has vertical tabs.
> Make it happen!
> Specifically tabs **on the right**.

How can it be enabled?",2021-01-05T05:10:44Z
754401683,And btw I just saw the someone mentioned this issue and after removing the .VSCode-insiders/ folder in my home directory and reinstall VSCode insider I can now open the application now 😄 ,2021-01-05T05:13:55Z
754416420,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Cannot enable brackets matching for .log files even when ""editor.matchBrackets"": true is set for that language (#65725)](https://www.github.com/microsoft/vscode/issues/65725) <!-- score: 0.508 -->
- [Auto closing brackets should try to balance brackets (#6841)](https://www.github.com/microsoft/vscode/issues/6841) <!-- score: 0.489 -->
<!-- potential_duplicates_comment -->",2021-01-05T05:55:24Z
754420804,I've merged this now -- thanks for the fix!!,2021-01-05T06:06:40Z
754422279,Duplicate of #112537 (which will be fixed in tomorrow's insiders),2021-01-05T06:10:01Z
754422304,Duplicate of #112537 (which will be fixed in tomorrow's insiders),2021-01-05T06:10:04Z
754422327,Duplicate of #112537 (which will be fixed in tomorrow's insiders),2021-01-05T06:10:08Z
754422346,Duplicate of #112537 (which will be fixed in tomorrow's insiders),2021-01-05T06:10:11Z
754423566,/assign @sandy081 ,2021-01-05T06:12:56Z
754423568,Duplicate of #112621,2021-01-05T06:12:56Z
754423696,Duplicate of #112621,2021-01-05T06:13:17Z
754423797,Duplicate of #112621,2021-01-05T06:13:30Z
754423907,Duplicate of #112621,2021-01-05T06:13:45Z
754424066,Duplicate of #112621,2021-01-05T06:14:11Z
754424950,Duplicate of #112621,2021-01-05T06:16:28Z
754426797,"I have moved this over to the extension context, it now looks like:

```ts
	export interface SecretState {
		/**
		 * Retrieve a secret that was stored with key. Returns undefined if there
		 * is no password matching that key.
		 * @param key The key the password was stored under.
		 */
		get(key: string): Thenable<string | undefined>;

		/**
		 * Store a secret under a given key.
		 * @param key The key to store the password under
		 * @param value The password
		 */
		set(key: string, value: string): Thenable<void>;

		/**
		 * Remove a secret from storage.
		 * @param key The key the password was stored under.
		 */
		delete(key: string): Thenable<void>;

		/**
		 * Fires when a secret is set or deleted.
		 */
		onDidChange: Event<void>;
	}

	export interface ExtensionContext {
		secretState: SecretState;
	}
```",2021-01-05T06:21:22Z
754430070,"/needsMoreInfo please use the newly-added bisect command to determine if one of your extensions is causing the problem. If no extension is implicated, add more details for how to reproduce the issue. Screenshots and videos can be pasted. ",2021-01-05T06:29:03Z
754430324,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-05T06:29:41Z
754431831,Same problem here.,2021-01-05T06:33:10Z
754432003,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Allow to set explorer.autoReveal per specific folder (#87956)](https://www.github.com/microsoft/vscode/issues/87956) <!-- score: 0.639 -->
- [VS Code freezes when removing 'node_modules' folder from external terminal, forcing to close (#20480)](https://www.github.com/microsoft/vscode/issues/20480) <!-- score: 0.575 -->
- [search.exclude does not work for searching symbols across a workspace (#46718)](https://www.github.com/microsoft/vscode/issues/46718) <!-- score: 0.573 -->
- [Find in Folder not working if the folder is excluded in setting (#68970)](https://www.github.com/microsoft/vscode/issues/68970) <!-- score: 0.519 -->
- [Go to Definition refers to VSCode node_modules instead of project's node_modules (#110631)](https://www.github.com/microsoft/vscode/issues/110631) <!-- score: 0.479 -->
<!-- potential_duplicates_comment -->",2021-01-05T06:33:34Z
754440956,"@bpasero @SneakyFish5 Thanks for your efforts to have this feature merged. I am already using and loving it.
Just wondering if there is option to change the tab height? it looks like tab height is too much on mac version.

Also the tabs are not equal size, it makes the file selection a bit confusing. And the last line of tabs is in justified text alignment mode, so a single tab or 2 tabs cover the whole line.

Is there an option to have left aligned tabs and leave empty space on the right?",2021-01-05T06:53:58Z
754446615,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Search and Replace keep losing the selection (#39190)](https://www.github.com/microsoft/vscode/issues/39190) <!-- score: 0.609 -->
- [Replacing inline adds cases to the replace dialog history (#82121)](https://www.github.com/microsoft/vscode/issues/82121) <!-- score: 0.593 -->
- [Find in Selection expands to whole line (#80008)](https://www.github.com/microsoft/vscode/issues/80008) <!-- score: 0.588 -->
- [Replace All in selection broken (#109948)](https://www.github.com/microsoft/vscode/issues/109948) <!-- score: 0.587 -->
- [Replace All in selection broken (#109949)](https://www.github.com/microsoft/vscode/issues/109949) <!-- score: 0.587 -->
<!-- potential_duplicates_comment -->",2021-01-05T07:06:35Z
754451459,@wwlorey Please open a discussion item for this here - https://github.community/c/code-to-cloud/codespaces-beta/45,2021-01-05T07:16:24Z
754453684,"""Find in Selection"" is in the highlighted state ----> surrounded by blue boxes, when the wrong selection occurs on the second click, the color of the blue box will be darkened. Then click the left mouse button anywhere and this blue box will disappear and the ""Find in Selection"" function will work again, but it will still only work once!!!",2021-01-05T07:20:38Z
754454174,"I have the following issue today on Version: 1.53.0-insider (user setup), Commit: a48ef56fbf7767f55a193d7d5687addd1fc9239c. When activating an editor group, additional icons may appear, changing the line wrapping of editor tabs, making the text jump, and leading to an involuntary selection of other text:

![0qNq6eyLmr](https://user-images.githubusercontent.com/12128514/103617511-a7f6ee80-4f2e-11eb-8904-69e6eab6104c.gif)

Should I file this separately or this a good place?",2021-01-05T07:21:38Z
754456643,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Prompt if new shortcut is conflict another after an update (#104398)](https://www.github.com/microsoft/vscode/issues/104398) <!-- score: 0.493 -->
<!-- potential_duplicates_comment -->",2021-01-05T07:26:07Z
754460694,"Just happened again on Windows: https://dev.azure.com/vscode/VSCode/_build/results?buildId=61188&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=e5339641-12bd-5520-314f-0b8fa6bdcd9f&l=360

```
173 passing (48s)
14 pending
11 failing
  1) vscode API - terminal
  2) vscode API - terminal
  3) vscode API - terminal
  4) vscode API - terminal
  5) vscode API - terminal
  6) vscode API - terminal
  7) vscode API - terminal
  8) vscode API - terminal
  9) vscode API - terminal
  10) vscode API - terminal
  11) vscode API - terminal
```",2021-01-05T07:34:39Z
754471487,"@sean-mcmanus 👏 very cool. Yeah, the filterText is really under-documented and something that's hard to grasp. I'll make sure our extension samples and/or docs get better",2021-01-05T07:57:39Z
754471712,"I cannot recall why I set the ""fixed-in-electron-11"" label, I assume this is still an issue?",2021-01-05T07:58:05Z
754475608,"@alexdima , could you please point me to these examples?",2021-01-05T08:06:02Z
754477009,@iamshreeram how about creating a multi root workspace with all the folders you want? See https://code.visualstudio.com/docs/editor/multi-root-workspaces,2021-01-05T08:08:47Z
754477478,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-05T08:09:42Z
754478847,https://github.com/microsoft/vscode-extension-samples/tree/master/semantic-tokens-sample,2021-01-05T08:12:25Z
754478880,"I really like the suggestion to list the editors that are still dirty after an attempted backup.

Code pointer: https://github.com/microsoft/vscode/blob/3b5cdf3a0ebe0ae332499cfa8b058b468a784dfc/src/vs/workbench/contrib/backup/electron-sandbox/backupTracker.ts#L127-L127",2021-01-05T08:12:28Z
754479283,Let's track in #19534,2021-01-05T08:13:16Z
754481057,"In today's insider build (https://code.visualstudio.com/insiders/) you can enable wrapping tabs via `workbench.editor.wrapTabs: true`. I suggest that if you encounter any issues, you report them as individual issues (such as @swinder0161 and @bersbersbers) and keep one issue to one topic (not multiple things). That makes it easier to discuss things individually. 

One setting that impacts the sizing of tabs is: `workbench.editor.tabSizing`. Set it to `shrink` to stop tabs from growing large when wrapping.

There is no setting to change the height of a tab otherwise.

Thanks for testing this 👍 ",2021-01-05T08:16:50Z
754481485,"@connor4312 to address the challenge I suggest that we add a new optional hint `autoTerminate` to `runInTerminal`. With this debug extensions would have to ""opt-in"" to the feature.",2021-01-05T08:17:43Z
754482211,"When you rebind cursor up/left/down/right to alt+i/j/k/l, this does not have any effect on the composition which is done by the OS. 

So when you are composing Korean, pressing alt+k will move ""our"" cursor down (that is why the glyph on line 3 becomes highlighted), but the OS remains in composition mode because Windows itself does not know that you want composition to stop when pressing alt+k.

Then, when you actually finish composition by pressing arrow down, we receive the composition ended event from the OS and update the text at the current cursor location because we think you have finished composition.

I don't think any other software on your machine would support this scenario, since the OS composition remains in composition mode when you press alt+k.",2021-01-05T08:19:13Z
754483404,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T08:21:40Z
754483497,Adding @alexdima esp for the `isInDom` changes,2021-01-05T08:21:51Z
754485989,"> I think it's also a problem in vscode that an issue in an extension can cause the termination of the whole extension host.

This is as designed. The extension host is a nodejs process where all extensions are loaded without any sandbox. That means we execute any piece of code written by the extension. Extensions have many ways to induce crashes, the most common being an OOM crash. For example, an extension can allocate objects in a loop until there is no more memory and the process crashes. Extensions can also enter an endless loop, in which case they completely starve other extensions. Extensions can also induce crashes by shipping a native C++ node module and causing segmentation faults, or using OS APIs in wrong ways (like spawning thousands of processes), etc.

The extension host is a nodejs process where we load the code from extensions. It is not in our scope to create an extension host which has Operating System - like features, like being resilient to a runaway extension, etc.
",2021-01-05T08:26:26Z
754487054,"**NOTE**: **Be sure you are using a version of VS Code >= 1.52** 
It looks like the issue is caused by one of your installed extensions. All extensions execute together on a single nodejs process, so in order to narrow down the possible problematic extension, please try the following:
* run `F1 > Help: Start Extension Bisect`
* (this will restart VS Code with half of your extensions disabled)
* try to do the steps which reproduce the problem
* if the problem reproduces, click ""This is bad"" (this narrows down the problematic extension to the half which was enabled)
* if the problem does not reproduce, click ""Good now"" (this narrows down the problematic extension to the half which was disabled)
* these steps will repeat until the problematic extension is found

| initial | step | final |
|---|---|---|
| ![image](https://user-images.githubusercontent.com/5047891/101918658-e9170f80-3bc9-11eb-9977-857baa291937.png) | ![image](https://user-images.githubusercontent.com/5047891/101918683-ef0cf080-3bc9-11eb-9f9e-98b0177991b2.png) | ![image](https://user-images.githubusercontent.com/5047891/101918706-f502d180-3bc9-11eb-8c86-e56355958bd4.png) |",2021-01-05T08:28:28Z
754488212,"> I would guess that this is just related to search itself, but I don't have a guess as to why this just shows up with 1.52. Do you think it makes a difference based on what you start typing in cmd+P?

I understand you, it's hard to tell even from my user's perspective what causes this undeterministic behaviour. It would be much easier to see it in action by recording a video but it's impractical to record my entire working day. From my experience since the 1.52.x version came up, it makes no difference on *what* I type in the searching bar. I see it happen and it happens in any project I've been working so far: small, medium and big ones - 0 difference.

I really like your product and I'll make sure next time I'll be more precise and have more concrete evidence. For now I'll cope with my issue and investigate more on the matter. I'll try to monitor devtools on the second monitor when the searching bar freezes again and see what I can do.

Thank you!",2021-01-05T08:30:45Z
754488303,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T08:30:57Z
754488838,Assigning based on latest comments around extension bisect not working.,2021-01-05T08:31:59Z
754489184,"We have a great developer community [over on slack](https://aka.ms/vscode-dev-community) where extension authors help each other. This is a great place for you to ask questions and find support.

Happy Coding!",2021-01-05T08:32:45Z
754490215,What do you mean?,2021-01-05T08:34:46Z
754491447,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T08:37:17Z
754491482,We typically do not accept PRs that change formatting.,2021-01-05T08:37:21Z
754491949,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T08:38:25Z
754492002,"感谢您创建此问题！

然而，由于您没有使用英语，我们很难进行处理。如果可能，请您将此问题描述修改为英文。请您直接编辑此问题，不要提交回复或新问题。

请注意，机器翻译服务通常无法处理用于讨论软件问题所需的技术性语言，所以我们推荐您寻找一位熟悉相关技术的人来协助翻译。

如果您无法做到，没有关系。此问题已经被标记为需要翻译，等待社区成员志愿进行翻译。

---
Thanks for creating this issue!

Unfortunately, as the description is not in English, it's hard for us to work on. If possible, please edit the original issue to be in English.

In our experience, automatic translation services are not able to handle the technical language needed to effectively communicate about software issues, so we recommend finding a human translator who is familiar with our technology to help.

Otherwise, we have marked this as needing translation and a community member may be able to help out.
<!-- translation_requested_comment -->",2021-01-05T08:38:32Z
754492010,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T08:38:33Z
754492197,"Sounds to me as if `code` is bound to start the exe, not our script.",2021-01-05T08:38:55Z
754492540,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-05T08:39:40Z
754492717,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-05T08:40:04Z
754493036,Can someone else try to reproduce?,2021-01-05T08:40:44Z
754493247,"Thanks for checking, I will merge this to https://github.com/microsoft/vscode/issues/113680",2021-01-05T08:41:11Z
754494481,"@eamodio that's epic, thanks for cleaning up.",2021-01-05T08:43:56Z
754495248,"@heartacker the reason tabs currently grow is the following pattern that imho is a bit unpleasant otherwise:

![image](https://user-images.githubusercontent.com/900690/103624979-9adffc80-4f3a-11eb-90f9-52f9e6506842.png)

As you can see each row would have an uneven gap on the right hand side.

As a workaround, if you configure `""workbench.editor.tabSizing"": ""shrink""` tabs will have a fixed width and not grow:

![image](https://user-images.githubusercontent.com/900690/103625070-b6e39e00-4f3a-11eb-9402-cd66bfb37216.png)
",2021-01-05T08:45:32Z
754496549,"I am not sure it should be in the menu, but having a command to toggle is fine I guess.",2021-01-05T08:48:13Z
754497560,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T08:50:06Z
754500466,@connor4312 awesome!,2021-01-05T08:55:54Z
754500681,@alexdima Any thoughts here? 🤔,2021-01-05T08:56:19Z
754503104,Did you try/see [`vscode.TextDocument.positionAt`](https://github.com/microsoft/vscode/blob/b6c601b4fc80733465ba52198a0c672d3527927a/src/vs/vscode.d.ts#L195)?,2021-01-05T09:00:37Z
754503743,@BerlinLion no screenshots attached,2021-01-05T09:01:51Z
754504410,">  disabled 61
extensions by bisect, I was asked if it's good or bad and I pressed bad,
and immediately there was a dialog telling that it was done and that no
issues could have been found

That's to be expected. At first it disables all extensions and when it is still bad with that then extension bisect is done because it isn't an extension issue",2021-01-05T09:03:06Z
754506614,"So currently my VScode terminal lags as well in the sense that if I type in a command, i'll see a freeze but then after the 1 to 2 second freeze, what I was typing actually appears. Essentially there is a visual lapse. Is this still an issue? Is there any word of an update. Is this on VScode's side, terminal issue, or Big Sur issue??",2021-01-05T09:07:02Z
754508236,"@mk-startialab thanks for the PR, but @yume-chan is correct. Since this file is auto generated we will not accept PRs. If the repo we get this grammar from is not active then please feel free to open an issue to suggest that we use a different pug grammar!",2021-01-05T09:10:03Z
754509569,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [SCM: Support input box spell checking (#35571)](https://www.github.com/microsoft/vscode/issues/35571) <!-- score: 0.477 -->
- [\[\[\[\[\[please add\]\]\]\]\] spelling check in build inside vs code (#41264)](https://www.github.com/microsoft/vscode/issues/41264) <!-- score: 0.465 -->
<!-- potential_duplicates_comment -->",2021-01-05T09:12:41Z
754510694,"@mk-startialab It looks like that line already has enough token scopes for you to be able to color the tokens differently with theming. Example, with the One Dark Pro theme that I have installed:

![image](https://user-images.githubusercontent.com/38270282/103628119-d54b9880-4f3e-11eb-947a-3958e91341a9.png)

",2021-01-05T09:14:56Z
754511223,Details on how you can do this: https://code.visualstudio.com/docs/getstarted/themes#_editor-syntax-highlighting,2021-01-05T09:15:57Z
754512351,"So you would expect a context menu action after the ""Edit Condition"". ""Clear Condition""?",2021-01-05T09:18:12Z
754512877,"> How can it be enabled?

https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes-v16.4#vertdoctabs
![example](https://docs.microsoft.com/en-us/visualstudio/releases/2019/media/16.4/verticaltabs.gif)",2021-01-05T09:19:19Z
754514364,Moved to the repository that our C++ grammar comes from: https://github.com/jeff-hykin/cpp-textmate-grammar/issues/528,2021-01-05T09:22:20Z
754514506,"Sounds good, never thought about this case.",2021-01-05T09:22:37Z
754514844,Can you please provide a copy/pastable example?,2021-01-05T09:23:16Z
754517179,"@deepak1556 I ran:

```
code-insiders --user-data-dir `mktemp -d` .
```

Then had to use `Reload Window` from the command pallette due to some issues with extensions.

Still got the crash:

(hopefully `Reload Window` didn't mess with the data dir)

<img width=""1041"" alt=""Screenshot 2021-01-05 at 11 26 19"" src=""https://user-images.githubusercontent.com/697707/103629331-d681c300-4f48-11eb-8f1e-7fec56bcb20a.png"">

Note that it happens randomly, I've seen it mostly happen when the angular app I'm running in the integrated terminal detects a code change and starts compiling. However, it can happen without any integrated terminal tasks running as well.

What I've been doing and helps a bit, was to run `Workspaces: Duplicate in new window` and run my `Run task` there (which spawns about 3 nodejs processes).

It's possible it is related to file change detection though. In this particular crash above, it crashed immediately after saving a file, and when angular started recompiling (running via `ng serve`).",2021-01-05T09:27:35Z
754521928,What happens? Is there an error?,2021-01-05T09:35:55Z
754523417,How about making a vertical drag gesture on the bottom edge of the tabs section toggle this? Drag down on the bottom edge of a scrolling tabs section to enable wrap. Drag up on the bottom edge of a wrapping tabs section to disable wrap.,2021-01-05T09:38:30Z
754525735,@bpasero how about making them grow on every line except for the last one?,2021-01-05T09:43:07Z
754526444,We shouldn't actually be doing any port forwarding for WSL.,2021-01-05T09:44:34Z
754526777,"No error, but my browser is not showing anything when I try to access 127.0.0.1:31606 in my local machine.
I think instead of mapping (vm)192.168.99.100:31606-> (local)127.0.0.1:31606
it is mapping (remote)127.0.0.1:31606->(local)127.0.0.1:31606.

**Note:** manualling tunneling via `ssh -L 31606:192.168.99.100:31606 azureuser@<azureip>` is working, i.e., I can able to access the index.html, which indicates that my minikube service is working fine. ",2021-01-05T09:45:10Z
754527406,"<img width=""456"" alt=""Screenshot 2021-01-05 at 11 45 13"" src=""https://user-images.githubusercontent.com/697707/103631324-80624f00-4f4b-11eb-8489-42318e9a2119.png"">

Also, at times, this pops up when saving a file and either: a) takes a long time, b) doesn't finish at all (waiting for minutes). I have to cancel it and `Reload Window`.

While this one was spinning, there was nothing relevant logged in the Developer tools, no warnings or errors.",2021-01-05T09:46:23Z
754528075,"@gjsjohnmurray this is a good idea but to my knowledge there is no CSS rule that we could leverage here because the wrapping is entirely done via the `flex` layout of the browser. Best we can do is control the growing for the last tab, but not all tabs of the last row.

@SneakyFish5 and @DynDux fyi for CSS tricks maybe I am missing something here.",2021-01-05T09:47:40Z
754528555,"I assume that the open is going through here: 

https://github.com/microsoft/vscode/blob/91f00c7c285ecd85a8d86298183180703d719486/src/vs/workbench/electron-sandbox/window.ts#L505-L525

@mjbvz is there a way to not do the resolve external URI for WSL?",2021-01-05T09:48:42Z
754529320,"Ah, thanks for the clarification. The Ports view for SSH only supports 0.0.0.0 and localhost (or 127.0.0.1) as possible hosts for the remote.",2021-01-05T09:50:08Z
754529411,@joaomoreno do you need anything from me to progress this? I think the build failure was a transient one.,2021-01-05T09:50:17Z
754529566,"The described behavior is how it is expected to work. If you disagree, please explain what is expected and what is not in more detail. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T09:50:37Z
754529717,"@roblourens if SSH wants to support other hosts, then the SSH extension could implement a tunnel provider.",2021-01-05T09:50:59Z
754533816,"Attaching the CPU profile of the `vscode.git` warning, which has been popping up repeatedly. `git` integration definitely seems slow, but not sure if it's git itself being slow or something else.

[exthost-840d83.cpuprofile.zip](https://github.com/microsoft/vscode/files/5769399/exthost-840d83.cpuprofile.zip)
",2021-01-05T09:58:31Z
754533828,"@Itsamirmasoud do you have `terminal.integrated.inheritEnv` set?

That setting can affect tasks because tasks often expect to be able to find things on the path (like `npm`) and that setting will often break that.",2021-01-05T09:58:32Z
754536543,"I am back at my desk after the holidays, so I've removed draft status from this PR.",2021-01-05T10:03:11Z
754539931,"can this ticket be used as a feature enhancement, instead of closing it?",2021-01-05T10:08:28Z
754540073,"Extensions can now synchronize state in globalStorage, please file an issue against them. ",2021-01-05T10:08:45Z
754541441,I wouldn't mind a contribution! ;),2021-01-05T10:11:33Z
754541807,"@gjsjohnmurray Still catching up, been out on vacation.",2021-01-05T10:12:17Z
754542156,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [The extension cannot be used after the update (#113219)](https://www.github.com/microsoft/vscode/issues/113219) <!-- score: 0.485 -->
- [""file copy + rename"" scenario explorer bug on Mac OS (#113446)](https://www.github.com/microsoft/vscode/issues/113446) <!-- score: 0.474 -->
<!-- potential_duplicates_comment -->",2021-01-05T10:12:58Z
754542577,"We're not interested in this. If you want to help, I suggest to read: https://github.com/microsoft/vscode/wiki/How-to-Contribute",2021-01-05T10:13:44Z
754542853,I think the code is in https://github.com/microsoft/vscode/blob/ebdff39cca7f5ee5e4ddd16e92d7fce2cce5cd93/src/vs/workbench/contrib/files/browser/fileActions.ts#L363-L454. Last time I checked there was also no test case for that. ,2021-01-05T10:14:15Z
754544039,No longer using the same folder for backups for each test should help here. via https://github.com/microsoft/vscode/commit/c4aeb68a68afa467a6b86f4141bb1570cd8140bc,2021-01-05T10:16:33Z
754544654,I have disabled the test for now.,2021-01-05T10:17:45Z
754544841,"This is not as simple as showing all commands with args in the UI. Without better UI support users might unknowingly add keybindings to commands those need args. Since this needs thinking about UI in keybindings editor, I am not in favour of accepting this PR unless you have any thoughts to start with.

FYI there is another main issue that tracks for this requirement - https://github.com/microsoft/vscode/issues/84072",2021-01-05T10:18:12Z
754545152,"~~Feel free to close this as dup of https://github.com/microsoft/vscode/issues/84072 if it is asking for same.~~

Edit: Ignore above statement. Keybindings editor should show all commands that are shown in command pallette. Since `Source Action...` command is available from Command Palette, it shall also be available in keybindings editor.",2021-01-05T10:18:56Z
754545294,"TBD: the test seems to be more flaky in web, this it was skipped before:

https://github.com/microsoft/vscode/commit/82b99b3286fb8c573e88669526431ade4bdad81d#diff-389cf3523b767a02d16fc12ac6447352d1aee0e13508bbb4a6fcc0b1e5dd0d7eL209",2021-01-05T10:19:16Z
754545738,"Yes, this is accepted as bug and it is broken from 1.47 as @alexr00 pointed out.",2021-01-05T10:20:11Z
754546160,via https://github.com/microsoft/vscode/commit/c4ea0b55906a3ebdedc39f4e921a109181e016d5,2021-01-05T10:21:05Z
754546291,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T10:21:20Z
754547111,"In that case, my change has fixed it.",2021-01-05T10:23:06Z
754548213,"@sandy081 ok I see, thanks for explanation ",2021-01-05T10:25:21Z
754548435,"Yes, enabling to edit the condition outside of a debug session would be helpful because it makes the feature more discoverable. In addition it better aligns exception breakpoints with source breakpoints which already support 7/24 condition editing.

(Clarification: exception breakpoints are provided by a DA on ""first contact"" and then they are shown as long as the same DA is used. So condition editing should only be enabled if the DA has returned the corresponding capabilities on first contact and then this enablement is persisted and can be used outside of a debug session) 

And using inline actions is another thing to try (but only after implementing the 7/24 condition editing).
 ",2021-01-05T10:25:51Z
754549106,Can you show me your `PATH` variable?,2021-01-05T10:27:20Z
754550428,"@Gruntfuggly I think this is intentional on the part of the grammar. If you disagree that an empty PHP file shouldn't be classified as HTML, I recommend filing an issue over in https://github.com/atom/language-php

@jrieken this does seem a bit unexpected though. Would it make sense to have snippets look at the language the file is set to?",2021-01-05T10:29:48Z
754551252,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T10:31:18Z
754551746,"> Did you try/see [`vscode.TextDocument.positionAt`](https://github.com/microsoft/vscode/blob/b6c601b4fc80733465ba52198a0c672d3527927a/src/vs/vscode.d.ts#L195)?

That method is exactly what I needed haha. Thank you @jrieken ",2021-01-05T10:32:16Z
754551923,@isidorn this seems to be duplicate of #113805 ?,2021-01-05T10:32:37Z
754552805,"Is there a way to detect that something is being resized so I can hide the breadcrumb picker?

Another option would be something like this (which doesn't look nice either)
```typescript
const mouseDownListener = dom.addDisposableListener(window, dom.EventType.MOUSE_DOWN, e => {
	// // #113675 This mouse event is outside the breadcrumb so it counts as a focus out
	if (!dom.isAncestor(e.target as HTMLElement, this._widget.domNode) && !dom.isAncestor(e.target as HTMLElement, parent)) {
		this._contextViewService.hideContextView(this);
	}
});
```

Another one is removing this line that just calls `e.preventDefault()` underneath in the sash mousedown event handler. Doing so will transfer focus to the `body` and  trigger the focusTracker `onDidBlur` event. Not sure if something else is relaying on this current behavior but it looks safe
https://github.com/microsoft/vscode/blob/699d736d7855d58bef19184603ddd80a39076ce3/src/vs/base/browser/ui/sash/sash.ts#L213",2021-01-05T10:34:09Z
754555946,"Just because it has been a long time coming; trying it out now and it is a-maz-ing. 
Seriously; this just puts the cherry right on top of VSCode. 

It sounds like such a simple thing for people to hound about for so long; but it really makes all the difference in the world, and it will dramatically help flow and cut down on needing to scroll and find a tab when some of us can work on 20+ tabs at once in our projects.

Thanks for adding this.",2021-01-05T10:40:18Z
754557479,"@pablospe close, but not quite. I just tried it, and cursor history seems to be wiped as soon as I switch tab, so that when coming back to a tab, hitting ""Cursor Undo"" always sends the cursor to the very first line of the file, instead of its previous location.
",2021-01-05T10:43:29Z
754559514,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T10:47:38Z
754560453,This sounds like something I fixed recently (4804bbcdff70b2905053bea0c8aaa19b50e0e631). Can you grab the latest Insiders build and try with that?,2021-01-05T10:49:28Z
754561703,"Is it a rendering issue? Does the underline show when reopening the editor?
Can you provide the html file?",2021-01-05T10:52:18Z
754562271,Can you provide a scss code snippet that shows such an import?,2021-01-05T10:53:29Z
754562991,"It's not a very nice user experience. I would expect to be able to define a template snippet for an empty PHP file and be able to insert it. An empty dropdown for something I've literally just added through the GUI makes it look broken.

Is there a work around? ",2021-01-05T10:55:09Z
754567814,"We get the list of valid properties from MDN. `text-stroke` is not documented as it is not part of any W3C spec. For that reason it probably should not be used. 

To tell VSCode to not warn about `text-stroke`, use the setting `css.lint.validProperties`.

",2021-01-05T11:04:33Z
754568888,"VSCode was not able to access 'https://json.schemastore.org/package'.
Maybe a connection or proxy issue?",2021-01-05T11:06:37Z
754572570,"@connor4312 my mistake, I created a duplicate of this issue this morninig.
I will close this one since the other one has more comments https://github.com/microsoft/vscode/issues/113805",2021-01-05T11:14:18Z
754574111,"@daiyam If you plan to work on the PR again, maybe it's better to start a new one. Something is off.

As mentioned, revert the changes to folding.ts, but add the code to select the provider in SyntaxRangeProvider.",2021-01-05T11:17:37Z
754575532,Folding ranges inside a line is https://github.com/microsoft/vscode/issues/50840. We currently have no plans to support that.,2021-01-05T11:20:34Z
754575734,Edit: the problem was the Code Runner extension in VSCode. Disabling it or running script in terminal does the job.,2021-01-05T11:20:56Z
754576321,"@deepak1556 Is there anything we could do on our side, like detect this case somehow and proactively inform users that the renderer has entered accessibiliy mode or something like that??",2021-01-05T11:22:06Z
754581710,"We updated the version of the HTML formatter which is jsbeautify.

Can you try if `""html.format.templating"": true` solves the problem?
",2021-01-05T11:33:39Z
754587994,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T11:48:07Z
754588128,"Hey @rebornix, this issue might need further attention.

@alefragnani, you can help us out by closing this issue if the problem no longer exists, or adding more information.",2021-01-05T11:48:24Z
754588642,"@maziac the current implementation is purely internal and uses a hard-coded heuristic: it tries to find all ""variables"" in a source line and matches them against variables in the Variables view. This works for ""normal"" languages but not for ""strange"" languages (like assembler).

Currently I'm trying to open-up this internal implementation by proving an extension API. See https://github.com/microsoft/vscode/issues/105690",2021-01-05T11:49:32Z
754589329,It seems to have fixed the issue. Thanks!,2021-01-05T11:51:06Z
754592082,"> How about making a vertical drag gesture on the bottom edge of the tabs section toggle this? Drag down on the bottom edge of a scrolling tabs section to enable wrap. Drag up on the bottom edge of a wrapping tabs section to disable wrap.

for me is ok,but that is unconspicuous for so many users,just like panel(panel can also drag out from button status bar)
",2021-01-05T11:57:25Z
754593583,"Hi,
I've created a little gif screenshot to better explain what I mean:

![js](https://user-images.githubusercontent.com/1047169/103642653-c3282500-4f53-11eb-9ae4-0be7f4dae481.gif)

It represent what I have in js/ts when importing a file from node_modules: I'have not to specify the path from my file to the the node_modules folder, and in addition the path is clickable (pressing CMD or CTRL) 

In scss I don't have a similar behavior. 
Since I use an external tool to compile my scss ([codekit](https://codekitapp.com/)) which has the ability to resolve node_modules paths, I can import and compile my scss files using the path relative to the node_modules folder, but it is not possible to open that file by cmd/ctrl-clicking the path:

```scss
@import 'glightbox/dist/css/glightbox'; // path from node_modules folder, codekit compiles it to css but I can't cmd-click it 
```

Maybe I have not correctly set some parameters in my VSCode configuration or that there is a plugin that allows this, but I could not find anything.

Thanks",2021-01-05T12:00:57Z
754597180,What would the best solution be for toggling line and block comments? Would it be a case of building in keymaps that link to those same settings?,2021-01-05T12:09:01Z
754597509,"@aeschli Ya, I can filter out the providers inside the `SyntaxRangeProvider` but I still would need to modify`folding.ts` to pass the option `EditorOption.foldingStrategy`. Is that ok?",2021-01-05T12:09:43Z
754598814,"Yes, meanwhile I found out that this is hardcoded.
Nice to hear that there will be an API.",2021-01-05T12:12:46Z
754605633,Any chance of [https://github.com/microsoft/vscode/issues/5280](https://github.com/microsoft/vscode/issues/5280) to be included on this roadmap? This minor feature will allow keybinding extensions to do so much! Thanks.,2021-01-05T12:27:59Z
754605851,"> Can you check if running with `--user-data-dir <some-absolute-path>` fixes the issue ?

Getting the very same error. This fixes the issue",2021-01-05T12:28:36Z
754608621,Just to mention: `Shift+click` on the folding indicator already unfolds recursively.,2021-01-05T12:34:49Z
754608925,"> Is there a way to detect that something is being resized so I can hide the breadcrumb picker?

That's the question. @sbatten should know",2021-01-05T12:35:27Z
754609631,"Thanks for the contribution. However, the change needs to go to https://github.com/textmate/html.tmbundle.

See the file header:
```
	""information_for_contributors"": [
		""This file has been converted from https://github.com/textmate/html.tmbundle/blob/master/Syntaxes/HTML.plist"",
		""If you want to provide a fix or improvement, please create a pull request against the original repository."",
		""Once accepted there, we are happy to receive an update request.""
	],
```",2021-01-05T12:37:03Z
754610238,Can you give a small code sample and steps to reproduce?,2021-01-05T12:38:32Z
754611084,"> Is there a work around?

You can define a snippet for html and php files using ""global"" snippets (F1 > Configure Snippet > New Global Snippets)",2021-01-05T12:40:30Z
754613103,"Related issue in https://github.com/microsoft/vscode-html-languageservice/issues/63

@bitwiseman Sorry for only see your question now. Yes, that needs to go into the HTML parser. If you want to give it a try, that would be fantastic.",2021-01-05T12:44:51Z
754618721,"> **Workaround:** Add a task that opens the current VSCode buffer in your other editor (e.g. Notepad++ or Vim) then make your changes there. Not elegant nor desirable _shrug_ but it's a workaround.

It would be better than nothing. Could you tell me how to do that? I have no idea what is a task and how to make it open the current buffer in another editor.

EDIT: Here is how it can be done (it should be easily adaptable to other editors than emacs).
1 - Open or create the file tasks.json Ctrl-Shift + P > ""Tasks: Configure Task"" > Enter
                                                                                                                         
2 - Edit the file to make it look like that:
```
{
    ""version"": ""2.0.0"",
    ""tasks"": [
        {
            ""label"": ""open in emacs"",
            ""type"": ""shell"",
            ""command"": ""emacs"",
            ""args"": [
                ""+${lineNumber}:0"",
                ""${file}""
            ]
            ""group"": ""test"",
        },
    ]
}  
```
Remark: ${lineNumber} enables to open emacs at the line selected in vscode. 
                                                              
3 - To use this task in the current buffer : Ctrl-Shift + P > ""Run Test Task"" > Select ""open in emacs"" > Enter
                    
4 (optional) - Associate a shortcut to the task.
                                                                                                                         
4.a Ctrl-Shift + P > ""Preferences: Open Keyboard Shortcuts File"" > Enter

4.b Add a shortcut in the file keybindings.json which should now be open. Example:                                                                                                 
```
    {                                                                                                                    
        ""key"": ""ctrl+alt+meta+e"",                                                                                        
        ""command"": ""workbench.action.tasks.runTask"",                                                                     
        ""args"": ""open in emacs""                                                                                          
    }                                    
```                                                                                
     
",2021-01-05T12:55:32Z
754625030,"@aeschli If the changes are ok, I will make another PR. Thx",2021-01-05T13:07:52Z
754647430,"I think the builtin toggle line comment / toggle block comment commands just work, regardless of tokens. i.e. for example they just look for `//` at a beginning of the line, not necessarily checking that the TM token is comment or not.


https://user-images.githubusercontent.com/5047891/103654022-a399f800-4f65-11eb-9207-103d4e591915.mp4

",2021-01-05T13:49:56Z
754651986,"Here is the documentation from mdn for the functions being added.
https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove
https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected
https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append",2021-01-05T13:58:21Z
754656273,"@jrieken I still think that is confusing for users. The grammar will likely not change, as an empty php file is html. It isn't clear that you must also define your php snippet for html. Is it possible to have snippets consider the language of the file, and not just the language that the grammar says?",2021-01-05T14:05:51Z
754657132,cc @SneakyFish5 ,2021-01-05T14:07:22Z
754660701,Thank you! ❤️ ,2021-01-05T14:14:11Z
754661937,"According to the HTML spec, tag names and attribute names case insensitive. So `<button>` and `<Button>` both describe a button.

Not sure I understand your scenario correctly.",2021-01-05T14:16:21Z
754664630,This is fixed in latest vscode insiders,2021-01-05T14:21:10Z
754665008,"Unsure, wouldn't that enable html-snippets inside JS script tags? That's something we avoid by todays restriction. The grammar says ""This part of the html file is JavaScript"" and we pick JS snippets, not html snippets. ",2021-01-05T14:21:49Z
754668749,"Since I focused on VSCode for the past few years, my keymaps and snippets in Sublime are pretty much outdated and out of sync up to the point that I don't even care about them any more and every time I open Sublime for some quick text hacking, I cry, because I can't control it any more. Though, it's still much better than Notepad.

I wish I could use VSCode for any text file by default in my system instead of Notepad or Sublime - with a minimalistic UI and very limited set of extensions to make it blazingly fast.

So, that being said, most of the time, I already know what file type or project I will be working with, so I would even imagine setting up multiple VSCode shortcuts with various preferences:

![image](https://user-images.githubusercontent.com/2313018/103657703-80257c00-4f6a-11eb-9389-812e4ef9b90c.png)
",2021-01-05T14:28:22Z
754671282,"> According to the HTML spec, tag names and attribute names case insensitive. So `<button>` and `<Button>` both describe a button.
> 
> Not sure I understand your scenario correctly

In my framework `<Button>` is a component 、`<button>` is a  tag node . 
But our  template file  extension  name is `.html` , because we want to use  VSCode HTML Support .
So how do i distinguish `<button>` and `<Button>` in VSCode HTML Support.  Or  is there a configuration that makes `<button>` and `<Button>`  different  .
Thank you for your reply !  ",2021-01-05T14:32:41Z
754674781,"@bpasero , Yes, We tried that. We currently have multi-root workspace setup for few items in projects but not for application configs (~/.config, ~/.cabal/, ~/.nvm/, .bash_profile, .bashrc). 

To explain further -
Below is how the current workspace looks like 

```
~| 
 | /.config
 | /.cabal/
 | /.nvm/
 | .bash_profile
 | .bashrc
/python
/node
/haskell
/project/
 | /python
 | /node
 | /haskell
 | /Clojure/
 | /Shell/
``` 
**Here** : `python`, `node`, and `haskell` are added as multi-root. We would want to remove them from `project`, but couldn't do it due to this issue.

There are 2 issues in this -
1. `python`, `node`, and `haskell` are tracked twice. So, When there are lot of projects in each of these directories, vsc becomes slow. 
2. Application config can grow as we add new program/application. This addition should be dynamic. So, We wanted to have the entire `~` added and manually remove other directory (~/project/). 

As I said early, We want to have below structure with two roots : `~` and `/project/`. 

```
~| 
 | /.config
 | /.cabal/
 | /.nvm/
 | .bash_profile
 | .bashrc
/python
/node
/haskell
/project/
 | /Clojure/
 | /Shell/
```

Currently, this is not possible in vscode by file.exclude or by multi-root-workspaces. 

",2021-01-05T14:38:41Z
754677246,@jrieken: I remember that we once discussed this and that the outcome was that backspace should always trigger a new request if it moves the cursor before the last trigger point. Is this still correct?,2021-01-05T14:42:34Z
754680104,"This bug has been fixed in to the latest release of [VS Code Insiders](https://code.visualstudio.com/insiders/)!

@xqzlgy2, you can help us out by commenting `/verified` if things are now working as expected.

If things still don't seem right, please ensure you're on version a48ef56fbf7767f55a193d7d5687addd1fc9239c of Insiders (today's or later - you can use `Help: About` in the command palette to check), and leave a comment letting us know what isn't working as expected.

Happy Coding!",2021-01-05T14:47:30Z
754683650,"Please ask your question on [StackOverflow](https://aka.ms/vscodestackoverflow). We have a great community over [there](https://aka.ms/vscodestackoverflow). They have already answered thousands of questions and are happy to answer yours as well. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T14:53:27Z
754684026,/duplicate https://github.com/microsoft/vscode/issues/76548,2021-01-05T14:54:05Z
754684341,Duplicate of #112537 (which will be fixed in tomorrow's insiders),2021-01-05T14:54:36Z
754692703,"Makes sense, let me assign to Jaunary to investigate more into this.",2021-01-05T15:06:09Z
754695928,"> I think it is unclear and redundant to listen/update submenu changes outside menu service. It would be nice if menuservice / submenu triggers a change event on sub menu changes too.

So, you want that a menu fires its onDidChange event whenever one of its submenu has changed, right? I think that makes sense. The leaking with `IMenu#getActions()` is real but the MenuItemAction and SubmenuItemAction shouldn't be alive and not listing. The use of the Action type was a pragmatic choice because it was (still is) a popular type back then but in theory those ""actions"" are only a collection of properties that describe a command. Consumer of menus should call `getActions` in response on a menu change event",2021-01-05T15:11:06Z
754696948,"> I don't think any other software on your machine would support this scenario, since the OS composition remains in composition mode when you press alt+k.

I tested same key composition on IntelliJ IDEA and Visual Studio, but there is no problem like this.",2021-01-05T15:12:54Z
754697639,"Happy New Year,

Yes I can reproduce this with js-debug adapter which has child sessions. The issue is that when a debug session is stopped we do not focus the stack frame, but only the session. What this means is that the variables does not display anything since a stack frame is not focused.
I acknowledge that this is a bug. And I think @connor4312 might have hit something similiar in the past",2021-01-05T15:14:06Z
754698534,"Thanks. I acknowledge the issue. And we would welcome a PR that neatly fixes this and adds a test, thus adding help wanted label.",2021-01-05T15:15:33Z
754702076,Thanks @nrayburn-tech ,2021-01-05T15:21:09Z
754702771,Is it fair to say that this is only a request to hide things from the file explorer?,2021-01-05T15:22:23Z
754703656,Thank you for trying that. So when you press alt+k in those the composition mode stops or can you still compose?,2021-01-05T15:23:48Z
754707269,It's a dup of https://github.com/microsoft/vscode/issues/70614.,2021-01-05T15:29:11Z
754709197,"Ok, so this is a vue file. You have to file the request against the vue extension. If you use vetur, that's the repo: https://github.com/vuejs/vetur",2021-01-05T15:32:07Z
754721147,I split the flow control and event batching portion of this into https://github.com/microsoft/vscode/issues/113827,2021-01-05T15:51:08Z
754722685,"Not sure if this belongs here, or would be better a new feature request: If I have already two panels open next to each other, opening the git diff in one panel is pretty small and no fun to read, e.g.:

![image](https://user-images.githubusercontent.com/3596742/103667383-24f98680-4f76-11eb-8155-2c7db3cbaf25.png)

- For me it would be nice, if the first two panels would be used for the diff
- In IntelliJ the diffs opens in a detached popup, which I can move around and resize individually. I also like this feature a lot",2021-01-05T15:53:42Z
754728186,Pinging `notebook` topic followers: @claudiaregio @rchiodo @greazer @donjayamanne @jilljac,2021-01-05T16:02:15Z
754735834,"I'm honestly baffled that so many seem to crave this feature to be **built-in**! There are working solutions for this! I for instance love good ol [Winmerge](https://github.com/winmerge/winmerge)! And with [GitHub Desktop](https://desktop.github.com/)s diff view I hardly miss this as well.

I'd rather see this as a proper (maybe even first class) **extension**. VS Code doesn't have to have everything on board.",2021-01-05T16:13:54Z
754736544,"Yes, ty, this does help.",2021-01-05T16:15:06Z
754736633,"Hi @0dinD, thank you for suggested clarification. The vscode-api topic is autogenerated from https://github.com/microsoft/vscode/blob/master/src/vs/vscode.d.ts so moving this suggestion to the vscode repo.
Feel free to submit a PR with your updated note.",2021-01-05T16:15:16Z
754740585,"I remember this problem happened to many old (and poorly-designed) React apps.

Usually the most simple input looks like this:

```jsx
const [value, setValue] = useState('');
const handleChange = e => setValue(e.target.value);
return <input value={value} onChange={handleChange} />
```

However some apps filter input in the event handler, which causes React to re-render the `<input>`, and IMEs will behave incorrectly.

So basically you should not replace the `<input>` element, or set its value programmatically.",2021-01-05T16:21:27Z
754741140,"Folks, how about we stop discussing how the icon should be like and start talking about why no decision has been made by the VS Code team? We've been discussing almost the same issue since Big Sur's beta introduction, and now it's been months since the official release.

Discussing how the icon should be won't do any good as the team should take the decision of changing the current icon first, then discussing internally, and possibly using our feedback written here.

And thanks to the ones who gave tips on how to change the app icon locally, but the issue is about reaching out to the team itself to change the icon shape for everyone.",2021-01-05T16:22:19Z
754745004,"Not a Typescript magician here, otherwise I would have provided a pull request. 😬 ",2021-01-05T16:28:48Z
754751515,"Thanks for the logs. It looks like VS Code doesn't get the debugger connection back from Node.js. Can you check on a few things?

1. Check what the `process.env.NODE_OPTIONS` are in your app
2. See if the app runs if you run it in the integrated console (remove `""console"":""integratedTerminal""`)",2021-01-05T16:39:25Z
754751765,Yep :),2021-01-05T16:40:02Z
754752050,"I tried removing integrated terminal.  The app seems to run, but it does not fix the breakpoint issue.",2021-01-05T16:40:38Z
754752252,"I can submit a PR.  @isidorn looking at the file/folder checks it looks like these two sets should be added.  If they look right, I will send a PR for them.

- File without extension
  - `file => file1`
  - `file1 => file2`
- Version number only, without extension
  - `1` => `2`
",2021-01-05T16:41:05Z
754753426,"```
<dir>(master)$  /usr/bin/env NODE_ENV=development 'NODE_OPTIONS=--require <homedir>/.vscode-server/bin/ea3859d4ba2f3e577a159bc91e3074c5d85c0523/extensions/ms-vscode.js-debug/src/bootloader.bundle.js --inspect-publish-uid=http' 'VSCODE_INSPECTOR_OPTIONS={""inspectorIpc"":""/tmp/node-cdp.18470-1.sock"",""deferredMode"":false,""waitForDebugger"":"""",""execPath"":""/usr/bin/node"",""onlyEntrypoint"":false,""autoAttachMode"":""always"",""fileCallback"":""/tmp/node-debug-callback-3d5f5fcbd56d026d""}' /usr/bin/node --expose-gc ./service/iam/index.js 
Debugger attached.
```",2021-01-05T16:43:46Z
754753935,We recently added an `invalidated` event that should work here https://microsoft.github.io/debug-adapter-protocol/specification#Events_Invalidated,2021-01-05T16:44:48Z
754755259,The latest vscode-emmet-helper seems to be broken. Closing.,2021-01-05T16:47:08Z
754755934,"@ewerybody not everyone is using Windows, and this deals with more than just diff.  A plug-in(s) would be fine with me.
Personally, I'm missing the compare/merge from SlickEdit, which would let you merge by line or block.  P4Merge was good, too.",2021-01-05T16:48:14Z
754756120,"Uh, weird: 
![image](https://user-images.githubusercontent.com/323878/103673675-bc3cea80-4f32-11eb-95b3-b10b9200ea31.png)

anything else missing?

You can set log level -> Trace and see search logs in the Window output channel

You could have those settings in your user settings too",2021-01-05T16:48:32Z
754758418,[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/microsoft/vscode?pullRequest=113837) <br/>All CLA requirements met.,2021-01-05T16:52:00Z
754758897,"Related - https://github.com/microsoft/vscode/issues/113732

Underlying rule - all commands those shown in command pallette should be able to configurable from keybindings editor.

Fixed.",2021-01-05T16:52:45Z
754758913,"@aeschli Hi Friend, adding you here based on interaction in https://github.com/microsoft/vscode/issues/107144

",2021-01-05T16:52:46Z
754759565,@bpasero here is the issue I discussed in PR https://github.com/microsoft/vscode/issues/70413,2021-01-05T16:53:48Z
754763952,@nrayburn-tech makes sense. Make sure to cover with tests and no need to go too fancy! Thanks,2021-01-05T17:00:43Z
754765695,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-05T17:03:25Z
754765808,Thanks for checking. Do you have any antivirus/firewall running which could be preventing the connection from happening?,2021-01-05T17:03:35Z
754766947,"Makes sense, let's move to On-Deck and we can easily add it.",2021-01-05T17:05:20Z
754767850,"I'm with @Bitbangr on this - not everyone is on Win and this would be fine as first-class extension. I would love to have line-by-line left-right replacement similar to BeyondCompare on Windows.

The GitHub Desktop client is definitely handy (and I personally prefer using it for full side-by-side comparison to the current diff view in VS Code), but it doesn't offer anything near this in terms of merging/overwriting functionality, at least on OS X. In conflict resolution mode (e.g. mid-`git rebase`) it basically just hands off entirely to your IDE if you want anything other than brute-force entire file replacement.",2021-01-05T17:06:41Z
754768058,"```
 5  Electron Framework!(anonymous namespace)::OnNoMemory(unsigned long) [oom.h : 21 + 0x4]
     fp = 0x000000016b748310    lr = 0x000000010974e848
     sp = 0x000000016b748310    pc = 0x000000010974ed68
    Found by: previous frame's frame pointer
 6  Electron Framework!blink::ReportOOMErrorInMainThread(char const*, bool) [v8_initializer.cc : 102 + 0x0]
     fp = 0x000000016b748340    lr = 0x0000000107c298f4
     sp = 0x000000016b748320    pc = 0x000000010974e848
    Found by: previous frame's frame pointer
 7  Electron Framework!v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [api.cc : 522 + 0x8]
     fp = 0x000000016b74cd90    lr = 0x0000000107c298b4
     sp = 0x000000016b748350    pc = 0x0000000107c298f4
    Found by: previous frame's frame pointer
 8  Electron Framework!v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [api.cc : 479 + 0xc]
     fp = 0x000000016b74cdc0    lr = 0x0000000107eb1a38
     sp = 0x000000016b74cda0    pc = 0x0000000107c298b4
    Found by: previous frame's frame pointer
 9  Electron Framework!v8::internal::wasm::WasmCodeManager::Commit(v8::base::AddressRegion) [wasm-code-manager.cc : 0 + 0x8]
     fp = 0x000000016b74ce80    lr = 0x00000001054e26dc
     sp = 0x000000016b74cdd0    pc = 0x0000000107eb1a38
    Found by: previous frame's frame pointer
10  Electron Framework!v8::internal::wasm::WasmCodeAllocator::AllocateForCodeInRegion(v8::internal::wasm::NativeModule*, unsigned long, v8::base::AddressRegion, v8::internal::wasm::WasmCodeAllocator::OptionalLock const&) [wasm-code-manager.cc : 680 + 0x4]
     fp = 0x000000016b74cee0    lr = 0x00000001054e2f74
     sp = 0x000000016b74ce90    pc = 0x00000001054e26dc
    Found by: previous frame's frame pointer
11  Electron Framework!v8::internal::wasm::NativeModule::CreateEmptyJumpTableInRegion(int, v8::base::AddressRegion, v8::internal::wasm::WasmCodeAllocator::OptionalLock const&) [wasm-code-manager.cc : 1232 + 0x8]
     fp = 0x000000016b74d170    lr = 0x00000001054e2288
     sp = 0x000000016b74cef0    pc = 0x00000001054e2f74
    Found by: previous frame's frame pointer
12  Electron Framework!v8::internal::wasm::NativeModule::AddCodeSpace(v8::base::AddressRegion, v8::internal::wasm::WasmCodeAllocator::OptionalLock const&) [wasm-code-manager.cc : 1344 + 0x10]
     fp = 0x000000016b74d200    lr = 0x00000001054e2e0c
     sp = 0x000000016b74d180    pc = 0x00000001054e2288
    Found by: previous frame's frame pointer
13  Electron Framework!v8::internal::wasm::NativeModule::NativeModule(v8::internal::wasm::WasmEngine*, v8::internal::wasm::WasmFeatures const&, v8::internal::VirtualMemory, std::__1::shared_ptr<v8::internal::wasm::WasmModule const>, std::__1::shared_ptr<v8::internal::Counters>, std::__1::shared_ptr<v8::internal::wasm::NativeModule>*) [wasm-code-manager.cc : 525 + 0x8]
     fp = 0x000000016b74d2f0    lr = 0x0000000107eb2a44
     sp = 0x000000016b74d210    pc = 0x00000001054e2e0c
    Found by: previous frame's frame pointer
14  Electron Framework!v8::internal::wasm::WasmCodeManager::NewNativeModule(v8::internal::wasm::WasmEngine*, v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&, unsigned long, std::__1::shared_ptr<v8::internal::wasm::WasmModule const>) [wasm-code-manager.cc : 807 + 0x18]
     fp = 0x000000016b74d380    lr = 0x0000000107ebf59c
     sp = 0x000000016b74d300    pc = 0x0000000107eb2a44
    Found by: previous frame's frame pointer
15  Electron Framework!v8::internal::wasm::WasmEngine::NewNativeModule(v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&, std::__1::shared_ptr<v8::internal::wasm::WasmModule const>, unsigned long) [wasm-engine.cc : 1058 + 0xc]
     fp = 0x000000016b74d3e0    lr = 0x0000000107e97b18
     sp = 0x000000016b74d390    pc = 0x0000000107ebf59c
    Found by: previous frame's frame pointer
16  Electron Framework!v8::internal::wasm::AsyncCompileJob::CreateNativeModule(std::__1::shared_ptr<v8::internal::wasm::WasmModule const>, unsigned long) [module-compiler.cc : 1917 + 0xc]
     fp = 0x000000016b74d4c0    lr = 0x0000000107e9c8a8
     sp = 0x000000016b74d3f0    pc = 0x0000000107e97b18
    Found by: previous frame's frame pointer
17  Electron Framework!v8::internal::wasm::AsyncCompileJob::PrepareAndStartCompile::RunInForeground(v8::internal::wasm::AsyncCompileJob*) [module-compiler.cc : 2356 + 0x8]
     fp = 0x000000016b74d520    lr = 0x0000000107e9c710
     sp = 0x000000016b74d4d0    pc = 0x0000000107e9c8a8
    Found by: previous frame's frame pointer
18  Electron Framework!v8::internal::wasm::AsyncCompileJob::CompileStep::Run(v8::internal::wasm::AsyncCompileJob*, bool) [module-compiler.cc : 2129 + 0x10]
     fp = 0x000000016b74d540    lr = 0x0000000107e9c668
     sp = 0x000000016b74d530    pc = 0x0000000107e9c710
    Found by: previous frame's frame pointer
19  Electron Framework!v8::internal::wasm::AsyncCompileJob::CompileTask::RunInternal() [module-compiler.cc : 2158 + 0x0]
     fp = 0x000000016b74d560    lr = 0x0000000107e98b78
     sp = 0x000000016b74d550    pc = 0x0000000107e9c668
    Found by: previous frame's frame pointer
20  Electron Framework!v8::internal::wasm::AsyncCompileJob::ExecuteForegroundTaskImmediately() [cancelable-task.h : 154 + 0xc]
     fp = 0x000000016b74d5f0    lr = 0x0000000107e99588
     sp = 0x000000016b74d570    pc = 0x0000000107e98b78
    Found by: previous frame's frame pointer
21  Electron Framework!v8::internal::wasm::AsyncStreamingProcessor::ProcessCodeSectionHeader(int, unsigned int, std::__1::shared_ptr<v8::internal::wasm::WireBytesStorage>, int) [module-compiler.cc : 2226 + 0x4]
     fp = 0x000000016b74d630    lr = 0x0000000107eaf6d8
     sp = 0x000000016b74d600    pc = 0x0000000107e99588
    Found by: previous frame's frame pointer
22  Electron Framework!v8::internal::wasm::AsyncStreamingDecoder::StartCodeSection(int, std::__1::shared_ptr<v8::internal::wasm::WireBytesStorage>, int) [streaming-decoder.cc : 187 + 0x10]
     fp = 0x000000016b74d6b0    lr = 0x0000000107eaf5a4
     sp = 0x000000016b74d640    pc = 0x0000000107eaf6d8
    Found by: previous frame's frame pointer
23  Electron Framework!v8::internal::wasm::AsyncStreamingDecoder::DecodeNumberOfFunctions::NextWithValue(v8::internal::wasm::AsyncStreamingDecoder*) [streaming-decoder.cc : 641 + 0xc]
     fp = 0x000000016b74d700    lr = 0x0000000107eae68c
     sp = 0x000000016b74d6c0    pc = 0x0000000107eaf5a4
    Found by: previous frame's frame pointer
24  Electron Framework!v8::internal::wasm::AsyncStreamingDecoder::OnBytesReceived(v8::internal::Vector<unsigned char const>) [streaming-decoder.cc : 241 + 0x10]
     fp = 0x000000016b74d7c0    lr = 0x0000000107ec522c
     sp = 0x000000016b74d710    pc = 0x0000000107eae68c
    Found by: previous frame's frame pointer
25  Electron Framework!v8::WasmStreaming::OnBytesReceived(unsigned char const*, unsigned long) [wasm-js.cc : 52 + 0x10]
     fp = 0x000000016b74d810    lr = 0x00000001097527b4
     sp = 0x000000016b74d7d0    pc = 0x0000000107ec522c
    Found by: previous frame's frame pointer
26  Electron Framework!blink::(anonymous namespace)::FetchDataLoaderForWasmStreaming::OnStateChange() [v8_wasm_response_extensions.cc : 72 + 0x0]
     fp = 0x000000016b74d850    lr = 0x00000001058fab54
     sp = 0x000000016b74d820    pc = 0x00000001097527b4
    Found by: previous frame's frame pointer
27  Electron Framework!blink::ResponseBodyLoader::DelegatingBytesConsumer::OnStateChange() [response_body_loader.cc : 185 + 0x8]
     fp = 0x000000016b74d930    lr = 0x0000000105d67030
     sp = 0x000000016b74d860    pc = 0x00000001058fab54
    Found by: previous frame's frame pointer
28  Electron Framework!base::TaskAnnotator::RunTask(char const*, base::PendingTask*) [callback.h : 100 + 0x0]
     fp = 0x000000016b74da30    lr = 0x0000000105d73440
     sp = 0x000000016b74d940    pc = 0x0000000105d67030
    Found by: previous frame's frame pointer
29  Electron Framework!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::sequence_manager::LazyNow*) [thread_controller_with_message_pump_impl.cc : 332 + 0xc]
     fp = 0x000000016b74da80    lr = 0x0000000105d73130
     sp = 0x000000016b74da40    pc = 0x0000000105d73440
    Found by: previous frame's frame pointer
30  Electron Framework!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWork() [thread_controller_with_message_pump_impl.cc : 252 + 0x8]
     fp = 0x000000016b74dad0    lr = 0x0000000105da2588
     sp = 0x000000016b74da90    pc = 0x0000000105d73130
    Found by: previous frame's frame pointer
31  Electron Framework!base::MessagePumpCFRunLoopBase::RunWork() [message_pump_mac.mm : 358 + 0x8]
     fp = 0x000000016b74dae0    lr = 0x0000000105d9f1f4
     sp = 0x000000016b74dae0    pc = 0x0000000105da2588
    Found by: previous frame's frame pointer
32  Electron Framework!base::mac::CallWithEHFrame(void () block_pointer) + 0xc
     fp = 0x000000016b74db20    lr = 0x0000000105da201c
     sp = 0x000000016b74daf0    pc = 0x0000000105d9f1f4
    Found by: previous frame's frame pointer
33  Electron Framework!base::MessagePumpCFRunLoopBase::RunWorkSource(void*) [message_pump_mac.mm : 334 + 0x4]
     fp = 0x000000016b74db30    lr = 0x0000000194d93c04
     sp = 0x000000016b74db30    pc = 0x0000000105da201c
    Found by: previous frame's frame pointer
34  CoreFoundation!__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 0x18
     fp = 0x000000016b74db70    lr = 0x9140000194d93b50
     sp = 0x000000016b74db40    pc = 0x0000000194d93c04
    Found by: previous frame's frame pointer
35  0x9140000194d93b4c
     fp = 0x000000016b74dbf0    lr = 0x6663000194d9383c
     sp = 0x000000016b74db80    pc = 0x9140000194d93b50
    Found by: previous frame's frame pointer
36  0x6663000194d93838
     fp = 0x000000016b74e950    lr = 0xf766000194d921d4
     sp = 0x000000016b74dc00    pc = 0x6663000194d9383c
    Found by: previous frame's frame pointer
37  0xf766000194d921d0
     fp = 0x000000016b74ea00    lr = 0x8457800194d91730
     sp = 0x000000016b74e960    pc = 0xf766000194d921d4
    Found by: previous frame's frame pointer
38  0x8457800194d9172c
     fp = 0x000000016b74ea50    lr = 0x877c800195b18a88
     sp = 0x000000016b74ea10    pc = 0x8457800194d91730
    Found by: previous frame's frame pointer
39  0x877c800195b18a84
     fp = 0x000000016b74eaa0    lr = 0x5718800105da2ab0
     sp = 0x000000016b74ea60    pc = 0x877c800195b18a88
    Found by: previous frame's frame pointer
40  0x5718800105da2aac
     fp = 0x000000016b74eae0    lr = 0x0000000105da1c0c
     sp = 0x000000016b74eab0    pc = 0x5718800105da2ab0
    Found by: previous frame's frame pointer
41  Electron Framework!base::MessagePumpCFRunLoopBase::Run(base::MessagePump::Delegate*) [message_pump_mac.mm : 149 + 0x10]
     fp = 0x000000016b74eb10    lr = 0x0000000105d73930
     sp = 0x000000016b74eaf0    pc = 0x0000000105da1c0c
    Found by: previous frame's frame pointer
42  Electron Framework!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta) [thread_controller_with_message_pump_impl.cc : 446 + 0x8]
     fp = 0x000000016b74ebb0    lr = 0x0000000105d54ae4
     sp = 0x000000016b74eb20    pc = 0x0000000105d73930
    Found by: previous frame's frame pointer
43  Electron Framework!base::RunLoop::Run() [run_loop.cc : 124 + 0xc]
     fp = 0x000000016b74ec70    lr = 0x00000001072c4084
     sp = 0x000000016b74ebc0    pc = 0x0000000105d54ae4
    Found by: previous frame's frame pointer
44  Electron Framework!content::RendererMain(content::MainFunctionParams const&) [renderer_main.cc : 256 + 0x4]
     fp = 0x000000016b74ece0    lr = 0x00000001059287b4
     sp = 0x000000016b74ec80    pc = 0x00000001072c4084
    Found by: previous frame's frame pointer
45  Electron Framework!content::ContentMainRunnerImpl::Run(bool) [content_main_runner_impl.cc : 860 + 0x8]
     fp = 0x000000016b74ef00    lr = 0x0000000105173080
     sp = 0x000000016b74ecf0    pc = 0x00000001059287b4
    Found by: previous frame's frame pointer
46  Electron Framework!content::RunContentProcess(content::ContentMainParams const&, content::ContentMainRunner*) [content_main.cc : 373 + 0xc]
     fp = 0x000000016b74ef30    lr = 0x000000010517352c
     sp = 0x000000016b74ef10    pc = 0x0000000105173080
    Found by: previous frame's frame pointer
47  Electron Framework!content::ContentMain(content::ContentMainParams const&) [content_main.cc : 399 + 0x4]
     fp = 0x000000016b74efe0    lr = 0x0000000104bfcbac
     sp = 0x000000016b74ef40    pc = 0x000000010517352c
    Found by: previous frame's frame pointer
48  Electron Framework!ElectronMain [electron_library_main.mm : 23 + 0x4]
     fp = 0x000000016b74f0b0    lr = 0x00000001046b2a90
     sp = 0x000000016b74eff0    pc = 0x0000000104bfcbac
    Found by: previous frame's frame pointer
49  Code - OSS Helper (Renderer)!main [electron_main.cc : 274 + 0x8]
     fp = 0x000000016b74f0d0    lr = 0x0000000194cb4f54
     sp = 0x000000016b74f0c0    pc = 0x00000001046b2a90
    Found by: previous frame's frame pointer
50  libdyld.dylib!start + 0x0
     fp = 0x0000000000000000    lr = 0x0000000000000000
     sp = 0x000000016b74f0e0    pc = 0x0000000194cb4f54
    Found by: previous frame's frame pointer
  ```",2021-01-05T17:07:03Z
754770862,"This would be the same crash I had reported when testing wasm loading with content_shell https://bugs.chromium.org/p/chromium/issues/detail?id=1150060#c5 

Back then we concluded that code sign with entitlement `com.apple.security.cs.allow-jit entitlement` is required now on M1 device that allows the use of `MAP_JIT` calls, because the insiders version runs fine. I will check if mock code signing the OSS build fixes the issue.",2021-01-05T17:11:36Z
754770884,"It seems wrong to me that you do not even try to help me and close the case directly, it shows that you have not read it, because I have already said that I disabled all the extensions that can interfere with this and it still does not work well, but you close it saying that it is caused for an extension, that you have little desire to work and help.
I have even said that I have reinstalled the program with only the flutter extension and it still does not work well but you do not deign to help me ...
Thanks a lot...",2021-01-05T17:11:40Z
754773364,"> 
> 
> @gjsjohnmurray Want to submit a PR? 👍

@joaomoreno I have submitted #113841",2021-01-05T17:15:54Z
754773583,"@jramsay since the steps to repro are a bit complex, let me ask you a few questions since you have the setup on your machine:

1. Can you see where the exception happens in the unminified code? Since the stack trace you posted looks minified and there is not much I can infer from it. You should be able to get the exception locations by F1 > developer tools > sources > break on exceptions. And there shuold be an option to use source maps
2. If you close all open files before reloading and collapse all folder in explorer than all works fine? Since then we should not restore anything?",2021-01-05T17:16:14Z
754773873,"Thanks for the profile, the lag in terminal is tracked under https://github.com/microsoft/vscode/issues/105446, please follow that for updates.

The root issue is change in behavior with how `fork` works on big sur for certain calls, the fix is being worked on in upstream as mentioned in https://github.com/electron/electron/issues/26143

",2021-01-05T17:16:38Z
754773969,Duplicate of #112621,2021-01-05T17:16:47Z
754774049,"> Extensions can now synchronize state in globalStorage, please file an issue against them.

Nice but what about other files like `…\Code\User\Emmet Settings\snippets.json` ?",2021-01-05T17:16:54Z
754776999,"Hi, this in fact is what I was searching for. I tested it and in general it works.
I send simply
~~~
new InvalidatedEvent()
~~~
and the data in the WATCH area is refreshed.

However there is maybe a flaw in this mechanism since I cannot expand the variable structures anymore after
InvalidatedEvent is sent until the next debug step.
Please see the attached gif:
![invalidated](https://user-images.githubusercontent.com/3081973/103677440-98a19080-4f82-11eb-97fd-a081da0d8070.gif)
This happens also on root level of the variable.





",2021-01-05T17:21:35Z
754777501,"We closed this issue because we are unable to reproduce the problem with the steps you describe. Chances are we've already fixed your problem in a recent version of VS Code. If not, please ask us to reopen the issue and provide us with more detail. Our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines might help you with that.

Happy Coding!",2021-01-05T17:22:33Z
754780284,"@ewerybody It's because the compare functionality is built in. Why use a completely different compare tool if there is a compare tool already built in? And sure, an extension would work (as long as it adds functionality to the existing compare tool, rather than build a new compare tool), but if you're going to do that, why not simply add that functionality to VS Code directly? Is there any downside **at all** to having this functionality built in?",2021-01-05T17:27:21Z
754780505,"@isidorn One other incrementing that I am not sure about.  `0999.txt` becomes `1000.txt`, without the leading 0.  Is this right, or should it maintain the number of leading 0s?",2021-01-05T17:27:48Z
754781320,"@SneakyFish5 @bpasero thank you for the continuous effort on this feature. Glad to see this option available today on Insiders! 
I was wondering if there is another configuration option to control the minimum shrink size until it wraps to a new line when using **Workbench > Editor : Tab Sizing** : `shrink`. 

![wrap_demo](https://user-images.githubusercontent.com/8151943/103677676-72a2ce80-4f37-11eb-8b7b-430b32fc27cf.gif)
",2021-01-05T17:29:21Z
754781877,"If you have zero leading paddings it usually means the amount of characters
should be maintained. So making 01000 out of 0999 would be wrong IMO. It
should just become 1000. Me two cents.

On Tue, 5 Jan 2021, 18:28 Nicholas Rayburn, <notifications@github.com>
wrote:

> @isidorn <https://github.com/isidorn> One other incrementing that I am
> not sure about. 0999.txt becomes 1000.txt, without the leading 0. Is this
> right, or should it maintain the number of leading 0s?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/113809#issuecomment-754780505>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEG6QJUEJG3IXJ4ALSKVY3SYND2PANCNFSM4VUYY2FQ>
> .
>
",2021-01-05T17:30:18Z
754784515,"Can you also try to remove the `.vscode-insiders` folder under home directory and see if the extension host crashes. 

As for the git integration slowdown, its triggered by child_process.spawn calls based on your profile and the root issue is tracked in upstream https://github.com/electron/electron/issues/26143",2021-01-05T17:35:12Z
754785830,"Good catch, I have pushed a fix for this case.",2021-01-05T17:37:39Z
754785856,"> Does this reproduce in the [latest VS Code insiders build](https://code.visualstudio.com/insiders/) with all [extensions disabled](https://github.com/microsoft/vscode/wiki/Performance-Issues#run-with-extensions-disabled)?
> 
> Also please provide steps to reproduce
> 
> /needsMoreInfo

Currently I haven't any steps to reproduce the issue right now. Haven't tried sorry. Currently the issue doesn't reappear after a restart of the IDE ",2021-01-05T17:37:41Z
754786291,I agree with @xh3b4sd ,2021-01-05T17:38:25Z
754787537,"@8itbangr & @nickbouton no one was suggesting anyone should be on Windows :) I was giving an example.

Yeah. P4Merge is also good. 3-pane 👍 and nice curves to indicate origin 👍

I actually only saw the diff-view in VS Code when I actually had a conflict. And I actually DID see things like the ""Accept Current/Incoming ..."" [suggested here](https://github.com/microsoft/vscode/issues/30519) (also posted above).
Id did seem rigid tho.

Well, yeah @cristi-neagu there IS something built-in and it seems unfinished. The downside is bloat and technical debt. I'd move all that to an extension. That's what these are for. So far I'm quite happy with VS Codes policy there. Atom is IMHO a little too granular in that regard.

I just see aaaall these comments  ... ""Many of us awaiting why not write it"" ....
And I wanted to add a single voice saying:
> **I'm fine without it**!

I think thats ok. Its also very very Ok for you to look forward to an implementation 👍",2021-01-05T17:40:20Z
754788467,Does text search work?,2021-01-05T17:41:50Z
754789148,"Same problem too, when I tried to sync my gists from github account on Manjaro KDE Plasma 20.12.1. My machine is Raspberry Pi 4B. 

Version: 1.52.1
Commit: [ea3859d](https://github.com/microsoft/vscode/commit/ea3859d4ba2f3e577a159bc91e3074c5d85c0523)
Date: 2020-12-16T16:31:12.802Z
Electron: 9.3.5
Chrome: 83.0.4103.122
Node.js: 12.14.1
V8: 8.3.110.13-electron.0
OS: Linux arm64 5.4.83-1-MANJARO-ARM

Is this solved yet? Thanks!",2021-01-05T17:43:02Z
754790081,There is no setting currently to control the minimum width of a tab when setting the tab sizing to `shrink`. It is hardcoded to 80px.,2021-01-05T17:44:42Z
754791146,You can add them to your SSH config to have SSH do the forwarding,2021-01-05T17:46:31Z
754791809,+1,2021-01-05T17:47:37Z
754793988,"> Does text search work?

Nope. I don't find `src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.css` via file search and there should also be a text match in that file

<img width=""349"" alt=""Screenshot 2021-01-05 at 18 50 31"" src=""https://user-images.githubusercontent.com/1794099/103680736-e5876600-4f86-11eb-8a2c-a08b41704362.png"">
",2021-01-05T17:51:19Z
754794401,"however this works for me:

![image](https://user-images.githubusercontent.com/900690/103680868-14054100-4f87-11eb-8735-abf199e2343d.png)
",2021-01-05T17:51:56Z
754794637,"I have actually added custom width in shrink mode as part of a new PR which
has title for custom height.

Please upvote the same.

On Tue, Jan 5, 2021, 11:15 PM Benjamin Pasero <notifications@github.com>
wrote:

> There is no setting currently to control the minimum width of a tab when
> setting the tab sizing to shrink. It is hardcoded to 80px.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/70413#issuecomment-754790081>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AADBBZ223MGI2NJ3SCG6AQTSYNFZ3ANCNFSM4G5XB4KA>
> .
>
",2021-01-05T17:52:18Z
754795332,"Added primary action to dropdown. But in notifications, dropdown is getting shown on top of the button

<img width=""476"" alt=""image"" src=""https://user-images.githubusercontent.com/10746682/103680963-2ed7b580-4f87-11eb-8613-c6f5ae54b2c3.png"">

@sbatten can this be fixable?",2021-01-05T17:53:24Z
754796404,"I have something I can repro now, it works in my remote vscode repo but not local",2021-01-05T17:55:05Z
754796902,/duplicate,2021-01-05T17:55:49Z
754797056,"Who put this in .gitignore? `out*/` 🤔 

Well, I would only expect that to match from root but rg seems to apply it like `**/out*`",2021-01-05T17:56:04Z
754797170,"@bpasero , That is right. I would say, a request to remove specific sub-folders or a file from a folder in the file explorer.

Currently, vscode lets us to _Remove folder from workspace_ but it does not allow us to _remove a sub-folder_ from a folder. It allows us to _delete_ the sub-folder but not _remove_ .",2021-01-05T17:56:17Z
754800301,This feature would be great,2021-01-05T18:01:09Z
754800539,"I'm not sure if this is the right place to ask a question like this, but I'm just curious; there's an example in http://aka.ms/vscodekeybindings that suggests this can be done with conditions:
```
// Keybindings that are complementary
{ ""key"": ""f5"",              ""command"": ""workbench.action.debug.continue"", ""when"": ""inDebugMode"" },
{ ""key"": ""f5"",              ""command"": ""workbench.action.debug.start"",    ""when"": ""!inDebugMode"" },
```
Is that documentation out of date or is the issue that the debug panel key bindings use a different mechanism? (And if so, why?)",2021-01-05T18:01:32Z
754801559,I do not think settings sync can cause extension host crash as it is running in separate process (shared). ,2021-01-05T18:03:19Z
754802825,"And the original issue, the .gitignore in distro has 

```
src/vs/server
resources/server
``` 

which should not be there, seems they were merged in probably by mistake at some point in the past couple months",2021-01-05T18:05:31Z
754810182,fixed as part of #111753,2021-01-05T18:17:15Z
754812660,"The Shift-click def what I want, thanks. Now what I'd like is a way to swap the click and shift-click behavior (make the unfold recursively the default)",2021-01-05T18:21:25Z
754814490,"Reading the gitignore doc, really seems like the leading slash shouldn't be necessary if the pattern already contains a slash, but testing with git, that's not how it works. Anyway, pushed fixes to both repos.",2021-01-05T18:24:26Z
754816758,"Actually nevermind, the issue was unrelated.",2021-01-05T18:28:36Z
754817955,"> To solve this problem:
> 
> 1. Go to extension dir. For example at Win it` here C:\Users\username\.vscode\extensions\ms-vscode-remote.remote-ssh-0.62.0\out
> 2. Edit file extension.js
> 3. Serch for $VSCH_DIR/server.sh
> 4. Change  start=$(millis)\n\t$VSCH_DIR/server.sh   to  start=$(millis)\n\tsudo $VSCH_DIR/server.sh
> 
> This is not so good, but it`s work! VS server process at remote host will be started as root and you can edit any files

Of course use/abuse of sudo should be considered, but in a controlled dev environment this seems to have solved the problem.",2021-01-05T18:30:47Z
754822018,"> Folks, how about we stop discussing how the icon should be like and start talking about why no decision has been made by the VS Code team? We've been discussing almost the same issue since Big Sur's beta introduction, and now it's been months since the official release.
> 
> 
> 
> Discussing how the icon should be won't do any good as the team should take the decision of changing the current icon first, then discussing internally, and possibly using our feedback written here.
> 
> 
> 
> And thanks to the ones who gave tips on how to change the app icon locally, but the issue is about reaching out to the team itself to change the icon shape for everyone.

A very good idea. Could we perhaps get an update internally from  @misolori ? He seems to be the guy on the VS team assigned to this. 

",2021-01-05T18:38:06Z
754822102,"Hey everyone, just wanted to chime in here and let you know that we are definitely working on this in the background and have been reading every comment. Since this is specific to the Mac platform it requires more strategic planning across the VS family of products (i.e. VS for Mac). We'll post updates here when we have something ready. 🙏  Thanks for your patience.",2021-01-05T18:38:16Z
754823674,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Frozen editor groups: prevent editor group focus from causing subsequently opened files to open in a given editor group (#109532)](https://www.github.com/microsoft/vscode/issues/109532) <!-- score: 0.537 -->
- [Breakpoint group. (#105927)](https://www.github.com/microsoft/vscode/issues/105927) <!-- score: 0.523 -->
- [Editor Tab Groups (#109196)](https://www.github.com/microsoft/vscode/issues/109196) <!-- score: 0.505 -->
- [Open file in specific group based on file extension (#111923)](https://www.github.com/microsoft/vscode/issues/111923) <!-- score: 0.497 -->
- [Allow grouping extension on user side.  (#105342)](https://www.github.com/microsoft/vscode/issues/105342) <!-- score: 0.475 -->
<!-- potential_duplicates_comment -->",2021-01-05T18:41:03Z
754828426,I am experiencing something similar https://github.com/microsoft/vscode/issues/113844,2021-01-05T18:49:47Z
754834741,@rebornix Additional feedback has come in since this issue was created and want to make sure we are also capturing the cell execution hanging and the interrupt cell execution also not working ,2021-01-05T19:01:46Z
754838052,"@swinder0161 please share the link to that PR to follow up, thanks!

> I have actually added custom width in shrink mode as part of a new PR which has title for custom height. Please upvote the same.
> […](#)
> On Tue, Jan 5, 2021, 11:15 PM Benjamin Pasero ***@***.***> wrote: There is no setting currently to control the minimum width of a tab when setting the tab sizing to shrink. It is hardcoded to 80px. — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#70413 (comment)](https://github.com/microsoft/vscode/issues/70413#issuecomment-754790081)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AADBBZ223MGI2NJ3SCG6AQTSYNFZ3ANCNFSM4G5XB4KA> .

",2021-01-05T19:08:03Z
754839933,"A workaround that we use on Linux to install the extension globally is:

```
sudo code --extensions-dir /usr/share/code/resources/app/extensions --install-extension </path/to/extension.vsix> --user-data-dir </path/to/a/users/homefolder/.vscode/>
```

The caveat to this is if you ever install a newer version of a none built-in extension, you will need to manually cleanup the old extension.",2021-01-05T19:11:38Z
754843277,"Oh my bad! Thanks for the fix, @roblourens.",2021-01-05T19:17:53Z
754845811,@fraigo  Here's the issue for configurable tab height: https://github.com/microsoft/vscode/issues/113832.,2021-01-05T19:22:35Z
754848055,"I have disabled the [Live Share Extension Pack](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack) which I wasn't really using and it seems that things are a lot better. I noticed it was taking part in the `cpuprofile` attached previously. 🤔 

Not sure if this fixes it yet, but there haven't been any crashes in a while.",2021-01-05T19:26:51Z
754849890,"I am not using pthreads, sempahores or mutexes in any of my code and I am not using any custom code in the console. My project is just a javascript project and has nothing to do with any of that. This only happens in the vscode console which leads me to believe it's a vscode issue.",2021-01-05T19:30:22Z
754850064,"> Can you also try to remove the .vscode-insiders folder under home directory and see if the extension host crashes.

FWIW, both VSCode Exploration and Insiders exhibit the problem, and I installed both fresh arm64 on a fresh macOS installation. This was a new Mac, so I didn't restore from anything.

The crashes have been super consistent for me, at least once every 10 minutes or so. If no one else reported this, it's probably a combination of the electron issue you linked and some extensions I'm using. 

I'll keep monitoring whether disabling Live Share helped and report back.",2021-01-05T19:30:42Z
754853195,"This issue has since been resolved by a recent system update.

I'll chalk it down to Nvidia's drivers not playing well with something inside Electron.",2021-01-05T19:36:36Z
754855340,"@joaomoreno @eamodio Does the tree take the editor off-dom during such a refresh? On my side, I can see that there is composition in progress and the editor gets blurred before the composition ends. Did something change on your side for the 1.52 release? (I don't think we made any changes to the composition handling in the editor).

Here is what I see on the textarea events when the background spinner finishes:
```
- composition start
- composition update
- blur
- focus
- blur
```

So this indicates to me that the editor is taken off-dom or at least blurred. This should not be done while doing composition. I can try to add a workaround on my side to recover from the missing composition end in this case and consider that blur also ends composition, but even with that workaround composition will be interrupted by this.",2021-01-05T19:40:42Z
754861387,"I tried latest insiders (1.53.0-insider, a48ef56f), openTunnel still doesn't return, and there is no error message anymore in console.",2021-01-05T19:52:33Z
754863565,@bgashler1 @chairy let me know if there are specific areas you're interested for guidelines. Will start working on this this month.,2021-01-05T19:56:47Z
754866164,Merging this to https://github.com/microsoft/vscode/issues/113680,2021-01-05T20:01:40Z
754867902,"If the crash continues, can you start the app with `--crash-reporter-directory <some-absolute-path>`, crash dumps will be generated in that location, please attach it here. Thanks!",2021-01-05T20:04:24Z
754869643,I don't think so... I'm just using windows defender,2021-01-05T20:07:35Z
754874830,"> +1 it would be great for VScode to simply request permissions on Mac, so that we don't have to do this workaround.

Yep just like pyCharm does it but i hate its GUI and need to learn their shortcuts 😢",2021-01-05T20:17:37Z
754876308,"@shaman-apprentice please open a new issue -- although note, that the behavior you describe is unlikely to change, as that is how tab management works in VS Code.

",2021-01-05T20:20:38Z
754876674,"I'm just going to reenable this, it seems fine here but it might be flaky in CI. If it is still flaky, I might just delete it.",2021-01-05T20:21:24Z
754878079,"Sorry about the startup crash, it arises from that fact v8 cache data written by intel app is not readable by the arm version. You can start the app with `--no-cached-data` instead of having to delete the data folders to workaround. Will implement a fix this iteration.",2021-01-05T20:24:09Z
754882147,You can also workaround by starting the app with `--no-cached-data` instead of deleting data folders.,2021-01-05T20:32:27Z
754883247,I have mistaken this with the other startup crash issue which has a different root cause. What is the best way to repro this issue ?,2021-01-05T20:34:40Z
754887763,"I've been trying real hard for the past hour to make it crash since disabling the Live Share pack, and I wasn't able to.

I assume the pack installs a code lens provider that runs `git` when hovering certain things in the editor. This seems somewhat inefficient on its part, besides the `libuv` issue you mentioned.

The performance, prior to disabling it, was horrible overall. I can't believe how smooth it is now. Thanks for pointing out that bug.

Just a heads up that `fsevents@2.3.0` is out now with the arm64/x86_64 universal binary. I'm not sure what chokidar is used for, but perhaps bumping fsevents might fix the warning and improve performance as well.",2021-01-05T20:43:38Z
754889456,"Without this enhancement, the feature does not scale well.

Would also be nice if we could Copy the list, then Paste it into Excel (tab-delimited, not comma-delimited).
Presently we cannot Copy the list at all.  :-( 

GeneMi (= MightyPen)
",2021-01-05T20:47:08Z
754889471,Merging to https://github.com/microsoft/vscode/issues/112172,2021-01-05T20:47:10Z
754890331,"FYI, this issue is related to https://github.com/microsoft/vscode/issues/47559",2021-01-05T20:48:52Z
754890978,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Require ""restart to update"" for opening .ipynb (#110618)](https://www.github.com/microsoft/vscode/issues/110618) <!-- score: 0.575 -->
- [Notebook crash when output is empty string (#112121)](https://www.github.com/microsoft/vscode/issues/112121) <!-- score: 0.488 -->
<!-- potential_duplicates_comment -->",2021-01-05T20:49:55Z
754896438,"Slight clarification... this _does_ appear to be PowerShell specific. Even when I ran `zsh` from within PowerShell, the problem repro'd which is why I thought it was generic to macOS... but after setting `zsh` as my default shell, I see that we get `\x1b[C` from it which satisfies the regex.

So tl;dr: why do you do this PowerShell?",2021-01-05T21:00:54Z
754897415,"when i turn off using the preview debugger i get this:
```
Debugger listening on ws://127.0.0.1:31936/90b36290-335b-4231-a489-69ba6d575779
For help, see: https://nodejs.org/en/docs/inspector
Debugger listening on ws://127.0.0.1:31937/3f8c6b55-9eb2-4374-ae41-8d4ac3ba3638
For help, see: https://nodejs.org/en/docs/inspector
Debugger listening on ws://127.0.0.1:31938/3cdfeb04-a866-4345-a7eb-26328b21fef8
For help, see: https://nodejs.org/en/docs/inspector
```

This is weird, because it was working about a month ago the last time I tried to debug this project.
There's no fancy stuff here, just a node server.
(the node server does fork twice)",2021-01-05T21:02:47Z
754898990,"also..  (not using preview) I was able to use chrome (windows) to connect to that node endpoint (wsl) 
it didn't seem like there was issues connecting",2021-01-05T21:05:50Z
754900853,but these are temporary ports,2021-01-05T21:09:45Z
754902807,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-05T21:13:48Z
754903189,Closing as not enough information was provided to investigate this further ,2021-01-05T21:14:35Z
754904143,Possibly an extension candidate. Assigning you @egamma since I think you were still maintaining out npm scripts support,2021-01-05T21:16:30Z
754904746,"@MateWW  If you are seeing issues related to TypeScript, please open a new issue so we can investigate further (make sure to fill in the issue template too)",2021-01-05T21:17:44Z
754904913,Does this reproduce in the [latest VS Code insiders build](https://code.visualstudio.com/insiders/) with all [extensions disabled](https://github.com/microsoft/vscode/wiki/Performance-Issues#run-with-extensions-disabled)?,2021-01-05T21:18:05Z
754906818,Please try upgrading your workspace to use `typescript@next` by installing [this extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Does this fix the issue?,2021-01-05T21:22:02Z
754910899,"@joaomoreno I've pushed that the editor recovers partially from this case, but it looks like the underlying browser textarea is broken (for a lack of a better word) until focus is manually moved out and back in. Here are the steps to observe that the textarea becomes broken because it is taken off-dom during composition.
* go to `src/vs/editor/browser/controller/textAreaInput.ts` and add a log statement just inside line 195 (`this._register(dom.addDisposableListener(textArea.domNode, 'compositionstart', (e: CompositionEvent) => {`) 
* ![image](https://user-images.githubusercontent.com/5047891/103700426-b5e75680-4fa4-11eb-9403-95c490d1d853.png)
* add another one just inside line 316 (`this._register(dom.addDisposableListener(textArea.domNode, 'input', () => {`):
* ![image](https://user-images.githubusercontent.com/5047891/103700453-c3044580-4fa4-11eb-91c0-228a0a8b963d.png)
* on Windows, install the Japanese input (see steps at https://github.com/microsoft/vscode/wiki/IME-Test#windowsmac-japanese)
* switch OS input method to Japanese and choose Hiragana
* ![image](https://user-images.githubusercontent.com/5047891/103700530-e202d780-4fa4-11eb-9cf4-db522e55ca51.png)
* paste this to the console: `setInterval(() => { console.log(`activeElement`, document.activeElement); }, 3000);`
* have an unstaged change
* click on stage file
* quickly focus the SCM input and type `se` and wait
* observe how composition is suddenly stopped (this is caused by the editor being taken off-dom)
* the focus is still in the editor but any keypress does not result in any input or composition being done by the browser
* if you click outside the editor abd click back in the browser recovers.


![TO_UPLOAD](https://user-images.githubusercontent.com/5047891/103701007-98ff5300-4fa5-11eb-8302-0bd2804bbec6.gif)
",2021-01-05T21:30:27Z
754916200,"@trenslow To eliminate any interference from settings sync, can you please try to first run `Settings Sync: Turn Off` ?

Extension host crashes are in >90% of the times caused by one of your installed extensions. All extensions execute together on a single nodejs process, so in order to narrow down the possible problematic extension, please try the following:
* run `F1 > Help: Start Extension Bisect`
* (this will restart VS Code with half of your extensions disabled)
* try to do the steps which reproduce the problem
* if the problem reproduces, click ""This is bad"" (this narrows down the problematic extension to the half which was enabled)
* if the problem does not reproduce, click ""Good now"" (this narrows down the problematic extension to the half which was disabled)
* these steps will repeat until the problematic extension is found

| initial | step | final |
|---|---|---|
| ![image](https://user-images.githubusercontent.com/5047891/101918658-e9170f80-3bc9-11eb-9977-857baa291937.png) | ![image](https://user-images.githubusercontent.com/5047891/101918683-ef0cf080-3bc9-11eb-9f9e-98b0177991b2.png) | ![image](https://user-images.githubusercontent.com/5047891/101918706-f502d180-3bc9-11eb-8c86-e56355958bd4.png) |",2021-01-05T21:35:36Z
754916864,"@alexr00 do you know if there's way for our extension to tell VSCode where the cursor should go? Really I want to know if this is possible for us to configure from an extension, so that when the user enters a new input we can tell VSCode that if they then press return, it should indent to a given level.",2021-01-05T21:36:32Z
754923438,Closing in favour of #113848,2021-01-05T21:50:19Z
754925204,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Disable intellisense when typing <?php in php documents (#68535)](https://www.github.com/microsoft/vscode/issues/68535) <!-- score: 0.504 -->
<!-- potential_duplicates_comment -->",2021-01-05T21:54:00Z
754940950,"> OC/OD are valid, they are just used when a different mode is enabled: https://github.com/xtermjs/xterm.js/blob/72dbd43be61d97e9260e620f1915fe64dfb9339b/src/common/input/Keyboard.ts#L55-L82

Thanks @Tyriar!",2021-01-05T22:28:54Z
754942736,"In my case I would love to have this when I compare clipboard with one
file, or one branch with current one, or one previous version of the local
file with current working version..... And several more....

And I think the best approach is to have this built-in vs code. For me is
only adding from source to destination, not in both ways, but in every
compare view already showed in vs code.



El mar., 5 ene. 2021 18:40, Eric Werner <notifications@github.com> escribió:

> @8itbangr <https://github.com/8itbangr> & @nickbouton
> <https://github.com/nickbouton> no one was suggesting anyone should be on
> Windows :) I was giving an example.
>
> Yeah. P4Merge is also good. 3-pane 👍 and nice curves to indicate origin
> 👍
>
> I actually only saw the diff-view in VS Code when I actually had a
> conflict. And I actually DID see things like the ""Accept Current/Incoming
> ..."" suggested here <https://github.com/microsoft/vscode/issues/30519>
> (also posted above).
> Id did seem rigid tho.
>
> Well, yeah @cristi-neagu <https://github.com/cristi-neagu> there IS
> something built-in and it seems unfinished. The downside is bloat and
> technical debt. I'd move all that to an extension. That's what these are
> for. So far I'm quite happy with VS Codes policy there. Atom is IMHO a
> little too granular in that regard.
>
> I just see aaaall these comments ... ""Many of us awaiting why not write
> it"" ....
> And I wanted to add a single voice saying:
>
> *I'm fine without it*!
>
> I think thats ok. Its also very very Ok for you to look forward to an
> implementation 👍
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/25887#issuecomment-754787537>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAOALEU4ITJV7XH7JPWTQN3SYNFJRANCNFSM4DKB7NOQ>
> .
>
",2021-01-05T22:33:07Z
754947563,"Having the same issue as of today - 
• VSC version: 1.52.1
• OS version: Big Sur 11.0.1 
• Python version: 3.8.5 
xlwings works properly in OS terminal but doesn't work in VSC terminal. Error message - 

OSERROR: -1743
MESSAGE: The user has declined permission.
COMMAND: app('/System/Library/CoreServices/System Events.app').processes[its.unix_id == 45291].visible.set(True)

VS code never asked the permission the first time when running `xlwings.Book()` If so, VS code should appear under Automation of Privacy settings in OS system preferences. Currently, os terminal is able to do so based on the screenshot as attached: 

![Screen Shot 2021-01-05 at 5 38 54 PM](https://user-images.githubusercontent.com/61469229/103707817-59247580-4f7d-11eb-854f-f0ecbabd53c4.jpg)

It would be better if we could use xlwings directly from VSC terminal. Thanks for the help. 
",2021-01-05T22:45:10Z
754960723,"@KanomiDim @john-larson You are still seeing this on 1.52.1? I was seeing this myself over the holiday break, but I can no longer reproduce it.",2021-01-05T23:21:25Z
754961613,"Hrm, I can't reproduce the issue even with spaces in the path. Maybe it is a specific issue with mysysgit. In the Output panel, under the `Git` channel -- do you see a log line that looks like `git log --format=""%H%n%aN%n%aE%n%at%n%ct%n%P%n%B"" -z -n21 -- <put-your-file-path-here>` if so, can you paste it here -- does it look correct? and if you run it from the command line with double-quotes around the filename if there are spaces does it work?",2021-01-05T23:23:43Z
754962511,"Duplicate of #113654
But as with that one, what are you trying to fix with this? The change you've made, breaks the title attribute part of the link.",2021-01-05T23:26:10Z
754963341,Can you provide the contents of the Git Output panel when you first open the folder?,2021-01-05T23:28:33Z
754963707,Probably related to #100274 and #113363,2021-01-05T23:29:25Z
754963942,"vim has a similar feature which is super handy https://vimhelp.org/diff.txt.html#copy-diffs

This has me wondering if there's a way to add `do` and `dp` to https://marketplace.visualstudio.com/items?itemName=vscodevim.vim",2021-01-05T23:30:02Z
754966809,@subz390 Your issue is unrelated to this report. And it sounds like you have an issue with the core.editor in your git config. (I used your repo and didn't experience any issue),2021-01-05T23:38:23Z
754968379,Duplicate of #112621,2021-01-05T23:43:13Z
754973485,"I believe this might have been caused by https://github.com/microsoft/vscode/issues/92146

Can you provide the output of `git for-each-ref --sort -committerdate --format ""%(refname) %(objectname) %(*objectname)""` I think something might be going wrong with our parsing there.",2021-01-05T23:58:00Z
754978183,"I think I found a pure css solution for the problem with last tab spanning the whole width!
Just add the following style when _tabSizing = fit_:

`.tabs-container::after{
  content: '';
  flex-grow: 20;
}`

This will create an additional tab pseudo-element, that grows 20 times larger than the other tabs. It could be an even higher number, but I think 20 should be sufficient.
The `margin-right` on the last-child ist still needed though.",2021-01-06T00:12:18Z
754990728,"/needsMoreInfo

What sort order do you have for Outline view?
You should use Sort by: Position to have order similar to file. Otherwise it will sort by text value instead of position in file (assuming same category).
![image](https://user-images.githubusercontent.com/1312662/103715180-9f52f680-4fc8-11eb-8d46-a367edfaefa0.png)
",2021-01-06T00:42:01Z
754990960,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-06T00:42:48Z
755001354,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [can't open source control ""..."" menu right after commit (#108825)](https://www.github.com/microsoft/vscode/issues/108825) <!-- score: 0.521 -->
<!-- potential_duplicates_comment -->",2021-01-06T01:07:13Z
755013953,"Ok, thanks.

On Tue, Jan 5, 2021 at 10:03 AM Johannes Rieken <notifications@github.com>
wrote:

> disabled 61
> extensions by bisect, I was asked if it's good or bad and I pressed bad,
> and immediately there was a dialog telling that it was done and that no
> issues could have been found
>
> That's to be expected. At first it disables all extensions and when it is
> still bad with that then extension bisect is done because it isn't an
> extension issue
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/112703#issuecomment-754504410>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AGJLLYDHJYCMFDXKWAU7OHDSYLIWNANCNFSM4U67ZN6A>
> .
>
",2021-01-06T01:18:53Z
755014602,"@eamodio thanks for looking into the issue.  I came to the same conclusion as you and so meticulously went through Google for answers, all of which suggested the same thing.  When I exhausted all those possible solutions, I searched all the issues in this repo and only found this issue.

So to summarise:
- core editor is set to `core.editor=Code.exe --wait` what should it be set to?  because this is what it was originally set to and what everyone on Google said it should be set to.
- I tried setting it with the full path to `Code.exe`, however `Code.exe` is in PATH so I've left it like this.  Changing it from full path to this made no difference.
- May I confirm you watched the video I posted all the way through?  Why does this only happen with rebasing and not merging?  Surely if there was a problem with `core.editor` merging would also fail?
- And can you confirm that I'm performing the correct actions in the right order?
- Finally, as you feel this is a separate issue should I open a new issue or are we good to continue discussing here?  Either way I would sincerely like to get to the bottom of this.
",2021-01-06T01:21:06Z
755015931,"I'll pay more attention to the CPU and memory usage. I am working on an Angular project with a lot of modules. 
My general workflow is to start the angular local server and launch chrome via the debugger. 
I'll work on developing features and fixing bugs with the debugger running so that I can see changes in the browser and the logs in VS Code. If I am working further down the stack I will open up Chrome Dev tools to see the network traffic. Having the Chrome Dev tools open may be a contributing factor as the two debuggers will attempt to take focus when breakpoints are hit. 

I notice that VS code has gotten into a bad state when ""Go To Definition"" and Intellisense stops working. At that point, I'll try to kill the debugger to shut down normally and see that the debugger won't detach even if the browser window is gone.

I hope that helps. Let me know if there are logs or another telemetry that I can provide.",2021-01-06T01:24:59Z
755029040,"Maybe related to: #102401

The commit message editor’s context menu is placed within the `.monaco-editor` element, but the `.monaco-list-rows` element it is contained within is both:
1. Wrapped within a `ScrollableElement`, which would make the element receive an `overflow: hidden` style, and
2. Due to the `transformOptimization` property, https://github.com/microsoft/vscode/blob/2c74aeb5b6b0cbf2257b68d991ce01e2e41506ac/src/vs/base/browser/ui/list/listView.ts#L323 transformed (by a value other than `none`) as well.

![image](https://user-images.githubusercontent.com/8168391/103720523-7d786480-5006-11eb-8cf4-4f2866f26445.png)
",2021-01-06T02:07:29Z
755032091,"The output:
```zsh
joe733 @ xpsl502x in dcp on  main 
➜ git branch -a
* main
  python
  remotes/origin/main

joe733 @ xpsl502x in dcp on  main 
➜ git for-each-ref --sort -committerdate --format ""%(refname) %(objectname) %(*objectname)""
refs/heads/python bf593588d016e314e9af9eb61602d5d38c989468 
refs/remotes/origin/main 9f366c7ec2aefc46e3476506f24947fa0bf15bef 
refs/heads/main 9f366c7ec2aefc46e3476506f24947fa0bf15bef 
```",2021-01-06T02:16:55Z
755043685,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [main.py (#109317)](https://www.github.com/microsoft/vscode/issues/109317) <!-- score: 0.534 -->
<!-- potential_duplicates_comment -->",2021-01-06T02:56:08Z
755044157,"> (Experimental duplicate detection)
> Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
> 
> * [main.py (#109317)](https://www.github.com/microsoft/vscode/issues/109317)

No.",2021-01-06T02:57:43Z
755046326,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:16Z
755046429,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:35Z
755046448,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:39Z
755046460,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:41Z
755046475,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:42Z
755046482,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:44Z
755046487,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:45Z
755046497,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:47Z
755046506,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:49Z
755046511,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:50Z
755046515,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:51Z
755046528,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:53Z
755046544,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:54Z
755046551,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T03:05:56Z
755048136,/verified,2021-01-06T03:11:24Z
755048514,Solution: save on .gitignore file and this will update the .gitignore file and then gray out the files.,2021-01-06T03:12:45Z
755064240,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Support for Included ssh config files (#109846)](https://www.github.com/microsoft/vscode/issues/109846) <!-- score: 0.548 -->
<!-- potential_duplicates_comment -->",2021-01-06T04:05:00Z
755068201,Thanks! Will be fixed in tomorrow's insiders!,2021-01-06T04:20:20Z
755069821,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Multiple environment profiles (either per-session or per-window) (#57548)](https://www.github.com/microsoft/vscode/issues/57548) <!-- score: 0.455 -->
- [Auto Build Marlin - command not found: platformio (#108903)](https://www.github.com/microsoft/vscode/issues/108903) <!-- score: 0.451 -->
<!-- potential_duplicates_comment -->",2021-01-06T04:26:05Z
755070307,"_Originally posted by @subz390 in https://github.com/microsoft/vscode/issues/113302#issuecomment-755014602_

> @eamodio thanks for looking into the issue. I came to the same conclusion as you and so meticulously went through Google for answers, all of which suggested the same thing. When I exhausted all those possible solutions, I searched all the issues in this repo and only found this issue.
> 
> So to summarise:
> 
> * core editor is set to `core.editor=Code.exe --wait` what should it be set to?  because this is what it was originally set to and what everyone on Google said it should be set to.
> * I tried setting it with the full path to `Code.exe`, however `Code.exe` is in PATH so I've left it like this.  Changing it from full path to this made no difference.
> * May I confirm you watched the video I posted all the way through?  Why does this only happen with rebasing and not merging?  Surely if there was a problem with `core.editor` merging would also fail?
> * And can you confirm that I'm performing the correct actions in the right order?
> * Finally, as you feel this is a separate issue should I open a new issue or are we good to continue discussing here?  Either way I would sincerely like to get to the bottom of this.

",2021-01-06T04:28:03Z
755071256,"@subz390
Hrm, this one is confusing. I hadn't watched the video, but have now -- and everything looks fine (except for the error of course). Do you have possibly have `sequence.editor` set in your git config? As that will override `core.editor` for rebases. 

For the hell of it, I'd try just setting `core.editor` to `code --wait` to see if that makes any difference.

If none of that fixes anything -- do you have any special settings? Could you post your settings.json (ensuring there isn't any sensative info in there)?",2021-01-06T04:31:50Z
755077035,"@eamodio ok leave it with me, I'll try what you suggest and report back with a list of settings.",2021-01-06T04:53:31Z
755077109,"I also wonder if your full path is too long for git, if you have a long path > 260 characters, you could try setting `git config core.longpaths true` to see if that makes any difference.",2021-01-06T04:53:47Z
755078802,"Ok I've been able to reproduce this issue after messing with the screen size a bit, sorry for not catching it earlier. The jumping is caused by the extra icons in the editor actions being added after the editor group is selected. Those icons increase the `margin-right` of the last tab, and force it to a new row (which only happens on certain sizes of the window). So I understand the cause of the jumping, but not the reason for the selection of the extra lines. As trying to fix the jumping itself, I'm not sure how to do that, but I will look into it.",2021-01-06T04:59:34Z
755082526,"Any update on this? 

#### I'm experiencing the same issue

<img width=""460"" alt=""Screen Shot 2021-01-05 at 11 12 56 PM"" src=""https://user-images.githubusercontent.com/1715082/103731771-90118000-4fab-11eb-82a3-b46fb9a9420d.png"">


I only see corruption in the _Explorer_ workspace area. This has been a consistent occurrence over this past week.

#### Using VSCode

```
Version: 1.52.1
Commit: ea3859d4ba2f3e577a159bc91e3074c5d85c0523
Date: 2020-12-16T16:30:02.420Z
Electron: 9.3.5
Chrome: 83.0.4103.122
Node.js: 12.14.1
V8: 8.3.110.13-electron.0
OS: Darwin x64 20.2.0
```

#### On a MacBook Pro

```
MacBook Pro (16-inch, 2019)
AMD Radeon Pro 5500M 8 GB
Intel UHD Graphics 630 1536 MB
```

#### Stranger things
![stranger things](https://user-images.githubusercontent.com/1715082/103728492-cba84c00-4fa3-11eb-8be3-8086d64113a7.gif)

The sudden shift in corruption when resizing the window is surely a bug. This behavior persists after quitting the app and even after restarting the computer. However, it's extremely distracting; I've found that I can skirt around the issue by
* randomly resizing sections in the sidebar and randomly scrolling until things render properly (see ☝🏾) * or turning off my GPU 
* except when switching graphics on **after** VSCode has started by
	1. disabling discrete graphics
	2. starting VSCode
	3. then enabling discrete graphics 

#### My attempts to troubleshoot
* Quit the app
* Restarted computer
* Disconnected the thunderbolt monitor
* **Disabled discrete graphics**

The issue seems to be with discrete graphics. I'm on a 5K monitor with _Automatic graphics switching_ checked; unchecking this results in discrete graphics **always** being used, but I can't use my monitor without discrete graphics; so it seems VSCode will not work reliably with a thunderbolt display connected. 

🤔 

VSCode should render properly regardless of the underlying hardware.

#### FWIW 
* The same bug exists in Discord; it occurs more erratically and isn't
constrained to a specific portion of the UI.
* I have not experienced this bug in Slack.
",2021-01-06T05:11:24Z
755091418,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [More Sorting Options For Key Bindings (#96994)](https://www.github.com/microsoft/vscode/issues/96994) <!-- score: 0.49 -->
<!-- potential_duplicates_comment -->",2021-01-06T05:37:23Z
755091605,@infinnie thank you so much -- awesome investigation!,2021-01-06T05:37:53Z
755091838,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [1.28.2 version startup slow  (#62703)](https://www.github.com/microsoft/vscode/issues/62703) <!-- score: 0.759 -->
- [Slow startup (#110993)](https://www.github.com/microsoft/vscode/issues/110993) <!-- score: 0.66 -->
- [Intellisense very slow (#113655)](https://www.github.com/microsoft/vscode/issues/113655) <!-- score: 0.46 -->
- [VS Code startup error (#113227)](https://www.github.com/microsoft/vscode/issues/113227) <!-- score: 0.457 -->
<!-- potential_duplicates_comment -->",2021-01-06T05:38:32Z
755092167,Any progress on this? I really don't like having to run GNOME Keyring alongside KWallet.,2021-01-06T05:39:26Z
755095773,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [chinese language  (#108783)](https://www.github.com/microsoft/vscode/issues/108783) <!-- score: 0.544 -->
<!-- potential_duplicates_comment -->",2021-01-06T05:48:49Z
755104086,"well @aeschli , I do have requested **PR** for that at textmate, but that repository didn't finalize the PR yet, and last PR at that repository was closed very long time ago, like almost 1 year before to be specific.",2021-01-06T06:10:16Z
755106590,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Terminal (#109333)](https://www.github.com/microsoft/vscode/issues/109333) <!-- score: 0.964 -->
- [terminal (#108022)](https://www.github.com/microsoft/vscode/issues/108022) <!-- score: 0.83 -->
- [terminal not working  (#109174)](https://www.github.com/microsoft/vscode/issues/109174) <!-- score: 0.793 -->
- [Terminal (#111765)](https://www.github.com/microsoft/vscode/issues/111765) <!-- score: 0.601 -->
- [I want to choose terminal when I open a new terminal (#57874)](https://www.github.com/microsoft/vscode/issues/57874) <!-- score: 0.565 -->
<!-- potential_duplicates_comment -->",2021-01-06T06:17:18Z
755107908,We want to be conservative when changing the defaults for all users. Many users are not going to be writing code for environments that support tsnext features or the standard library from it,2021-01-06T06:20:54Z
755108235,/extPython,2021-01-06T06:21:50Z
755108252,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T06:21:52Z
755108400,"It looks like this is caused by the Python extension. Please file it with the repository [here](https://github.com/microsoft/vscode-python). Make sure to check their issue reporting template and provide them relevant information such as the extension version you're using. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines for more information.

Happy Coding!",2021-01-06T06:22:12Z
755108759,This should be fixed in the current insiders builds ,2021-01-06T06:23:19Z
755109748,Thanks for the fix!,2021-01-06T06:25:56Z
755112575,"> @infinnie thank you so much -- awesome investigation!

Maybe a comment should be added to explain why transform optimization should not be applied here, or it is possible that it could get confusing sometime later.",2021-01-06T06:32:56Z
755114071,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [\[folding\] mode to have region based folding only (#95156)](https://www.github.com/microsoft/vscode/issues/95156) <!-- score: 0.529 -->
- [\[folding\] Move line up/down should skip over folded regions or folded sections (#63972)](https://www.github.com/microsoft/vscode/issues/63972) <!-- score: 0.471 -->
<!-- potential_duplicates_comment -->",2021-01-06T06:36:56Z
755115704,"My view is that untitled files conceptually belong to the workspace.

If you are using them to start a new file, you almost always are going to save the file into the workspace. Therefore applying the workspace language settings makes sense.

If you are just using them as a scratchpad, treating them as part of the workspace lets you adjust settings/config for them. I don't think you can configure them otherwise

Ultimately languages/extensions are free to determine this for themselves, but defaulting them to be conceptually in the workspace (although perhaps not in language specific the project) makes the most sense to me. This is what our JS/TS support does",2021-01-06T06:40:51Z
755117339,@alexr00 Could the wsl remote extension implement a `ITunnelProvider` that either returns `undefined` or returns the original url?,2021-01-06T06:44:58Z
755118241,"@isidorn Assigning you since I believe this issues is about VS Code's explorer.

I don't think we want to have a JavaScript/TypeScript specific solution here, but maybe we could add an option to disable auto-reveal if the file is in a hidden or excluded directory?
",2021-01-06T06:47:19Z
755119245,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [TS Server fatal error:  Debug Failure. (#108873)](https://www.github.com/microsoft/vscode/issues/108873) <!-- score: 0.93 -->
- [TS Server fatal error:  Debug Failure. (#112853)](https://www.github.com/microsoft/vscode/issues/112853) <!-- score: 0.817 -->
- [TS Server fatal error:  Debug Failure. (#109598)](https://www.github.com/microsoft/vscode/issues/109598) <!-- score: 0.813 -->
- [TS Server fatal error:  Debug Failure. False expression. (#111428)](https://www.github.com/microsoft/vscode/issues/111428) <!-- score: 0.808 -->
- [TS Server fatal error:  Debug Failure. False expression. (#108450)](https://www.github.com/microsoft/vscode/issues/108450) <!-- score: 0.808 -->
<!-- potential_duplicates_comment -->",2021-01-06T06:49:43Z
755123744,"We have a great developer community [over on slack](https://aka.ms/vscode-dev-community) where extension authors help each other. This is a great place for you to ask questions and find support.

Happy Coding!",2021-01-06T07:00:44Z
755123829,"Please speak up again if you could not find help, but we are not giving support for our API in issues. If you still think there is a bug in VSCode we can always reopen.",2021-01-06T07:00:54Z
755124078,This issue has been reported already in either this or a similar form. Please check the label that was assigned to this issue to find it.,2021-01-06T07:01:32Z
755124195,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T07:01:48Z
755124323,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22workbench-tabs%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T07:02:02Z
755124482,"@DynDux @SneakyFish5 great, I suggest we take this idea to a new PR and test it out there, what do you think?",2021-01-06T07:02:22Z
755125336,"I believe this is just a consequence of:
* mouse down to click into editor
* editor changes size
* mouse up is now at a different location in editor
* editor thinks this is a selection

Interestingly the layout happens async (on next animation frame), but I guess the mouse up is still happening afterwards. Maybe we need to further delay the layout or relayout in this case?

Note that the fact that editors jump is probably nothing we can fix easily because that is just how the wrapping tabs work.",2021-01-06T07:04:04Z
755125855,"From https://github.com/microsoft/vscode/pull/106448#issuecomment-754978183

![image](https://user-images.githubusercontent.com/900690/103739427-e60b1580-4ff5-11eb-864d-45da63d563fd.png)
",2021-01-06T07:05:14Z
755126059,[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/microsoft/vscode?pullRequest=113881) <br/>All CLA requirements met.,2021-01-06T07:05:46Z
755129013,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T07:12:35Z
755130035,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T07:14:57Z
755130884,Can you try to reproduce with our nightly insider builds? You can give our preview releases a try from: https://code.visualstudio.com/insiders/,2021-01-06T07:17:06Z
755131151,CI failing due to https://github.com/yarnpkg/yarn/issues/6312#issuecomment-422806004.,2021-01-06T07:17:53Z
755131568,"Obrigado por criar esse problema!

No entanto, como a descrição não está em inglês, é difícil para nós trabalhar nisso. Se você for capaz, por favor, edite esta edição para estar em inglês. Por favor, não adicione um novo comentário ou crie um novo problema, mas sim edite o problema existente.

Infelizmente, os serviços de tradução automática não são capazes de lidar com a linguagem técnica necessária para se comunicar efetivamente sobre problemas de software, por isso recomendamos encontrar um tradutor humano que esteja familiarizado com nossa tecnologia para ajudar a traduzir.

Caso contrário, esta questão foi marcada como necessidade de tradução e um membro da comunidade pode ser capaz de ajudá-lo a traduzi-lo.

---
Thanks for creating this issue!

Unfortunately, as the description is not in English, it's hard for us to work on. If possible, please edit the original issue to be in English.

In our experience, automatic translation services are not able to handle the technical language needed to effectively communicate about software issues, so we recommend finding a human translator who is familiar with our technology to help.

Otherwise, we have marked this as needing translation and a community member may be able to help out.
<!-- translation_requested_comment -->",2021-01-06T07:19:04Z
755135312,same issue in the rust-analyzer repo : [issue link](https://github.com/rust-analyzer/rust-analyzer/issues/7175),2021-01-06T07:29:26Z
755136136,"Related failing unit test:

```
2) Native Modules (macOS)
       chokidar (fsevents):

      AssertionError [ERR_ASSERTION]: Unable to load ""chokidar (fsevents)"" dependency. It was probably not compiled for the right operating system architecture or had missing build tools.
      + expected - actual

      -false
      +true
      
      at Context.<anonymous> (file:///Users/bpasero/Development/Microsoft/monaco/out/vs/platform/environment/test/node/nativeModules.test.js:49:20)
```",2021-01-06T07:31:42Z
755136465,It doesn't seem that we can get around the racing problem of yarn. The other solution is to build tsec through the postinstall script of VS Code.,2021-01-06T07:32:35Z
755136528,I wonder if this is a problem local to me or are we not running unit tests against Apple SI yet?,2021-01-06T07:32:43Z
755136788,Duplicate of #40290,2021-01-06T07:33:30Z
755143368,"Its just a problem in local build because keytar uses prebuilt modules, and arm version is not available. For the product build I manually cross-compile the package https://github.com/microsoft/vscode/blob/master/build/azure-pipelines/darwin/product-build-darwin.yml#L116.


> are we not running unit tests against Apple SI yet?

Yes we are not running tests, will need to add it back.",2021-01-06T07:50:21Z
755144989,"Chokidar v3.5.0 was just released that takes in fsevents universal build https://github.com/fsevents/fsevents/pull/350 , we can update to it.",2021-01-06T07:54:22Z
755145706,"I'm using vscode from VSCode-win32-x64-1.52.1.zip on windows 10. Inputing chinese is ok when editing documents with any chinese IME. When inputing in the terminal, it is not ok with sogou IME and ok with Microsoft PinYin IME.

Inputing chinese is ok for vscode-1.45.1",2021-01-06T07:56:14Z
755146715,"> Just a heads up that fsevents@2.3.0 is out now with the arm64/x86_64 universal binary. I'm not sure what chokidar is used for, but perhaps bumping fsevents might fix the warning and improve performance as well.

Thanks for the work! chokidar just released a version with it. Will update shortly.",2021-01-06T07:58:48Z
755149899,"Thanks @misolori, really glad to hear that. Looking forward to updates from your side.",2021-01-06T08:06:36Z
755149915,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Option to disable creation of a branch when a remote tracking branch is selected (#96264)](https://www.github.com/microsoft/vscode/issues/96264) <!-- score: 0.77 -->
- [Case sensitive branch name not honoured (#110405)](https://www.github.com/microsoft/vscode/issues/110405) <!-- score: 0.703 -->
- [close newly created file(s) in a branch once git checkout to another branch (#110261)](https://www.github.com/microsoft/vscode/issues/110261) <!-- score: 0.628 -->
- [New branch not visible (#109797)](https://www.github.com/microsoft/vscode/issues/109797) <!-- score: 0.6 -->
- [Git: Preserve open files list when switching branches (#35307)](https://www.github.com/microsoft/vscode/issues/35307) <!-- score: 0.584 -->
<!-- potential_duplicates_comment -->",2021-01-06T08:06:39Z
755150493,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Can't run commands from remote extension in a disconnected window (#88111)](https://www.github.com/microsoft/vscode/issues/88111) <!-- score: 0.449 -->
<!-- potential_duplicates_comment -->",2021-01-06T08:08:02Z
755150872,"- using fresh Xubuntu20.04 install
- xubuntu uses Thunar
- installed VS Code from default package manager
- when tryin to `open containing folder`:
- EDIT: When Thunar is already opned , it works.
-
![Screenshot_2021-01-06_09-08-12](https://user-images.githubusercontent.com/10895291/103744863-c6c4b600-4ffe-11eb-9c26-31c044616d6f.png)
",2021-01-06T08:08:51Z
755151013,"@woderchen what exactly are the arguments that you want to pass to the Java program?
Please list the command line as you would use it in a regular shell.

(the ""args"" value in your launch.json from above doesn't make sense since it is syntactically broken).",2021-01-06T08:09:11Z
755152924,code pointer: https://github.com/microsoft/vscode/blob/c87c95a1a04b01107328fe1987b1865b2eb367a8/src/main.js#L510,2021-01-06T08:13:08Z
755153568,"@eamodio I think `git config --global core.editor ""code --wait""` has done the trick.
Is this what it should do, opening the interactive commit message?
Either way the error message is gone and closing the commit message confirmation proceeds with the rebase.
![210106-075704 commit editmessage](https://user-images.githubusercontent.com/11546815/103744009-ece55880-4ff4-11eb-84cf-d2dea955b90f.png)
",2021-01-06T08:14:44Z
755154676,"I have unlocked the original issue and closing this as dupe. However, in the name of peace and productivity: let's continue discussions on the PR so that we can stay focused. ",2021-01-06T08:17:22Z
755155965,"@sana-ajani just let me know that the news JAWS version has an improved VS Code support. From their release notes: ""Improved the user experience when using JAWS with the Visual Studio Code application. This includes turning off the Virtual PC Cursor by default, eliminating the announcement of ARIA regions, and removing the announcement of a long URL when the program is launched.""

Let us know if JAWS behaves better with VS Code now and what are the biggest issues remaining.",2021-01-06T08:20:18Z
755156409,I can reproduce with Safari,2021-01-06T08:21:21Z
755157270,"/duplicate of #23927

Close this as dupe because #23927 is about the design and candidates for overlay. Please add a comment there with what ""modifier"" you need",2021-01-06T08:23:13Z
755157387,"/needsMoreInfo

Please use this guide to provide more information: https://github.com/Microsoft/vscode/wiki/Performance-Issues. Thanks.",2021-01-06T08:23:27Z
755157626,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T08:23:58Z
755157707,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-06T08:24:09Z
755157808,All VS Code process show very little CPU usage,2021-01-06T08:24:23Z
755157885,"This can be fixed with the condition correct.
However the default should just work and user should not have to fix anything.",2021-01-06T08:24:32Z
755157923,Please use this guide to provide more information: https://github.com/Microsoft/vscode/wiki/Performance-Issues. Thanks.,2021-01-06T08:24:38Z
755158001,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Prettier is not working (#112399)](https://www.github.com/microsoft/vscode/issues/112399) <!-- score: 0.461 -->
- [Terminal - last line overwriting itself in Window mode (#113501)](https://www.github.com/microsoft/vscode/issues/113501) <!-- score: 0.456 -->
<!-- potential_duplicates_comment -->",2021-01-06T08:24:50Z
755158336,"Tho, we still need to know what's slow on your system. Please follow this guide:  https://github.com/Microsoft/vscode/wiki/Performance-Issues. Thanks.",2021-01-06T08:25:37Z
755159379,https://stackoverflow.com/questions/30347554/python-does-not-show-result-of-print-statements-in-class the same question asked some years ago ,2021-01-06T08:27:58Z
755159776,"Wait... It seems that the build is failing with those changes

```

15
error https://registry.yarnpkg.com/typescript/-/typescript-4.1.3.tgz: Extracting tar content of undefined failed, the file appears to be corrupt: ""ENOENT: no such file or directory, stat '/home/runner/.cache/yarn/v6/npm-typescript-4.1.3-519d582bd94cba0cf8934c7d8e8467e473f53bb7-integrity/node_modules/typescript/lib/typescript.js'""
16
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
17
Error: Process completed with exit code 1.
```",2021-01-06T08:28:45Z
755160077,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Vscode crash on startup (#110186)](https://www.github.com/microsoft/vscode/issues/110186) <!-- score: 0.846 -->
- [Crash on Ubuntu 18.04.3 (#89370)](https://www.github.com/microsoft/vscode/issues/89370) <!-- score: 0.511 -->
- [Remote display X11 not working after update (#110119)](https://www.github.com/microsoft/vscode/issues/110119) <!-- score: 0.504 -->
- [code crashes when workspace has multiple root directories (#89828)](https://www.github.com/microsoft/vscode/issues/89828) <!-- score: 0.497 -->
- [Unable to start VSCode 1.19.3 in X2go  (#42619)](https://www.github.com/microsoft/vscode/issues/42619) <!-- score: 0.487 -->
<!-- potential_duplicates_comment -->",2021-01-06T08:29:24Z
755160193,Dup of https://github.com/microsoft/vscode/issues/87956,2021-01-06T08:29:35Z
755161324,"The commit is linked to this issue, so it should provide the context.",2021-01-06T08:31:58Z
755161557,Curious why the lockfile contains 6 different chokidar versions.,2021-01-06T08:32:28Z
755161636,"This is a fair feature request, however we do not have it on our immediate plan. Thus assigning to backlog and we might add this in the future. Thanks
However this will probably be handled by extensions if we open up the explorer exclusion api to extensions",2021-01-06T08:32:38Z
755161880,"This bug has been fixed in to the latest release of [VS Code Insiders](https://code.visualstudio.com/insiders/)!

@maltaesousa, you can help us out by confirming things are working as expected in the latest Insiders release. If things look good, please leave a comment with the text `/verified` to let us know. If not, please ensure you're on version 9b6aaf1e86c8fec4c86c664edf5f713583c70fe5 of Insiders (today's or later - you can use `Help: About` in the command palette to check), and leave a comment letting us know what isn't working as expected.

Happy Coding!",2021-01-06T08:33:09Z
755161884,yep this required compiling fsevents as universal binary,2021-01-06T08:33:10Z
755162547,"I just did a test and everything is working as expected.
Thanks.",2021-01-06T08:34:42Z
755162701,"Yup, that looks like the correct behavior.
Odd that the `.exe` part caused an issue, but good to know. And glad it's resolved for you.",2021-01-06T08:35:02Z
755163234,Lol. I finally got to read your comments,2021-01-06T08:36:20Z
755163258,Duplicate of #112481,2021-01-06T08:36:24Z
755163870,"This is a duplicate. Unfortunately, I don't recall the exact issue number nor its title :flushed: Anyways, searching for issues with the same labels will likely help you :point_right:
https://github.com/microsoft/vscode/issues?utf8=✓&q=is%3Aopen+label%3A""outline""",2021-01-06T08:37:49Z
755163972,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22outline%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T08:38:07Z
755166360,"/extJava
",2021-01-06T08:43:35Z
755166523,"It looks like this is caused by the Java extension. Please file it with the repository [here](https://github.com/redhat-developer/vscode-java). Make sure to check their [troubleshooting instructions](https://github.com/redhat-developer/vscode-java/wiki/Troubleshooting) and provide relevant information such as the extension version you're using. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines for more information.

Happy Coding!",2021-01-06T08:43:53Z
755167873,"Looks good, thanks for adding tests! Merging it in ☀️ ",2021-01-06T08:46:51Z
755168161,"@xh3b4sd it would be great if you can try this out with vscode insdiers from tomorrow and give us feedback.
Thanks to @nrayburn-tech for providing a PR",2021-01-06T08:47:35Z
755168321,"> If the crash continues, can you start the app with `--crash-reporter-directory <some-absolute-path>`, crash dumps will be generated in that location, please attach it here. Thanks!

It looks like eventually it still crashed, even without the live share extension pack. It took way longer though. 🤔  

<img width=""898"" alt=""Screenshot 2021-01-06 at 10 46 00"" src=""https://user-images.githubusercontent.com/697707/103748191-676da280-500c-11eb-8128-0a03c43fea4b.png"">

Going to run with crash dump reporting now.

---

Still seeing this logged btw:

```
   ERR Request textDocument/codeAction failed with message: Cannot read config file: /Users/andreialecu/Work/x/x-monorepo/packages/x-shared/package.json
Error: EFAULT: bad address in system call argument, read: Error: Request textDocument/codeAction failed with message: Cannot read config file: /Users/andreialecu/Work/x/x-monorepo/packages/x-shared/package.json
Error: EFAULT: bad address in system call argument, read
	at /Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52031
	at /Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52325
	at Immediate.<anonymous> (/Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52690)
	at processImmediate (internal/timers.js:456:21)
```

Have seen it a bunch of times, always related to `dbaeumer.vscode-eslint`.",2021-01-06T08:47:56Z
755168376,"@jvesouza thanks, adding verified label!",2021-01-06T08:48:03Z
755169158,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Terminal (#109333)](https://www.github.com/microsoft/vscode/issues/109333) <!-- score: 0.849 -->
- [terminal is not working , (#113878)](https://www.github.com/microsoft/vscode/issues/113878) <!-- score: 0.818 -->
- [terminal (#108022)](https://www.github.com/microsoft/vscode/issues/108022) <!-- score: 0.804 -->
- [terminal not working  (#109174)](https://www.github.com/microsoft/vscode/issues/109174) <!-- score: 0.718 -->
- [Terminal (#111765)](https://www.github.com/microsoft/vscode/issues/111765) <!-- score: 0.582 -->
<!-- potential_duplicates_comment -->",2021-01-06T08:49:48Z
755171657,"Presence of ""XHR failed"" message makes me think #111277 might be relevant to you.",2021-01-06T08:54:57Z
755173079,"If I ever find out I'll return to let you know.  Thanks for tracking the issue, peace out...",2021-01-06T08:57:47Z
755173609,"This command was renamed to `workbench.action.toggleEditorType` (it was renamed so that it would also work for notebooks and other types of resources)

",2021-01-06T08:58:57Z
755176725,"This is already possible. For example, I use this keybinding: 
```json
	{
		""key"": ""ctrl+shift+alt+b"",
		""command"": ""workbench.action.tasks.runTask"",
		""args"": ""Kill Build VS Code""
	}
```

And here's the task that it runs:
https://github.com/microsoft/vscode/blob/45e6a5e6175709e126dc2bdf09b14986595d09de/.vscode/tasks.json#L87-L94",2021-01-06T09:05:24Z
755177454,Will there be a release or how do I get my hands on the right version to test locally? ,2021-01-06T09:07:01Z
755177784,"Huh, nice idea (wish I'd thought of it)! I'll take a look.",2021-01-06T09:07:47Z
755178487,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [New condition for breakpoints: enable after another breakpoint was hit (#104563)](https://www.github.com/microsoft/vscode/issues/104563) <!-- score: 0.473 -->
- [error breakpoint (#112502)](https://www.github.com/microsoft/vscode/issues/112502) <!-- score: 0.467 -->
- [Node debugging: Breakpoints are verified (#67644)](https://www.github.com/microsoft/vscode/issues/67644) <!-- score: 0.446 -->
<!-- potential_duplicates_comment -->",2021-01-06T09:09:13Z
755181308,"- open a WSL window
- open the integrated terminal and run `cmd.exe /c ""SET && PAUSE""`
- observe that `ELECTRON_RUN_AS_NODE` is set

The process hierarchy is as follows:
```
Code-insiders.exe [Renderer]   :  ELECTRON_RUN_AS_NODE undefined
  Code-insiders.exe [Ext Host]    :  ELECTRON_RUN_AS_NODE=1
    Code-insiders.exe [WSL Deamon Process]   :  ELECTRON_RUN_AS_NODE=1
     WSL.exe
        [Server Running in WSL]
        cmd.exe [""SET && PAUSE""]
```

@bpasero @alexdima The ext host environment has `ELECTRON_RUN_AS_NODE=1` set, so all processes launched from extensions will inherit that. Ideally it doesn't have it set, but I assume there's nothing we can do there.

I would fix that in the WSL-Remote extension then when launching WSL.exe then.",2021-01-06T09:15:12Z
755181366,"You might be able to do it with [indentation rules](https://code.visualstudio.com/api/language-extensions/language-configuration-guide#indentation-rules), but this is outside of my expertise. Maybe @dbaeumer knows of a way to do it with a language server?",2021-01-06T09:15:18Z
755184014,@paulmillr likely from dev dependencies that depend on older versions?,2021-01-06T09:20:58Z
755184672,"Totally ok for me! Just thought it belongs to this PR because this is how it should have been resolved in first place. ;-)
Please do whatever the right workflow is. Thank you so much!",2021-01-06T09:22:23Z
755185757,"I do not think we support this OS, but maybe Deepak you know more about compatibility.",2021-01-06T09:24:34Z
755186062,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-06T09:25:12Z
755186318,I am on that macOS version and it works fine for me.,2021-01-06T09:25:48Z
755186369,"We have a great developer community [over on slack](https://aka.ms/vscode-dev-community) where extension authors help each other. This is a great place for you to ask questions and find support.

Happy Coding!",2021-01-06T09:25:54Z
755186587,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T09:26:17Z
755188313,"I think we cannot just remove `ELECTRON_RUN_AS_NODE` because there are child processes forked from the extension host that probably need it.

@deepak1556 do you know if it is possible to remove `ELECTRON_RUN_AS_NODE` environment from a process after it has been created? Or is that needed to fork further child processes?",2021-01-06T09:29:50Z
755188575,I have added your suggested solution to https://github.com/microsoft/vscode/issues/113801.,2021-01-06T09:30:22Z
755191079,"> I think we cannot just remove `ELECTRON_RUN_AS_NODE` because there are child processes forked from the extension host that probably need it.

I guess you can't remove it from the local Windows extension host, but you _can_ remove it from the `wsl.exe` process when spawning it*. It was mentioned before in this thread the inside the remote environment, Electron isn't used, but even if it were - we are talking about the _Windows_ environment variable here (which isn't shared with the Linux processes unless configured in `WSLENV`, but _is_ shared with other Windows processes spawned as descendents by Linux processes), so the _remote_ extension host inside WSL won't be affected anyway.

So, if I understand correctly, removing the variable from the `wsl.exe` calls* should not do any harm, unless you meant that the _Linux_ extension host will also attempt to spawn _Windows_ processes which need this variable set...

_*: you can control the environment of Windows child processes you spawn... so you can create a copy of the environment block and remove the variable and use the modified environment block while creating the new process, or you can of course spawn a child of your own first, remove the environment variable from inside that child and have the child spawn the actual thing you want to spawn._

I'd conclude that @aeschli is correct and it should be fixed inside the WSL remote extension so that this variable is not set on wsl.exe children.",2021-01-06T09:35:17Z
755191238,"Oh there is also this message above:

`[14087:0106/103241.243758:INFO:CONSOLE(469)] ""Uncaught (in promise) Error: Element with id aa is already registered"", source: file:///Users/bpasero/Development/Microsoft/monaco/out/vs/workbench/api/common/extHostTreeViews.js (469)`",2021-01-06T09:35:37Z
755192015,"@bpasero  but is there something I can do here? I run the command as mentioned on vscode build page on github.
cd vscode
yarn

I get this error. Need help to solve it",2021-01-06T09:37:17Z
755193099,We have instructions at https://github.com/microsoft/vscode/wiki/How-to-Contribute but we are not giving support  through issues. The comment in https://github.com/microsoft/vscode/issues/113894#issuecomment-755186369 might also be helpful or our StackOverflow community for VSCode: https://stackoverflow.com/questions/tagged/visual-studio-code?tab=Newest,2021-01-06T09:39:08Z
755193407,"Well I would like to move git blame to the end of the status bar. For some reason it keeps flashing as I type meh. Surely when you right click the menu couldn't you make that a draggable list like with tree view.. and just add a seperter for left and right. 

![vscode-fixthis](https://user-images.githubusercontent.com/11339630/103753424-f2499f80-5002-11eb-9086-faadd5607ee2.gif)
",2021-01-06T09:39:45Z
755194161,"This works pretty well for me: https://stackoverflow.com/a/57683652/2010616

```ts
type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
```",2021-01-06T09:41:13Z
755194468,/needsMoreInfo,2021-01-06T09:41:53Z
755194831,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-06T09:42:39Z
755196117,This doesn't seem to work. Closing and publishing a fork of tsec on npm,2021-01-06T09:45:11Z
755199061,"Pushed a fix to the Remote-WSL extension.

As an observation, it would be great if there were a way of running Electron as node that doesn't involve an env variable. The best would be a separate executable, A command line parameter would also simplify things. There's some tricky code in the Remote-WSL start scripts when we call from WSL to Windows-Electron that could be simplified.
",2021-01-06T09:50:58Z
755205249,"@aeschli BTW, I use this approach to delete the `ELECTRON_RUN_AS_NODE` variable in the forked Electron process so that it is not inherited by future child processes: 

https://github.com/microsoft/vscode/blob/fa593d83ad159cb9227d00db62cf334312ffa82a/src/vs/workbench/contrib/debug/node/debugAdapter.ts#L212

Since the delete code is passed as a command line expression, there is no need to have specific delete code in the forked process.",2021-01-06T10:02:01Z
755207278,"@mjbvz
Those features are supported in all major browsers as well as node, and have been for some time now.
I'd argue autocomplete being present for them would be less annoying to people that don't use them than its absence to people that do.",2021-01-06T10:05:36Z
755207437,"Found ability to define configurations in workspace file, which (somewhat) fulfills this request",2021-01-06T10:05:54Z
755208191,"I suspect that this works using the [load paths](https://sass-lang.com/documentation/at-rules/import#load-paths) that scss supports.

We don't have support for that in the VSCode css/scss service. If someone is interested to add support for that, help is welcome!

What we have is support for `~` imports as defined by the css-loader webpack-plugin: https://github.com/webpack-contrib/css-loader#url. Not sure if that helps you.",2021-01-06T10:07:18Z
755208246,Looks like this is happening for SSH and Containers.,2021-01-06T10:07:26Z
755208622,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T10:08:09Z
755210734,"Little more information after some tinkering.

I found out that what is probably is going wrong is checking if the file exists but still returning the right relative path.

In version 1.8.6 I updated the titles of the references JSON to include the word `RIGHT` or `WRONG` to see which of the 2 it would take.
![image](https://user-images.githubusercontent.com/2393905/103756607-ea442c80-500f-11eb-9a6d-cf6dc85cd67c.png)

So it seems vscode is checking the wrong location if the file exists.

If you need any help btw, I have no idea where to start looking, but if you have any Idea I would be happy to dive deeper 😄 
",2021-01-06T10:12:23Z
755212314,"Ok, I see. You are using the HTML language server for a HTML like language. 

The proper solution would be to have your own language and language server. You could use the vscode-html-languageservice library to get the HTML functionality you want.

I'm not a fan of adding a new 'case sensitive' setting. It will be confusing to HTML users.
",2021-01-06T10:15:43Z
755212612,"We closed this issue because we don't plan to address it in the foreseeable future. You can find more detailed information about our decision-making process [here](https://aka.ms/vscode-out-of-scope). If you disagree and feel that this issue is crucial: We are happy to listen and to reconsider.

If you wonder what we are up to, please see our [roadmap](https://aka.ms/vscoderoadmap) and [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Thanks for your understanding and happy coding!",2021-01-06T10:16:16Z
755212754,"@iAmWillShepherd as was mentioned above Electron 11 should have updated Chromium that contain fix.
You can use Insiders https://code.visualstudio.com/insiders/ in the meantime.",2021-01-06T10:16:32Z
755216022,"Marking as important as this blocks my dev setup, I have not found a way of signing the `Code OSS.app`, will switch back to my old machine for now.",2021-01-06T10:23:18Z
755220586,"@rahul3v we can't be experts in every language on a team of our size, which is why we rely on the community for the grammars we use. I am open to the idea of moving away from the grammar we get from https://github.com/textmate/html.tmbundle if there is a better/better supported one.",2021-01-06T10:33:02Z
755221638,The rust analyzer adds a folding provider that is not aware of the region markers. It needs to be fixed in the extension.,2021-01-06T10:35:06Z
755224865,"@myeongbo the **coloring** of `\file` is handled by VS Code, that is correct. It looks like it getting the correct language scope though. If you want to change the color, you can install another theme, or modify your existing theme (use command Developer: Inspect Editor Tokens and Scopes + the [customization docs](https://code.visualstudio.com/docs/getstarted/themes#_editor-syntax-highlighting). It also looks like `/*!` is correctly recognized as a comment start. So everything is working well from a colorizing perspective.

The hover you get over `\file` is probably coming from the C++ extension that you have installed, since VS Code doesn't provide that on its own. You can test this by disabling that extension and seeing if the hover is still there. I'm sorry for the repository ping-pong, but for that you should file in issue in that extension's repo.",2021-01-06T10:41:29Z
755225115,"The described behavior is how it is expected to work. If you disagree, please explain what is expected and what is not in more detail. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T10:41:56Z
755225839,"This would be great to have. I think right now you need to rename the `*.code-workspace` file to change the name/title of the workspace, but as someone who wants to keep e.g. spaces out of filenames, I'd like to have a `""name""` or `""title""` setting in the workspace config.",2021-01-06T10:43:26Z
755225880,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [\[folding\] Fold All in selection (#74360)](https://www.github.com/microsoft/vscode/issues/74360) <!-- score: 0.473 -->
<!-- potential_duplicates_comment -->",2021-01-06T10:43:33Z
755227336,"In IntelliJ, the focus on last-entered Korean word is released when pressing alt key. In Visual Studio, the caret always goes behind the text after typing and focus doesn't catch the last word.",2021-01-06T10:46:30Z
755232318,Really looking forward to this!,2021-01-06T10:57:23Z
755232718,https://code.visualstudio.com/insiders/ releases every day. Just get the release tomorrow and you should be good.,2021-01-06T10:58:13Z
755237210,"@isidorn I am confused why creating doesn't support multiple resources at once while everything else does. Like, undoing a ""multi delete"" is now separate create operations",2021-01-06T11:07:37Z
755240392,"I just tried this and it works just fine for me with javascript and latest vscode insiders.
Please file this issue against the c++ extension. Thanks",2021-01-06T11:14:20Z
755241090,"@jrieken originally I did the create to support multiple resources, however after [discussion](https://github.com/microsoft/vscode/pull/112760#pullrequestreview-555447864) with @bpasero I reverted back to only support a single operation. 

I can move back to multi operation support. Though let's see if @bpasero is fine with that",2021-01-06T11:15:58Z
755242708,I have no feelings either way is fine for me.,2021-01-06T11:19:47Z
755242997,"Hi,
I started coding JAWS scripts for VS Code. I will unhook the scripts
and report back.

Jim

On 1/6/21, Isidor Nikolic <notifications@github.com> wrote:
> @sana-ajani just let me know that the news JAWS version has an improved VS
> Code support. From their release notes: ""Improved the user experience when
> using JAWS with the Visual Studio Code application. This includes turning
> off the Virtual PC Cursor by default, eliminating the announcement of ARIA
> regions, and removing the announcement of a long URL when the program is
> launched.""
>
> Let us know if JAWS behaves better with VS Code now and what are the biggest
> issues remaining.
>
> --
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub:
> https://github.com/microsoft/vscode/issues/95225#issuecomment-755155965


-- 
==========

Jim Homme
Website: https://www.jimhomme.com/
Twitter: @jimhomme
Facebook: http://www.facebook.com/jimhomme
LinkedIn: https://www.linkedin.com/in/jimhomme
Skype: jim.homme
FreeChess: jhomme
",2021-01-06T11:20:33Z
755243393,Okey so I will bring back the support for multi create. I will push directly to master and ping you Ben on the commit.,2021-01-06T11:21:37Z
755244798,Moving to On Deck and @lramos15 can review once he finds time and is back at Microsoft. There is no rush here imho.,2021-01-06T11:25:06Z
755250753,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [feature request: API to set URL of WebView (#70339)](https://www.github.com/microsoft/vscode/issues/70339) <!-- score: 0.494 -->
<!-- potential_duplicates_comment -->",2021-01-06T11:38:55Z
755252816,"When VS Code is launched from a terminal (for example, via code .), it has access to environment settings defined in your .bashrc or .zshrc files. This means features like tasks or debug targets also have access to those settings.

However, when launching from your platform's user interface (for example, the VS Code icon in the macOS dock), you normally are not running in the context of a shell and you don't have access to those environment settings. This means that depending on how you launch VS Code, you may not have the same environment.
See here https://code.visualstudio.com/docs/supporting/faq#_resolving-shell-environment-is-slow-error-warning",2021-01-06T11:43:32Z
755254843,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T11:48:28Z
755254850,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T11:48:29Z
755254858,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T11:48:31Z
755254862,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T11:48:32Z
755254869,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T11:48:33Z
755256465,"I have just pushed a commit that tackles this d51e1fa471
I did not adopt this fully in the `bulkFileEdits` since I thought you are wokring on it @jrieken Let me know if you would like me to look into that",2021-01-06T11:52:33Z
755258993,"Thanks for your prompt response. 
You have not tested exactly. Please try it with c/c++ code.  I am afraid that it may not be caused by c++ extension, but by Code.
Thanx.",2021-01-06T11:58:55Z
755262381,"https://github.com/swinder0161/vscode/commit/fa15b67a0c85a4303f9ec62bdc229b7c2c22cdf6

This can fix it",2021-01-06T12:06:47Z
755268424,How different are these from regular user snippets ?,2021-01-06T12:20:22Z
755268704,"Bump. 
Would you prefer this to be opened against the main VSCode repo so more people can take a look at it or is this a user error?",2021-01-06T12:21:02Z
755269352,duplicate of  #112816,2021-01-06T12:22:37Z
755269613,Can you please explain what is the issue here? What is not working?,2021-01-06T12:23:13Z
755270397,"Sorry, how is that related to VSCode? Please add detailed steps.",2021-01-06T12:24:49Z
755270565,"Feel free to open a Pull Request for us to look at, thanks.",2021-01-06T12:25:12Z
755271304,"@lszomoru @Tyriar FYI

How about coming up with read-only access token and prevent writing from the client and also on the server?",2021-01-06T12:26:55Z
755271332,"well @alexr00 I can understand that, I do have made a PR, lets see, 
otherwise you can have it tasted before merging this PR , as I have directly tested the changes I made on my installed VSCODE Editor (using current version 1.52.1) and it works fine for me. as you can also see it in the images above


The issue occur for both `//` and `/*` when using, which will fix with this PR",2021-01-06T12:26:59Z
755272092,Can you add a small code sample? What is the before and after state? What key is `arrow` in your description?,2021-01-06T12:28:49Z
755272301,[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/microsoft/vscode?pullRequest=113906) <br/>All CLA requirements met.,2021-01-06T12:29:20Z
755274296,I'm not able to reproduce this issue on the latest insiders. If you still see the problem with the latest insiders I can investigate further.,2021-01-06T12:34:04Z
755274488,"We closed this issue because we are unable to reproduce the problem with the steps you describe. Chances are we've already fixed your problem in a recent version of VS Code. If not, please ask us to reopen the issue and provide us with more detail. Our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines might help you with that.

Happy Coding!",2021-01-06T12:34:34Z
755275075,"Settings sync settings are registered only when settings sync is configured which is not the case by default. Hence this warning is shown. I do not think there is a way to configure settings editor `tocData` based on if settings sync is configured or not. Only option is to register these settings always. If it is ok, I will close this without any action?

@roblourens FYI",2021-01-06T12:35:59Z
755275329,/duplicate,2021-01-06T12:36:29Z
755277938,Let me investigate...,2021-01-06T12:42:45Z
755283895,Nothing new here. I fail to understand the problem here. We log those invalid invocation to the console because that's the place extension developers are looking at when developing extension,2021-01-06T12:56:21Z
755284743,Thanks @isidorn. I am almost done with the adoption,2021-01-06T12:58:19Z
755285416,"You are correct. It works fine in:
Version: 1.53.0-insider
Commit: 9b6aaf1e86c8fec4c86c664edf5f713583c70fe5",2021-01-06T12:59:59Z
755285907,@bpasero Can you maybe reproduce that? I don't have Big Sur.,2021-01-06T13:01:01Z
755287085,"@deepak1556 I just had another crash of the Extension Host, this time with a new code. `SIGSEGV` instead of `SIGILL` (first time I'm seeing that):

<img width=""898"" alt=""Screenshot 2021-01-06 at 15 01 11"" src=""https://user-images.githubusercontent.com/697707/103771302-25eeee80-5030-11eb-882e-5f637797306e.png"">

Attaching crash dump:

[09b42d44-5dd7-42ae-b463-3342d4c0e9aa.dmp.zip](https://github.com/microsoft/vscode/files/5775888/09b42d44-5dd7-42ae-b463-3342d4c0e9aa.dmp.zip)

That file was in the `pending` directory. The other directories were empty. Hopefully this is the right one.",2021-01-06T13:02:58Z
755289097,"Not a big deal, just thought I would report stacktraces I see when running tests. At first I thought we are missing assertions to produce test failures, but maybe in this case these errors are expected.

A while ago @alexdima and me pushed for ""clean test output"", meaning that tests should only print success or failure, but not other stuff.",2021-01-06T13:07:38Z
755290790,Thanks!,2021-01-06T13:11:22Z
755291399,"Looks like elliptic is up-to-date now, so this is no longer needed.",2021-01-06T13:12:29Z
755292173,Thanks. ,2021-01-06T13:14:01Z
755295367,"> So, you want that a menu fires its onDidChange event whenever one of its submenu has changed, right?

Thats right. To be more specific even when submenu's action property (like enablement / checked) has changed.",2021-01-06T13:21:03Z
755295447,"@swinder0161 your change included a ton of changes to `yarn.lock`, any reasons for that?

I pushed https://github.com/microsoft/vscode/commit/27ff57608932ba1c458886e35730dac47569d326 for a clean update.",2021-01-06T13:21:15Z
755296647,"The described behavior is how it is expected to work. If you disagree, please explain what is expected and what is not in more detail. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T13:23:55Z
755296668,"The <kbd>fn</kbd> key has so much potential. It's positioning is near perfect to make it a good hotkey combinator. But alas, as @visuallization pointed it out, it doesn't have a scan code.",2021-01-06T13:23:58Z
755296727,"Yes that is expected, you need to open files with the same paths, not different. We take care of path casing, but anything else we do not (such as symbolic links).",2021-01-06T13:24:07Z
755297195,"> So it starts constantly moving after some operation and never stops.

A good start would be to tell us the operation you start.",2021-01-06T13:25:06Z
755297506,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T13:25:51Z
755298658,"I deleted yarn.lock and it was auto generated after running yarn command.

On Wed, Jan 6, 2021, 6:51 PM Benjamin Pasero <notifications@github.com>
wrote:

> @swinder0161 <https://github.com/swinder0161> your change included a ton
> of changes to yarn.lock, any reasons for that?
>
> I pushed 27ff576
> <https://github.com/microsoft/vscode/commit/27ff57608932ba1c458886e35730dac47569d326>
> for a clean update.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/pull/113906#issuecomment-755295447>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AADBBZ5WPSZOVDOV77XQPS3SYRPVZANCNFSM4VXO7JZA>
> .
>
",2021-01-06T13:28:09Z
755300132,"@isidorn checked out the change, it seems that the API now allows for multiple create operations, but within, we are not wiring this in properly (I think that was my initial feedback too that made us go back to supporting just 1 operation).

Specifically, shouldn't we use the array of things to create when passing on to the participants and eventing:

https://github.com/microsoft/vscode/blob/d51e1fa47187ef78739b83dc9b3b5d21b14031c5/src/vs/workbench/services/workingCopy/common/workingCopyFileService.ts#L293-L293

https://github.com/microsoft/vscode/blob/d51e1fa47187ef78739b83dc9b3b5d21b14031c5/src/vs/workbench/services/workingCopy/common/workingCopyFileService.ts#L296-L296

Maybe @jrieken can clarify if this kind of change is still needed or not.

",2021-01-06T13:31:26Z
755300472,"Oh yeah, that explains it.",2021-01-06T13:32:16Z
755304535,"> How different are these from regular user snippets ?

https://docs.emmet.io/customization/snippets/

I personally use this by duplicating huge default emmet snippets and overriding them with customization when needed and some addition.",2021-01-06T13:40:49Z
755308019,Yes - the event should be fired for many resources. There is a skipped/failing test here: https://github.com/microsoft/vscode/blob/0cb7dad36f07a6f88d4602942c0b85ae4c5bfdde/extensions/vscode-api-tests/src/singlefolder-tests/workspace.test.ts#L1008-L1009,2021-01-06T13:47:48Z
755309832,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Want New Terminal Dropdown Menu like the new Windows Terminal for fast selecting (#76640)](https://www.github.com/microsoft/vscode/issues/76640) <!-- score: 0.477 -->
- [Multiple Terminals Types From Terminal View (not keybind extension) (#88836)](https://www.github.com/microsoft/vscode/issues/88836) <!-- score: 0.462 -->
<!-- potential_duplicates_comment -->",2021-01-06T13:51:16Z
755314044,"@jrieken We did an effort some time ago that we keep our output from running `scripts\test.bat` and `scripts\test-integration.bat` clean from output that looks like errors. This is helpful because CI tools like Azure Pipeline and Github Actions grep for `Error` and focus the first text with `Error`, etc. It is also helpful for us as developers when we troubleshoot a weird test failure that we don't see unrelated Error messages.

So if it is possible, I think it would be good to find out where these messages are logged and suppress them during tests/ci. I don't quite remember how we did it before to suppress the console messages.",2021-01-06T13:59:15Z
755316020,"Added the names to:

![image](https://user-images.githubusercontent.com/900690/103776791-43bc5380-5030-11eb-878f-3e8f650d9dd2.png)

![image](https://user-images.githubusercontent.com/900690/103776809-49199e00-5030-11eb-8855-e03c5668e0be.png)
",2021-01-06T14:03:12Z
755316353,This is already done now!,2021-01-06T14:03:53Z
755318111,I agree that the CI output is noisy but I think avoiding console.log isn't the right way. Isn't the problem that the test output reporter also prints onto the the console so that everything is intermixed. Can we use a different output reporter that e.g creates a file so that the CI build uses that file?,2021-01-06T14:07:10Z
755326444,"That makes sense. 
Adding @RMacfarlane to get her thoughts on the possible changes needed to the auth providers to support this. ",2021-01-06T14:22:15Z
755326746,"@mjbvz it's just an error that came up every day for a week or so, so I opened this thread but the error has since stopped appearing. Thanks for following up but it must have been patched out already (I have updated VS Code since then)",2021-01-06T14:22:49Z
755329516,"/needsMoreInfo
/gifPlease",2021-01-06T14:27:31Z
755329704,"Thanks for reporting this issue! Unfortunately, it's hard for us to understand what issue you're seeing. Please help us out by providing a screen recording showing exactly what isn't working as expected. While we can work with most standard formats, `.gif` files are preferred as they are displayed inline on GitHub. You may find https://gifcap.dev helpful as a browser-based gif recording tool.

If the issue depends on keyboard input, you can help us by enabling screencast mode for the recording (`Developer: Toggle Screencast Mode` in the command palette).

Happy coding!",2021-01-06T14:27:53Z
755329919,"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Please take the time to review these and update the issue.

Happy Coding!",2021-01-06T14:28:14Z
755332882,"This PR is replaced by https://github.com/microsoft/vscode/commit/169a0ec047fe3ac76821af968cde91ff04cedd95 which gives us a way to enable `vscode-file` protocol in selfhost via:
* either setting `export ENABLE_VSCODE_BROWSER_CODE_LOADING=bypassHeatCheck`
* or `argv.json` entry: `""enable-browser-code-loading"": ""bypassHeatCheck""`

Other supported values are: `'none' | 'code' | 'bypassHeatCheck' | 'bypassHeatCheckAndEagerCompile'`

I have enabled `bypassHeatCheck` for process explorer and issue reporter who were already using `sandbox` and `vscode-file`. 

Turning this on by default is still blocked by https://github.com/electron/electron/issues/27075",2021-01-06T14:33:22Z
755333175,"I just pushed https://github.com/microsoft/vscode/commit/169a0ec047fe3ac76821af968cde91ff04cedd95 which gives us a way to enable `vscode-file` protocol in selfhost via:
* either setting `export ENABLE_VSCODE_BROWSER_CODE_LOADING=bypassHeatCheck`
* or `argv.json` entry: `""enable-browser-code-loading"": ""bypassHeatCheck""`

Other supported values are: `'none' | 'code' | 'bypassHeatCheck' | 'bypassHeatCheckAndEagerCompile'`

I have enabled `bypassHeatCheck` for process explorer and issue reporter who were already using `sandbox` and `vscode-file`. 

Turning this on by default is still blocked by https://github.com/electron/electron/issues/27075",2021-01-06T14:33:53Z
755333684,All extensions cease to work after the extension host crash.,2021-01-06T14:34:48Z
755339333,"We closed this issue because we don't plan to address it in the foreseeable future. You can find more detailed information about our decision-making process [here](https://aka.ms/vscode-out-of-scope). If you disagree and feel that this issue is crucial: We are happy to listen and to reconsider.

If you wonder what we are up to, please see our [roadmap](https://aka.ms/vscoderoadmap) and [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Thanks for your understanding and happy coding!",2021-01-06T14:44:16Z
755340636,"This bug has been fixed in to the latest release of [VS Code Insiders](https://code.visualstudio.com/insiders/)!

@Borongaj, you can help us out by commenting `/verified` if things are now working as expected.

If things still don't seem right, please ensure you're on version 9b6aaf1e86c8fec4c86c664edf5f713583c70fe5 of Insiders (today's or later - you can use `Help: About` in the command palette to check), and leave a comment letting us know what isn't working as expected.

Happy Coding!",2021-01-06T14:46:35Z
755345856,"For images making a selection is something that you may want to undo, for example selections can be polygons, you can invert selections, you can add to them, etc.

I found myself always leaving dirty editors when opening an image, selecting all and copying is the main thing I saw here.

This gets worse when retain context is false because backup didn't get a chance to run. ",2021-01-06T14:55:26Z
755347007,This happens because of how the code runner extension is implemented. ,2021-01-06T14:57:24Z
755347531,"@eamodio Yes, I still see it on 1.52.1.",2021-01-06T14:58:15Z
755350968,"Assigning to @JacksonKearl as he expected that this can be flaky. 

Chatted with @alexdima about this and I agree with him that a functionality test shall be different from performance test. I would recommend following:

- Have a unit test that tests create file in batches but with smaller number of files
- Have a separate perf unit test to validate the performance and we can skip it to run on builds. We can enable it locally if needed to check perf.",2021-01-06T15:03:39Z
755351074,FYI @sana-ajani as this is very specific to education,2021-01-06T15:03:49Z
755351902,"Please provide a screenshot or [a gif](https://gifcap.dev/) illustrating the problem (attaching images won't work via email, you need to go to github.com). See [this wiki page](https://github.com/microsoft/vscode/wiki/Terminal-Issues) for more general info on how to report actionable terminal issues.

/label ""needs more info"" integrated-terminal",2021-01-06T15:05:04Z
755352689,"I actually hit this yesterday, links are broken on the WSL terminal 🙁",2021-01-06T15:06:19Z
755354081,Totally agree. We shouldn't have unit tests that validate performance because we run them a gazillion times locally and on the build machine and it isn't useful as they just burn CPU. We should have them skipped or something and they can be executed manually whenever a change is made to the indexdb code to validate that the perf was not affected.,2021-01-06T15:08:39Z
755357756,"This test should not fail unless the underlying fs takes long time to do some fs operations. 

@bpasero Is it recommended now to use `flakyTestSuite` for all tests using fs?",2021-01-06T15:14:31Z
755363179,"FWIW the hover actually displays dynamic information depending on the type of link, for example:

![image](https://user-images.githubusercontent.com/2193314/103785222-ce309300-4fef-11eb-8709-30e0027e77eb.png)

I'm open to creating a setting to disabling the hover outright though.

I'd also like to get to the bottom of the problem you're seeing of the hover not going away, can you record a gif using https://gifcap.dev/ of the problem case(s) you see? Also knowing if there are errors in the devtools console would be helpful (Help > Toggle Developer Tools).",2021-01-06T15:23:02Z
755366554,"/duplicate

Seems similar to #113817
",2021-01-06T15:28:32Z
755366678,"Yes, that is what I understood as well from DAP spec. 
@isidorn after that, should I open a new feature request ?

",2021-01-06T15:28:45Z
755368734,Is it supported by an extension? ,2021-01-06T15:32:04Z
755372423,"> Is it supported by an extension?

No, it is an emmet feature controlled by this setting 
```json
""emmet.extensionsPath"": ""${env:APPDATA}\\Code\\User\\Emmet Settings"",
```

Allowing custom folder in _code\user_ to be synched would make VSCode user environment truly…synched.",2021-01-06T15:37:55Z
755372950,"This works for me. Can you reproduce with latest vscode insiders?
https://code.visualstudio.com/insiders/",2021-01-06T15:38:41Z
755373139,Can you please open dev tools and inspect the element with no icon and let us know the path of the icon? Let me know if you need any help in inspecting this?,2021-01-06T15:38:55Z
755373385,/verified,2021-01-06T15:39:17Z
755373586,"@yannickowow yes, feel free to open a new feature request and ping me on it. Thanks",2021-01-06T15:39:35Z
755374127,"I see, this is coming from built in emmet extension. At present we do not support custom user files from extensions. I would use this issue to track that feature.",2021-01-06T15:40:23Z
755374555,"This is a fair feature request, however we do not have it on our immediate plan. Thus assigning to backlog and we might add this in the future. Thanks
There was an older issue for this, but I think we closed it, thus we can keep this one open for now.",2021-01-06T15:40:59Z
755374903,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T15:41:36Z
755375156,"The extra output is new and was not always there -- https://github.com/microsoft/vscode/commit/3ba967fd7eb97621b0e2a4fb0267b70323ffcf5f#diff-f6aaacd4a8ee0f0089c3d1b26fa48b86658cb6318df01b2042941bc1b5b8c722R216 cc @connor4312 

I think this falls into the same bucket as ""break on error"" used to be. Kind of like the broken window theory. If we start logging stuff and stop caring about the output, it will spread like wildfire and it might become very full of garbage quickly.

@bpasero Maybe we could do like an environment variable when running tests like `VSCODE_IN_TEST` and then standardize on that and omit console.log when that is defined. I don't know, what do you think?",2021-01-06T15:42:00Z
755376362,"/duplicate

https://github.com/microsoft/vscode/issues/91286",2021-01-06T15:43:50Z
755376541,"/duplicate

https://github.com/microsoft/vscode/issues/91286",2021-01-06T15:44:08Z
755376991,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T15:44:54Z
755377103,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22settings-sync%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T15:45:04Z
755378554,"Bonus: while testing I found that trying to connect to something that was listening on 0.0.0.0:3000 and running in WSL didn't work. BUT you can connect on localhost. So with the tunnel factory, clicking on 0.0.0.0 links in the terminal from WSL will work.",2021-01-06T15:47:25Z
755379482,"So poking at it a bit more, it seems to mostly happen when I'm moving my cursor over a list of files, and ""90% of the time"" seems to be an exaggeration due to the annoyance factor of this one frequent issue in an otherwise-amazing and critical tool for me (so *thank you* to all the devs and apologies for the hyperbole ;)

Here's a GIF:

![recording](https://user-images.githubusercontent.com/203523/103788371-c3d0c200-500c-11eb-96a0-22d94a383697.gif)

 ",2021-01-06T15:49:01Z
755379484,"/duplicate

https://github.com/microsoft/vscode/issues/104595",2021-01-06T15:49:01Z
755380008,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22settings-sync%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T15:49:50Z
755380078,"@eamodio Here is a pattern that we have used succesfully in the past, for example with the docker extension. You can define your own extension points! So, for example a interested extension would do something like this in its `package.json`:
```
""contributes"": {
  ""gitlens.actionRunner"": [ ""openPullRequest"" ]
}
```

Then, from the gitlens extension (immediately on activation or soon after activation), you can use `vscode.extensions.getAll()` and loop through all package.json for all extensions and check if one of them contains ""gitlens.actionRunner"". You can then activate that extension as part of the gitlens activation, soon after the gitlens activation, or perhaps just-in-time, right when running the ""openPullRequest"" action.

Depending on what makes most sense, you can even ask for the API in reverse, like the willing extension must return some predetermined API that you call into from gitlens.",2021-01-06T15:49:58Z
755380695,Thanks for fixing! ❤️ ,2021-01-06T15:50:52Z
755382302,"Seems to have proxy / network issues and hence you are not able to connect to our update or settings sync service.

@joaomoreno / @lszomoru  Is there a way user can test to check access to these services?",2021-01-06T15:53:36Z
755383048,I'm pretty sure this was a mistake.,2021-01-06T15:54:50Z
755383886,"The quick-and-easy way to do this would appear to be to change https://github.com/microsoft/vscode/blob/7d57a8f6f546b5e30027e7cfa87bd834eb5c7bbb/src/vs/workbench/browser/parts/editor/editorQuickAccess.ts#L261-L269 to add something like:

```
if (entries.length > 1) {
    const mru = entries.shift();
    entries.push(mru);
}
```

before the `return entries;` line.",2021-01-06T15:56:06Z
755384145,It is unfortunate that golden theme has a tag name `golden` and hence this is being shown. Not sure if there is anything we can do here 😞 ,2021-01-06T15:56:28Z
755385195,"You are on older version of VS Code and latest is `1.52` - https://code.visualstudio.com 

Please install latest version and try again.",2021-01-06T15:58:04Z
755386983,"> O BUG é que sempre abre a página inicial (""Settings Sync"") quando abro o vscode, mesmo estando desmarcado o checkbox (""Show this page on startup"").

The bug is that the `Settings Sync` page always shows up when I open vscode, even when the checkbox `Show this page on startup` is unchecked.

👍🏽 ",2021-01-06T16:00:39Z
755387488,"Ah, the way to get it to happen more often, which is quite common for me, is when the list of many files goes to the top of the terminal, and the final destination of the cursor is the main editor window (see gif). Note also that when the hover label is stuck, scrolling up and down causes the little blue outline to stay as well.

![recording (1)](https://user-images.githubusercontent.com/203523/103789885-82d9ad00-500e-11eb-9747-ce8b0df2c2af.gif)
",2021-01-06T16:01:26Z
755388902,"Nothing suspecting from above info.

Please profile your renderer using this link - https://github.com/microsoft/vscode/wiki/Performance-Issues#profiling-the-renderer-process and share us the profile.",2021-01-06T16:03:34Z
755389214,"You can use `flakySuite` and it will just ensure a `timeout` of 20s and `retry` of 3, nothing else. I have not adopted it blindly for all tests that need fs, only in those cases where I saw them failing previously.",2021-01-06T16:04:03Z
755389249,"@bpasero thanks for the feedback, I have created this PR https://github.com/microsoft/vscode/pull/113919 to tackle it",2021-01-06T16:04:05Z
755391421,"If code triggers `console` in anyway I don't now how we could prevent this from bubbling to the console unless we overwrite `console` with our own code and ignore it if set.

I think this is not the right way forward. I like what we did in https://github.com/microsoft/vscode/blob/479971440393f87108ad93acbfaa99fa4240941b/extensions/vscode-api-tests/src/utils.ts#L63-L63 where a test explicitly disables the console based logger for the duration of the run. I fear that some console output might actually be useful for diagnosing issues so I would suggest that @connor4312 reverts the printing of the error if possible.",2021-01-06T16:07:30Z
755392933,"I have not seen this test failing before and I am also not inclined to add it to `flakySuite`. 

@alexdima Is it ok to wait for next failure before adding to the flakySuite?",2021-01-06T16:09:59Z
755393225,"@jrieken This would also be very helpful for troubleshooting remote extensions. See https://github.com/microsoft/vscode-remote-release/issues/1087#issuecomment-754965711 where the remote extension (like SSH remote) is disabled, but that prevents the troubleshooting itself.",2021-01-06T16:10:29Z
755393939,"Unfortunately, the problem remains, but I would say, it’s “unstable”.

I mean, most of the time it does not work, but sometimes (I couldn’t detect if there is a pattern), it works, just like in PWA.

I’ve attached a screen recording, so you could see exactly what happens.

https://user-images.githubusercontent.com/3781424/103790845-7b230400-5020-11eb-9889-9413d7ca1b61.MP4

Thank you",2021-01-06T16:11:28Z
755395163,I thought we had discussed that we use `timeout` and `retry` for any test that failed once due to the dependency to `fs`. Isn't this a sign of a flaky test if it failed once? How does it change if we wait more?,2021-01-06T16:13:14Z
755395438,"The thing is I'm not consciously deciding to open those files that way.
I'm quite new to vscode and I started to notice that my edits of the same file in 2 different splits would sometime not synchronize, which IMHO is a bug.
I then started to test when this happens, because it was not clear to me why it would work sometime and would break in other cases, and I found this was the relative vs absolute path thing.
When I code, I tend to open a file, make a change, then eventually explore the code using ctrl-click, ctrk-K F12... to quickly browse the code and see where I need to make the next change.
I can end up with having the same file opened at 2 different places in 2 different splits and make different edits at the same time.
Nothing tells me the splits are not synchronizing at that point if the file is long enough.
It's only when I try to save files that the 2nd split would report that the file was changed on disk and that I need to manually merge it, which is IMHO a waste of time, and can be error prone.

Bottom line, I think there is an inconsistency between
- ctrl-click which opens the file using an absolute path (not my decision) while
- ctrl-P seems to prefer relative path (except when the file has been opened recently, in that case, I see the file twice : one in relative, one in absolute path).

What about having an option to have ctrl-P always show absolute path ?
That way, all my paths would be absolute, no problem.

I'd actually prefer it the other way around : all my files in relative paths, but the guys from clangs-vscode seem to suggest otherwise :
> clangd as a language server communicates all the files through file URIs, which can always be considered as absolute rather than relative, and that's the only way it can communicate with the clients as dictated by language server protocol.

Another possibility would be for vscode to figure out that both files are one and the same. That would be the most transparent I think for the user (no need to change the display, just internally refer to it using say the absolute path).
What would be the rationale/use case of not doing that ?",2021-01-06T16:13:37Z
755397530,"@mjbvz I took a look at this and found that the issue is that the resource vscode-webview-resource uri is invalid, is missing `/file///` before `/home/jeanpierre/...`

I was looking how to fix it but I can't find the place where the `img.src` gets mapped to a `vscode-webview-resource`

```
<img src=""/home/jeanpierre/Desktop/issues_vscode_1_40_0_markdownPreviewRootRelativeImg/assets/2019-11-13_16_36_37.png"" alt="""" class="""" id=""image-hash-904852482"">
```
```
vscode-webview-resource://74f85878-6ad4-475b-bf60-b0c1370666e2/home/jeanpierre/Desktop/issues_vscode_1_40_0_markdownPreviewRootRelativeImg/assets/2019-11-13_16_36_37.png
vscode-webview-resource://74f85878-6ad4-475b-bf60-b0c1370666e2/file///home....
```

can you give me some code pointers?",2021-01-06T16:16:51Z
755402031,"It seems to me you are possibly using an extension that allows you to navigate from one file to the other (from within the editor). If you can distill some steps to reproduce then it would be good to report against the extension. There is a chance that they produce file paths that we do not detect as normal workspace paths.

Are you able to reproduce this when you run `code --disable-extensions` as well and if so can post the steps?",2021-01-06T16:20:59Z
755405577,"Yes, I explicitly listed the extension I use in the bug report :
- CMakeTools 1.5.3 to generate the project
- clangd 0.1.8 to follow symbols

As explained in the bug report, I use c++ which needs an extension for ctrl-click to work.
As explained in the bug report, I initially opened a bug report with the extension here : https://github.com/clangd/vscode-clangd/issues/121 but they said, and I quote :

> clangd as a language server communicates all the files through file URIs, which can always be considered as absolute rather than relative, and that's the only way it can communicate with the clients as dictated by language server protocol.

The steps to reproduce are in the bug report as well

Please advise",2021-01-06T16:25:14Z
755407439,"@pfitzseb This looks like an error in VS Code.
I've moved the issue over to the VS Code repo.

@isidorn the DA's `exceptionInfoRequest` is called properly by VS Code but the peek info is not showing up.",2021-01-06T16:28:16Z
755408614,I cannot reproduce. Is this related to having VSCode run on a second monitor? Does it reproduce if you don't have a monitor attached?,2021-01-06T16:30:05Z
755408765,"![image](https://user-images.githubusercontent.com/20490672/103794127-a61f4f00-5044-11eb-80af-e9a31cbb1d02.png)
```sql
INSERT INTO test (test1,test2,test3) VALUES
('test','test\'s', 'test')
```

",2021-01-06T16:30:22Z
755413473,@alexdima not disabling remote extensions is already fixed via https://github.com/microsoft/vscode/issues/112473,2021-01-06T16:37:35Z
755414711,"![recording](https://user-images.githubusercontent.com/900690/103795309-1bd7ea80-5046-11eb-82d1-f2d5f6cc2961.gif)

Does not reproduce for me.",2021-01-06T16:39:30Z
755415721,> I did not merge this in to master because this breaks the following integration test,2021-01-06T16:41:16Z
755416499,"> I did not merge this in to master because this breaks the following integration test

That's an older test and it shouldn't need adoption. When it fails it means that either onWill or onDid event didn't fire properly. ",2021-01-06T16:42:19Z
755417769,"Yes, I queried Isi about that and he mentioned he didn't know a reason why we didn't log a console on command error. I wanted to add some logging there since commands are the first thing we show to extension developers in a 'hello world' extension. Without a console log any errors thrown from inside of them lack stacktraces, which can make debugging difficult especially for people less experienced in Javascript.

In our code there is a varied mix between the log service and console logging. Imo some interaction with a/the log service to deal with this would be better, but I didn't want to make a change there as that affects around ~200 call sites for `.error()` alone.

We [already overwrite](https://github.com/microsoft/vscode/blob/6763d82fdd101cc2f88919f140c447be4e6f0197/src/bootstrap-fork.js#L171-L175) the console in bootstrap-fork, so tweaking that behavior is not unprecedented.  But of course there's the risk of omitting intended console errors.

I can revert as a quick fix but I believe we should try to arrive on a better solution for socializing errors here.",2021-01-06T16:44:20Z
755418494,"@bersbersbers to clarify, we will probably not be able to prevent editors from jumping, after all you enabled wrapping tabs in settings and different editors can have different number of actions. 

A couple of thoughts to avoid this:
* you can configure `workbench.editor.untitled.labelFormat: name` to avoid long tabs for untitled files
* you can configure `workbench.editor.tabSizing: shrink` to get tabs shrinking up to a min width

Both things will help you.

The only issue I see here is the fact that the selection occurs, but otherwise I am not sure how to improve this.",2021-01-06T16:45:35Z
755418727,@isidorn I've added support for the `exceptionInfo` request to Mock Debug.,2021-01-06T16:45:56Z
755418765,@alexdima @bpasero please help to review the pull request: https://github.com/microsoft/vscode/pull/113923,2021-01-06T16:46:00Z
755419949,"First of all, I don't think we should use `console` for logging but `ILogService`. That gives us a chance to control how the output appears on the other side and is a requirement for the `withLogDisabled` to function properly.

And then, if we think this error is useful in the logs, an integration test can disable logging easily.",2021-01-06T16:47:59Z
755421969,"I don't really understand what ""relative"" paths the extension could return. When you have the case of 2 editors being ""not in sync"", what is the result of ""Copy Path"" from the context menu of the tab in both sides? Is there any difference?",2021-01-06T16:51:04Z
755424532,"For errors to best be displayed to any attached debugger, `console` needs to be called at some point -- it does magic that captures and make the objects available to the debugger, which allows us to inspect them after the fact: e.g. expand nested objects, evaluate methods, use it in the REPL. ([new Console](https://nodejs.org/api/console.html#console_class_console) doesn't work, it needs to be the global console)",2021-01-06T16:55:14Z
755431180,"@swinder0161 have you written any code for this issue? I can't find a PR for it and you haven't linked to any? 
> 
> 
> @bpasero here is the issue I discussed in PR #70413

In your comment you say 'PR', did you mean 'issue'? This page that we are having this conversation on is an 'issue' not a 'PR'.",2021-01-06T17:05:44Z
755431608,"Sure, our log service typically comes with a console appender to do that:

https://github.com/microsoft/vscode/blob/8fcf778ba251131780f2a110d311161f39b97b03/src/vs/workbench/services/log/electron-browser/logService.ts#L41-L41

And here I actually realize how messages end up on the console from the CLI run:

https://github.com/microsoft/vscode/blob/8fcf778ba251131780f2a110d311161f39b97b03/src/vs/workbench/services/log/electron-browser/logService.ts#L29-L35

We have an explicit way to forward messages to the main process because otherwise no console log statement would be visible when running API tests. I think we should not change that since it is probably expected behaviour by now for all extensions.",2021-01-06T17:06:30Z
755432080,"> First of all, I don't think we should use console for logging but ILogService.

Generally agree but not when it comes to extensions. When they use an API wrong they will not check the logs but the console which they are already looking at.",2021-01-06T17:07:22Z
755432921,I think I made it clear that our logger always prints to `console`. At least in the workbench core it does.,2021-01-06T17:08:54Z
755435716,"> People that haven't used Vim (or soe other text editor with vim-like splits) just have no idea what great improvement in UX and workflow they are missing.

1000% this.

I am still struggling to understand how anyone who writes code everyday in VSCode isn't also begging for this feature. Seriously, try the splits in VIM for _a single day_ and you will quickly understand how game-changing and vastly more efficient that workflow is over having splits outside of tabs.

I literally check this issue (and the duplicates that constantly spring up) annually to see if any progress has been made, as this is the only blocker to me transitioning over to VSCode to take advantage of all the other features that VIM doesn't have.
",2021-01-06T17:14:01Z
755437286,"Ah ! That's interesting !
They're both absolute, and different because it seems of an intermediate symlink.
I'm editing through NFS and have my edit machine on network XXX and my build machine on network YYY.
There are 2 NFS mount points, so my home in NFS from XXX has a symlink to the home from NFS@YYY.
And somehow, everytime when I open a file using ctrl-P it opens a file from XXX while ctrl-click opens a file from YYY, thus they do not have the same absolute path...
I could not see it because ctrl-P shows relative path from XXX.
Nothing vscode can do here I guess and thank you very much for your help.",2021-01-06T17:16:44Z
755448403,Duplicate of https://github.com/microsoft/vscode/issues/107016,2021-01-06T17:36:17Z
755448862,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22bug%22%20label%3A%22perf%22%20label%3A%22windows%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T17:37:07Z
755449465,"> If you don't want to disable the trash, you can set the backend from kio to gio, I wrote a post about it where I describe how to fix this https://jamezrin.name/fix-visual-studio-code-freezing-when-deleting.
> 
> But basically, you can use the `ELECTRON_TRASH` variable to control the backend and set it to gio, you can do this when launching vscode or make this environment variable global in your user.

I'm using KDE on Manjaro, I added this env var on my .zshrc, and it works perfectly. Thanks!",2021-01-06T17:38:13Z
755449508,//cc @SneakyFish5 @bpasero ,2021-01-06T17:38:19Z
755452260,"I think it makes sense for the access token to determine what types of actions can be performed, but I'm not sure how to do that with the GitHub tokens.

For Microsoft, we could change the tokens we are requesting to be specifically for the settings sync server, and there should be a way to request ""Read"" vs ""Write"" scopes for that Azure resource. Then on the settings server we could look at the token and check what claims it has.

But for GitHub, the only scopes we can request are [github scopes](https://docs.github.com/en/free-pro-team@latest/developers/apps/scopes-for-oauth-apps), so there isn't really anything we could ask permission for that would make sense to distinguish read/write for settings sync. Seems unwise to mess with the token and try to include extra information.

Would it be possible to grant read access to other users/unauthenticated users by default?",2021-01-06T17:43:20Z
755454587,"Same thing for when using preview for something like markdown. It's a pretty big productivity killer when the webview steals keyboard focus/events, and all of your keyboard shortcuts are disabled (until you use the mouse to click somewhere else).",2021-01-06T17:47:36Z
755458065,Closing this as there is no bug here to fix.,2021-01-06T17:54:30Z
755458755,Closing this as there is no bug here to fix.,2021-01-06T17:55:51Z
755460977,"I confirm that reopening the project directly on the right NFS fixes the issue for me.
",2021-01-06T18:00:04Z
755461635,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T18:01:16Z
755462814,"I'm not sure tokens and maybe even settings sync are the right way to approach this problem. Giving out a token to your account, regardless of whether it's read or write is bad.",2021-01-06T18:03:23Z
755465524,Looks good -- thanks so much for the contribution!,2021-01-06T18:08:19Z
755466660,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [The Solarized Dark theme can not show well (#110703)](https://www.github.com/microsoft/vscode/issues/110703) <!-- score: 0.55 -->
<!-- potential_duplicates_comment -->",2021-01-06T18:10:29Z
755471026,"Never open **MicrosoftVirtualKeyboard** in your current Window sessions. 😂
here proof in video with vscode huge file.
https://youtu.be/14AKtLqlbtE
Thas mean check all background software in your machine, they can break vscode.
like:
*Mouses macro softwares, (Logitech options on my side is fine)
*Keyboards macro softwares. (Redragon K580RGB Keyboard for me is fines)

> the irony is the offending keyboard software is developed by Microsoft. the other one not break Vscode ! 
so this mean even on a fresh install OS, Windows could have native processes or app that will break Microsoft Vscode! 

---
**---  EDIT**
i just want add a hint, i also dev with `nwjs` based on chromium like electron, and since i get sometime weird ghost laggy memory leak app.
When this happened vscode was very laggy (lethargy state).
https://youtu.be/NNVjv-cPzvk
It could be that this is also related to chromium and the problem is related to the use of external accessibility softwares or process.
Its can cause serious damages to an SSD and Ram
![image](https://user-images.githubusercontent.com/24865815/103815237-0c9a7200-5031-11eb-84bf-657fb98af419.png)
I guess when vscode goes into this lethargy state to link an outside program accessibility from chromium, it doesn't handle or break the debugging system or command well and keeps sometime children app alive ! and those need to be kill manually!",2021-01-06T18:19:11Z
755471523,"Ah, thanks -- I misread this and thought it was the opposite issue I was seeing over break. I see the behavior you are describing now. The scm view isn't always honoring your expand/collapsed state.",2021-01-06T18:20:07Z
755472297,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22git%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T18:21:28Z
755472436,Duplicate of #112481,2021-01-06T18:21:43Z
755478136,Is there possibly a git repo configured in the parent/ancestor folder of any of the folders you are opening? Because that is about the only way that I can think of that would have the SCM view show items outside the folder you opened in VS Code.,2021-01-06T18:25:42Z
755480218,@RMacfarlane Do you have any idea on what error 801 means?,2021-01-06T18:27:31Z
755489323,"Sorry. Where are issues related to the extension API tracked (not ephemerally, like on Slack)?",2021-01-06T18:34:49Z
755491324,"I've created an experimental extension that translates from the TestAdapter API to the TestProvider API, in other words: when this extension is installed, all TestAdapters will also show up as TestProviders. You can try it out [here](https://github.com/hbenl/test-adapter-converter).

I have a few comments regarding the TestProvider API:
- currently the API lacks a way for the user to restart the test discovery (""reloading"" the tests). Ideally this should not be necessary as the TestProvider should do this automatically when any relevant file or setting changes, but in practice I think it's necessary to allow the user to trigger this manually because not all TestProviders will implement this.
- the TestAdapter API supports tooltips in 2 places: when hovering over an item in the Test Explorer (`TestInfo.tooltip`) and when hovering over an error decoration (`TestDecoration.hover`). In both cases a one-line message can be set (`TestInfo.description` and `TestDecoration.message`) with more details provided in the tooltip. The TestProvider API currently has only `TestItem.description` and `TestMessage.message` and it's not clear how they will be used in the UI.
- it should be possible for `TestProvider.createWorkspaceTestHierarchy()` to return `undefined`, or to have an empty TestHierarchy (currently it always contains at least one TestItem).

If / When the Test Explorer implemented in core supports all the features that my Test Explorer UI extension supports, my extension could be replaced by this converter extension.
",2021-01-06T18:36:35Z
755494631,Duplicate of #91100 (which I re-opened),2021-01-06T18:38:52Z
755497160,"@mjbvz greater control over defining the edit stack would be very welcome. It was a challenge synchronizing the history with what VS Code thinks it is (which is largely a guess), having this would also mean I can persist unlimited hot exit-enabled history to disk which is a feature I'd love to support in https://marketplace.visualstudio.com/items?itemName=Tyriar.luna-paint",2021-01-06T18:40:41Z
755501575,"I am running into a similar issue and followed what @alexdima suggested with the extension bisect tool, here is the result that I got 
![image](https://user-images.githubusercontent.com/311217/103807972-1b226280-500c-11eb-9c8e-ab4e7bec2b39.png)
",2021-01-06T18:44:22Z
755502940,"Can reproduce this with the following system configuration:

- Operating System: Fedora 32
- KDE Plasma Version: 5.18.5
- KDE Frameworks Version: 5.75.0
- Qt Version: 5.14.2
- Kernel Version: 5.9.16-100.fc32.x86_64
- OS Type: 64-bit

Code:

- Version: 1.49.2
- Commit: e5e9e69aed6e1984f7499b7af85b3d05f9a6883a
- Date: 2020-09-25T00:37:34.990Z
- Electron: 9.2.1
- Chrome: 83.0.4103.122
- Node.js: 12.14.1
- V8: 8.3.110.13-electron.0
- OS: Linux x64 5.9.16-100.fc32.x86_64

Shift+Delete fixes the problem, but I'd rather not enable that as the default as I've had VSCode delete an entire project in the past.",2021-01-06T18:45:18Z
755503172,Disabled the test for now. ,2021-01-06T18:45:35Z
755507376,"@vannaka is it related to PR #70413
I have not yet written any code. Maybe next week I might have some time to do it.",2021-01-06T18:48:50Z
755508857,\closedWith dc5a3da,2021-01-06T18:49:56Z
755516571,"Verifier: In an HTML document, expand the abbreviation given in https://github.com/microsoft/vscode/issues/69168#issue-413110763 and confirm that the ""Expected"" result shows up rather than the ""Actual"" result.",2021-01-06T18:55:44Z
755519306,"So some changes show up, but then stop? Does the same thing happen with the Insiders version?

If, so you can post the logs from the Git channel in the Output pane -- to see if there are any errors when it stops working.",2021-01-06T18:58:07Z
755523208,\closedWith dc5a3da,2021-01-06T19:00:42Z
755529673,"Verifier:

1. Type the following link into an HTML document:

`https://github.com/microsoft/vscode/issues?page=1&q=is%3Aissue+assignee%3A%40me+sort%3Areactions-%2B1-desc+is%3Aopen`

2. Place the cursor at the end of the link
3. Invoke the `Emmet: Wrap with Abbreviation` command, and type `a` into the input box that shows up, and press `Enter`. 
4. The link should be wrapped like the following with no lag:
```html
<a href=""https://github.com/microsoft/vscode/issues?page=1&q=is%3Aissue+assignee%3A%40me+sort%3Areactions-%2B1-desc+is%3Aopen"">https://github.com/microsoft/vscode/issues?page=1&q=is%3Aissue+assignee%3A%40me+sort%3Areactions-%2B1-desc+is%3Aopen</a>
```

What we don't want to see is an empty href attribute, i.e. `href=""""`

",2021-01-06T19:05:27Z
755531350,"![image](https://user-images.githubusercontent.com/28626283/103809944-a591b300-505a-11eb-9bcc-8a9b02222b55.png)
",2021-01-06T19:06:32Z
755548447,"![vscode_refresh](https://user-images.githubusercontent.com/22989529/103810951-f54b8c80-5010-11eb-828f-a30cbb40c46d.gif)
",2021-01-06T19:19:27Z
755554800,"@bpasero I have addressed your feedback
@jrieken I have tackled the test. The issue was that with my changes I was firing change events even if no `operations` have been passed in. I have changed that, and the tests pass now.

Thus merging in.",2021-01-06T19:23:54Z
755562191,@jrieken The conversation on the #23927 issue is locked and limited to collaborators. Would you please unlock it?,2021-01-06T19:29:15Z
755571085,"This turned out to be a crash in devtools, I am looking to create a minimal example with chrome. Overflow is caused only on certain markup styles.

```
Crash reason:  EXCEPTION_STACK_OVERFLOW
Crash address: 0x7ff757fa03c8
Process uptime: 10 seconds

Thread 0 (crashed)
 0  electron.exe!_chkstk [chkstk.asm : 109 + 0x0]
    rax = 0x0000000000002490   rdx = 0x00000065f7c168d8
    rcx = 0x00000065f7c16968   rbx = 0x00000065f7c16968
    rsi = 0x00000065f7c168d8   rdi = 0x00000065f7c15df8
    rbp = 0x0000000084782049   rsp = 0x00000065f7c15d88
     r8 = 0x00000065f7c168f0    r9 = 0x00000065f7c15df8
    r10 = 0x00000065f7c13000   r11 = 0x00000065f7c13000
    r12 = 0x000055cf3a910980   r13 = 0x00000065f7c16d84
    r14 = 0x00000065f7c168f0   r15 = 0x00000065f7c16960
    rip = 0x00007ff757fa03c8
    Found by: given as instruction pointer in context
 1  electron.exe!blink::NGBlockLayoutAlgorithm::LayoutWithItemsBuilder(blink::NGInlineNode const &,blink::NGInlineChildLayoutContext *) [ng_block_layout_algorithm.cc : 426 + 0x11]
    rbx = 0x00000065f7c16968   rbp = 0x0000000084782049
    rsp = 0x00000065f7c15da0   r12 = 0x000055cf3a910980
    r13 = 0x00000065f7c16d84   r14 = 0x00000065f7c168f0
    r15 = 0x00000065f7c16960   rip = 0x00007ff756fa6741
    Found by: call frame info
 2  0x60000000700
    rbx = 0x00000065f7c16968   rbp = 0x0000000084782049
    rsp = 0x00000065f7c18260   r12 = 0x000055cf3a910980
    r13 = 0x00000065f7c16d84   r14 = 0x00000065f7c168f0
    r15 = 0x00000065f7c16960   rip = 0x0000060000000700
    Found by: call frame info
 3  electron.exe!blink::LayoutBox::UpdateAfterLayout() [layout_box.cc : 1029 + 0xc]
    rsp = 0x00000065f7c18280   rip = 0x00007ff75608358e
    Found by: stack scanning
 4  electron.exe!blink::NGBlockNode::CopyFragmentDataToLayoutBox(blink::NGConstraintSpace const &,blink::NGLayoutResult const &,blink::NGBlockBreakToken const *) [ng_block_node.cc : 1163 + 0x10]
    rsp = 0x00000065f7c182c0   rip = 0x00007ff75690f32a
    Found by: call frame info
```",2021-01-06T19:35:34Z
755571346,Based on the stack a temporary workaround is to start the app with `--disable-features=LayoutNG`,2021-01-06T19:35:42Z
755587845,:+1: Thank you for the workaround!,2021-01-06T19:47:33Z
755596093,"@shreyaskarnik Looking at your extension list: `bracket-pair-colorizer` is deprecated and there exists `bracket-pair-colorizer2`, `auto-close-tag` is known to cause crashes.

Do you get reliable crashes or do you get the crashes only sometimes? Which extensions are running when the crash occurs? You can open developer tools and look at the message when the crash occurs. It will show the identifiers of the extensions that were running when the extension host crashed.",2021-01-06T19:53:40Z
755605194,">  I wanted to add some logging there since commands are the first thing we show to extension developers in a 'hello world' extension. Without a console log any errors thrown from inside of them lack stacktraces, which can make debugging difficult especially for people less experienced in Javascript.

@connor4312 What would be the steps to get the case you improved? ",2021-01-06T20:00:22Z
755606813,"Oh thank you, brilliant!",2021-01-06T20:01:29Z
755607473,\closedWith dc5a3da,2021-01-06T20:02:12Z
755608275,\closedWith dc5a3da,2021-01-06T20:02:52Z
755610970,Happened again on Windows: https://dev.azure.com/monacotools/Monaco/_build/results?buildId=99439&view=logs&j=672276a2-8d3a-5fab-615d-090c51352f92&t=821d316a-2fa3-581f-c34c-57a961b8e328&l=1625,2021-01-06T20:04:37Z
755612042,And again on Windows: https://dev.azure.com/vscode/VSCode/_build/results?buildId=61397&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=e5339641-12bd-5520-314f-0b8fa6bdcd9f&l=1466,2021-01-06T20:05:18Z
755612420,"I migrated to the latest Emmet in dc5a3da, but I'll keep this issue open because that dependency is not from the actual emmetio/emmet branch, but from a branch of my own that contains an unmerged PR.",2021-01-06T20:05:32Z
755613334,\closedWith dc5a3da,2021-01-06T20:06:07Z
755614241,\closedWith dc5a3da,2021-01-06T20:06:43Z
755616050,\closedwith dc5a3da,2021-01-06T20:07:52Z
755620329,"@alexdima Thanks for the info, I am removing the extensions you mentioned. The crash happens every few mins rendering vscode almost un-usable. ",2021-01-06T20:10:45Z
755620942,"@yerzinperez on the latest Insiders edition of VS Code you can now use `cra` and `cr` to get the rgba and rgb expansions, respectively. Unfortunately, `c:ra` and `c:r` are not supported anymore on the latest Emmet.",2021-01-06T20:11:08Z
755621178,"Verifier: in a CSS file under a selector (e.g. within a `.classname { }` block), ensure that `cr` expands to `color: rgb(0, 0, 0)` and that `cra` expands to `color: rgba(0, 0, 0, .5);`",2021-01-06T20:11:17Z
755621193,I will continue to monitor vscode after these extensions are removed and report back. ,2021-01-06T20:11:18Z
755622935,Verifier: Ensure that running `Emmet: Expand Abbreviation` on `lorem*2` in an HTML file expands to give two lines of lorem ipsum instead of just one.,2021-01-06T20:12:36Z
755625710,\closedWith dc5a3da,2021-01-06T20:14:39Z
755626672,\closedWith dc5a3da,2021-01-06T20:15:31Z
755635208,"Attaching a dump from a crash with code `SIGILL` this time.

[ecc52cbe-9a56-4e06-828f-93fad3721831.dmp.zip](https://github.com/microsoft/vscode/files/5778028/ecc52cbe-9a56-4e06-828f-93fad3721831.dmp.zip)
",2021-01-06T20:21:38Z
755636013,"Verifier: Verify that in an HTML document, that `link:m` is not suggested as an Emmet abbreviation when one types `link:m` into the document. Instead, `link:manifest` and `link:mf` should show up as suggestions instead.",2021-01-06T20:22:30Z
755639858,\closedWith dc5a3da,2021-01-06T20:25:18Z
755642973,"Some of the abbreviations have been fixed, though I just did a test and realized `bg:n` still expands to `background: no-clip;` so I will have to configure the upstream snippets file some more.",2021-01-06T20:27:36Z
755649431,"```
- name: Debug a var
  debug:
    msg: var_to_debug


- name: Debug after adding Jinja2 Formatting with Ansible best practice
  debug:
    msg: ""{{ var_to_debug }}""
```",2021-01-06T20:32:16Z
755649900,"Actually, reopening since I realized the extension isn't allowing the abbreviations outside of surrounding braces.

@pixieaka the latest Emmet doesn't allow + in the expansions now, so you'd have to create custom snippets (with names that don't have +) to get that old behaviour back.",2021-01-06T20:32:34Z
755652736,@Darkzarich I can confirm this is still an issue. A workaround is to explicitly open up the command palette and run the `Emmet: Expand Abbreviation` command.,2021-01-06T20:34:50Z
755652972,Should be fixed in the current insiders,2021-01-06T20:34:59Z
755657745,"I have confirmed that vscode-emmet-helper can now expand the abbreviation properly, but I think there's still an issue with some code in this repo, so I can't call this fixed yet.",2021-01-06T20:38:19Z
755667680,\closedWith dc5a3da,2021-01-06T20:45:35Z
755669549,\closedWith dc5a3da,2021-01-06T20:46:47Z
755670475,\closedWith dc5a3da,2021-01-06T20:47:21Z
755671196,\closedWith dc5a3da,2021-01-06T20:47:48Z
755673785,"[317404fe-25f1-40dd-bbc9-2578f632aeda.dmp.zip](https://github.com/microsoft/vscode/files/5778136/317404fe-25f1-40dd-bbc9-2578f632aeda.dmp.zip)
",2021-01-06T20:49:39Z
755673890,This should be fixed on the latest Insiders now. See https://github.com/microsoft/vscode/issues/54711,2021-01-06T20:49:43Z
755674647,"Thanks for creating this issue! We figured it's covering the same as another one we already have. Thus, we closed this one as a duplicate. You can search for existing issues [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22bug%22%20label%3A%22emmet%22%20label%3A%22emmet-revamp%22). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T20:50:15Z
755675450,\closedWith dc5a3da,2021-01-06T20:50:47Z
755676199,@shuaihuGao  The link you gave led me to gitee and I had to register an account to download your htmlembedded thing. How can I delete my account from gitee?,2021-01-06T20:51:15Z
755677760,"It doesn't suggest `Nan` now in the latest Insiders, but it's still making a suggestion when it's not supposed to. Leaving this issue open.",2021-01-06T20:52:42Z
755685390,"@t7yang does that issue still occur for you on the latest Insiders? I'm unable to reproduce it. If it does, can you paste an example abbreviation for me to use?",2021-01-06T20:58:15Z
755735502,"@agragregra @Friksel I updated the Emmet dependency, and now css.color.short is enabled by default in the latest Insiders.

I still have to add the setting to VS Code if one wants to disable it for whatever reason, so I'll leave this issue open.",2021-01-06T21:51:26Z
755740373,"This is blocked in browsers: `NotAllowedError: Permission denied` (and also for all iframe based webviews on desktop)

But does to skip the prompt in normal electron webviews (although on Mac it also doesn't not actually seem to record anything for me, possibly because VS Code does not actually have microphone permissions) 
",2021-01-06T22:02:34Z
755741536,"hm. ok i have seen this. tried it and it did not work. may be i did it
wrong. I just thought it was wishful thinking on the part of the internet.
I will try it again.

On Wed, Jan 6, 2021 at 10:05 PM Alex Ross <notifications@github.com> wrote:

> Closed #113874 <https://github.com/microsoft/vscode/issues/113874>.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/113874#event-4174229336>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AANAZWU7VPRBCYGKABBWMUTSYQRXDANCNFSM4VW7ETIA>
> .
>


-- 
Justin Romaine
Senior Systems Architect
Spark Dental Technology
justin.romaine@gmail.com
ph 021 764 506
hm 09 445 9166
",2021-01-06T22:04:53Z
755750753,Duplicate of #86472,2021-01-06T22:16:41Z
755750923,"So the ""args:""? is that ""label"" of the task?
This works for me if i use the global test task and bind that to
ctrl+shift+t
but does not work how you describe
Nothing happens
[image: image.png]
[image: image.png]

On Thu, Jan 7, 2021 at 11:04 AM Justin Romaine <justin.romaine@gmail.com>
wrote:

> hm. ok i have seen this. tried it and it did not work. may be i did it
> wrong. I just thought it was wishful thinking on the part of the internet.
> I will try it again.
>
> On Wed, Jan 6, 2021 at 10:05 PM Alex Ross <notifications@github.com>
> wrote:
>
>> Closed #113874 <https://github.com/microsoft/vscode/issues/113874>.
>>
>> —
>> You are receiving this because you authored the thread.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/microsoft/vscode/issues/113874#event-4174229336>, or
>> unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/AANAZWU7VPRBCYGKABBWMUTSYQRXDANCNFSM4VW7ETIA>
>> .
>>
>
>
> --
> Justin Romaine
> Senior Systems Architect
> Spark Dental Technology
> justin.romaine@gmail.com
> ph 021 764 506
> hm 09 445 9166
>


-- 
Justin Romaine
Senior Systems Architect
Spark Dental Technology
justin.romaine@gmail.com
ph 021 764 506
hm 09 445 9166
",2021-01-06T22:16:58Z
755751446,@alexdima interesting -- thanks! I still think this request is more natural and doesn't require special configuration by an extension to make it worth (and avoid extra loops through `vscode.extensions.getAll()` on start up and anytime extensions change).,2021-01-06T22:18:10Z
755752043,Duplicate of #10546,2021-01-06T22:19:12Z
755753081,"We closed this issue because we don't plan to address it in the foreseeable future. You can find more detailed information about our decision-making process [here](https://aka.ms/vscode-out-of-scope). If you disagree and feel that this issue is crucial: We are happy to listen and to reconsider.

If you wonder what we are up to, please see our [roadmap](https://aka.ms/vscoderoadmap) and [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Thanks for your understanding and happy coding!",2021-01-06T22:21:36Z
755753123,I would recommend opening an issue against Git for Windows,2021-01-06T22:21:42Z
755754135,It sounds like there might be something up with your setup -- can you post the logs from the Git channel in the Output pane when this happens?,2021-01-06T22:23:50Z
755755134,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T22:26:09Z
755755184,I would suggest filing an issue against the SVN extension.,2021-01-06T22:26:16Z
755755933,Duplicate of https://github.com/microsoft/vscode/issues/113873,2021-01-06T22:28:00Z
755767242,"First, it doesn't look like the url that is being requested is a valid repository url (especially the info/refs part). But if this works fine in the stable version/command line that is very odd.

I've pushed a change to how we are setting the userAgent, and maybe that will have an effect -- so can you try it out in tomorrow's insiders?

Also in the meantime, if you run that exact command from the command line do you see the same failure?
> `git -c http.userAgent=""git/2.29.2.windows.1 (Windows 10 Pro 10.0.19042; win32 x64) vscode/1.53.0-insider (Visual Studio Code - Insiders)"" push origin main:main`",2021-01-06T22:58:06Z
755767780,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Perform http calls and websocket from the client to a process after the extension host (#105982)](https://www.github.com/microsoft/vscode/issues/105982) <!-- score: 0.49 -->
- [Kernel Picker displayed when running cells before preferred kernel is auto selected (#108950)](https://www.github.com/microsoft/vscode/issues/108950) <!-- score: 0.45 -->
<!-- potential_duplicates_comment -->",2021-01-06T22:59:46Z
755768742,"As a sub-note on this, it would be nice for a notebook kernel to also provide a list of languages that it supports.  As it currently stands, a user can open a `.ipynb` file, set the kernel to '.NET Interactive (C#)', and then individually set a cell's language to Ruby or C++, and that doesn't make a lot of sense, but if the kernel (once found as per my suggested method above) reported that it only supports the language types `['dotnet-interactive.csharp', 'dotnet-interactive.fsharp', ...]`, then we could give a much better experience to the user.",2021-01-06T23:02:40Z
755768926,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T23:03:12Z
755769704,This is by design -- see https://github.com/microsoft/vscode/issues/110880,2021-01-06T23:05:49Z
755769889,"The described behavior is how it is expected to work. If you disagree, please explain what is expected and what is not in more detail. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T23:06:23Z
755770528,@Lucria Did this used to work and then stopped? Can you open the Git channel in the Output pane to see if there are any errors when this happens?,2021-01-06T23:08:22Z
755771181,@pdrgnclvs Can you show a gif/video of what you are experiencing?,2021-01-06T23:10:17Z
755773181,"> That file was in the pending directory. The other directories were empty. Hopefully this is the right one.

Yes thats the correct directory to look for dumps, symbolicated trace for SIGSEGV crash

```
Crash reason:  EXC_BAD_ACCESS / KERN_INVALID_ADDRESS
Crash address: 0x110
Process uptime: 14992 seconds

Thread 35 (crashed)
 0  Electron Framework!node::inspector::TcpHolder::WriteRaw(std::__1::vector<char, std::__1::allocator<char> > const&, void (*)(uv_write_s*, int)) [inspector_socket.cc : 679 + 0x0]
     x0 = 0x00000001389dbe40    x1 = 0x000000000000000f
     x2 = 0x00000001389dbf30    x3 = 0x0000000000000007
     x4 = 0x00000001389f7220    x5 = 0x0000000000000001
     x6 = 0x0000000000000000    x7 = 0x0000000177021d7c
     x8 = 0x0000000000000000    x9 = 0x000000000000a007
    x10 = 0x0000000001040800   x11 = 0x0000000000040000
    x12 = 0x0000000000040000   x13 = 0x0000000001040800
    x14 = 0x0000000092b1b743   x15 = 0x0000000000007756
    x16 = 0x0000000000000d7f   x17 = 0x0000000000040000
    x18 = 0x0000000000000000   x19 = 0x00000001389dbe40
    x20 = 0x0000000102b8644c   x21 = 0x00000001389c9e00
    x22 = 0x0000000000000000   x23 = 0x0000000177022210
    x24 = 0x0000000000000269   x25 = 0x0000000137e90480
    x26 = 0x0000000127f2bb80   x27 = 0x0000000000000000
    x28 = 0x0000000137e90480    fp = 0x00000001770221f0
     lr = 0x0000000102b84e10    sp = 0x00000001770221b0
     pc = 0x0000000102b84e14
    Found by: given as instruction pointer in context
 1  Electron Framework!node::inspector::TcpHolder::WriteRaw(std::__1::vector<char, std::__1::allocator<char> > const&, void (*)(uv_write_s*, int)) [inspector_socket.cc : 679 + 0x4]
     fp = 0x0000000177022260    lr = 0x0000000102b86914
     sp = 0x0000000177022200    pc = 0x0000000102b84e10
    Found by: previous frame's frame pointer
 2  Electron Framework!node::inspector::(anonymous namespace)::WsHandler::Write(std::__1::vector<char, std::__1::allocator<char> >) [inspector_socket.cc : 612 + 0xc]
     fp = 0x00000001770222b0    lr = 0x0000000102b85414
     sp = 0x0000000177022270    pc = 0x0000000102b86914
    Found by: previous frame's frame pointer
 3  Electron Framework!node::inspector::InspectorSocket::Write(char const*, unsigned long) [inspector_socket.cc : 765 + 0x10]
     fp = 0x0000000177022360    lr = 0x0000000102b7f6dc
     sp = 0x00000001770222c0    pc = 0x0000000102b85414
    Found by: previous frame's frame pointer
 4  Electron Framework!node::inspector::(anonymous namespace)::RequestQueueData::RequestQueueData(uv_loop_s*)::'lambda'(uv_async_s*)::__invoke(uv_async_s*) [inspector_io.cc : 85 + 0xc]
     fp = 0x00000001770227c0    lr = 0x00000001003b202c
     sp = 0x0000000177022370    pc = 0x0000000102b7f6dc
    Found by: previous frame's frame pointer
 5  Electron Framework!uv__async_io [async.c : 163 + 0x4]
     fp = 0x000000017702a8a0    lr = 0x00000001003c23c8
     sp = 0x00000001770227d0    pc = 0x00000001003b202c
    Found by: previous frame's frame pointer
 6  Electron Framework!uv__io_poll [kqueue.c : 0 + 0x8]
     fp = 0x000000017702a920    lr = 0x00000001003b2468
     sp = 0x000000017702a8b0    pc = 0x00000001003c23c8
    Found by: previous frame's frame pointer
 7  Electron Framework!uv_run [core.c : 381 + 0x4]
     fp = 0x000000017702afc0    lr = 0x0000000102b7eeec
     sp = 0x000000017702a930    pc = 0x00000001003b2468
    Found by: previous frame's frame pointer
 8  Electron Framework!node::inspector::InspectorIo::ThreadMain() [inspector_io.cc : 321 + 0x8]
     fp = 0x000000017702afe0    lr = 0x000000019c75506c
     sp = 0x000000017702afd0    pc = 0x0000000102b7eeec
    Found by: previous frame's frame pointer
 9  libsystem_pthread.dylib!_pthread_start + 0x13c
     fp = 0x0000000000000000    lr = 0x3f4100019c74fda0
     sp = 0x000000017702aff0    pc = 0x000000019c75506c
    Found by: previous frame's frame pointer
```

this would be https://github.com/nodejs/node/issues/34833 , that issue reports its fixed in v14. We can ignore this for now.",2021-01-06T23:16:13Z
755774392,@jshall if you disable all extensions does it go away?,2021-01-06T23:19:54Z
755776926,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-06T23:27:47Z
755777133,"Opinion: kinda disturbed by the hubris of closing this without giving any consideration for the impact on UX.

Case: I am setting up VSCode and went to install the Terminals Manager Extension. To complete the install, I had to edit the extension config. I did this by running the command to open the json config in a new tab, then attempted to switch between that tab and the extension's marketplace page tab to reference the config guide.

Result: Horrible UX from the marketplace tab constantly reloading from the slightest and most miniscule tab switch. What is more valuable - a little bit of RAM, or my time and patience?",2021-01-06T23:28:21Z
755777313,"If Git on the command line breaks with this bad configuration, there isn't much we can do, as we rely on Git (we shell out to it).",2021-01-06T23:28:58Z
755777645,"That's awesome, thank you!

1. That's a good point. The more common case might be, even in a well behaved test provider, a finicky file watcher -- which is well known to happen. I'll add a refresh icon, like we have in the file explorer.
2. Thanks, will expand on that. Today I got to the point of in-editor integration (code lens and diagnostic info). I'll be working on a richer experience starting tomorrow.
3. Added today 🙂 ",2021-01-06T23:29:59Z
755778600,"Have you checked to make your settings are the same between the two version (for example, using the same TypeScript version in both cases)",2021-01-06T23:32:48Z
755780728,"As for the SIGILL dumps,

```
Crash reason:  0x00000000 / 0x00000000
Crash address: 0x19c7230f8
Process uptime: 9411 seconds

Thread 0 (crashed)
 0  libsystem_kernel.dylib!__fork + 0x14
     x0 = 0x000000000000a0e3    x1 = 0x0000000000000000
     x2 = 0x0000000000000303    x3 = 0x000000000000002c
     x4 = 0x0000000000000507    x5 = 0x0000000000000000
     x6 = 0x0000000000000000    x7 = 0x0000002800000000
     x8 = 0x0000000000000000    x9 = 0x0000000104677e20
    x10 = 0x00000001fc650338   x11 = 0x0000000000087bbb
    x12 = 0x0000000000000002   x13 = 0x0000000000000000
    x14 = 0x0000000000000000   x15 = 0x0000000000000001
    x16 = 0x0000000000000002   x17 = 0x00000002021398c0
    x18 = 0x0000000000000000   x19 = 0x000000016b9545c8
    x20 = 0x000000016b954500   x21 = 0x0000000000000003
    x22 = 0x000000010b3f6e90   x23 = 0x000000016b954518
    x24 = 0x0000000000000003   x25 = 0x0000000000000000
    x26 = 0x000000010b3f6fe0   x27 = 0x0000000000000003
    x28 = 0x000000010a6a1154    fp = 0x000000016b9544b0
     lr = 0xff7a80019c6355bc    sp = 0x000000016b9544b0
     pc = 0x000000019c7230f8
    Found by: given as instruction pointer in context
 1  0xff7a80019c6355b8
     fp = 0x000000016b9544d0    lr = 0xff7a80019c6355bc
     sp = 0x000000016b9544c0    pc = 0xff7a80019c6355bc
    Found by: previous frame's frame pointer
 2  0xff7a80019c6355b8
     fp = 0x000000016b9545a0    lr = 0xaa468001046d4e90
     sp = 0x000000016b9544e0    pc = 0xff7a80019c6355bc
    Found by: previous frame's frame pointer
 3  0xaa468001046d4e8c
     fp = 0x000000016b9552b0    lr = 0x0000000106e757c8
     sp = 0x000000016b9545b0    pc = 0xaa468001046d4e90
    Found by: previous frame's frame pointer
 4  Electron Framework!node::(anonymous namespace)::ProcessWrap::Spawn(v8::FunctionCallbackInfo<v8::Value> const&) [process_wrap.cc : 258 + 0x4]
     fp = 0x000000016b955390    lr = 0x0000000104faa6f8
     sp = 0x000000016b9552c0    pc = 0x0000000106e757c8
    Found by: previous frame's frame pointer
 5  Electron Framework!v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [api-arguments-inl.h : 158 + 0x4]
     fp = 0x000000016b955450    lr = 0x0000000104faa4b8
     sp = 0x000000016b9553a0    pc = 0x0000000104faa6f8
    Found by: previous frame's frame pointer
 6  Electron Framework!v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) [builtins-api.cc : 111 + 0x8]
     fp = 0x000000016b9554b0    lr = 0x0000000104fa9c78
     sp = 0x000000016b955460    pc = 0x0000000104faa4b8
    Found by: previous frame's frame pointer
 7  Electron Framework!v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) [builtins-api.cc : 141 + 0x14]
     fp = 0x000000016b9554f0    lr = 0x000000010557276c
     sp = 0x000000016b9554c0    pc = 0x0000000104fa9c78
    Found by: previous frame's frame pointer
 8  Electron Framework!Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit + 0x68
     fp = 0x000000016b9555d0    lr = 0x00000001055028f4
     sp = 0x000000016b955500    pc = 0x000000010557276c
    Found by: previous frame's frame pointer
 9  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955650    lr = 0x00000001055028f4
     sp = 0x000000016b9555e0    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
10  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b9556f0    lr = 0x00000001055028f4
     sp = 0x000000016b955660    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
11  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955730    lr = 0x00000001054f9a38
     sp = 0x000000016b955700    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
12  Electron Framework!Builtins_ArgumentsAdaptorTrampoline + 0xd4
     fp = 0x000000016b955820    lr = 0x00000001055028f4
     sp = 0x000000016b955740    pc = 0x00000001054f9a38
    Found by: previous frame's frame pointer
13  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955860    lr = 0x00000001054f9a38
     sp = 0x000000016b955830    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
14  Electron Framework!Builtins_ArgumentsAdaptorTrampoline + 0xd4
     fp = 0x000000016b955940    lr = 0x00000001055028f4
     sp = 0x000000016b955870    pc = 0x00000001054f9a38
    Found by: previous frame's frame pointer
15  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955990    lr = 0x00000001054f9a38
     sp = 0x000000016b955950    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
16  Electron Framework!Builtins_ArgumentsAdaptorTrampoline + 0xd4
     fp = 0x000000016b955a10    lr = 0x00000001055028f4
     sp = 0x000000016b9559a0    pc = 0x00000001054f9a38
    Found by: previous frame's frame pointer
17  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955a80    lr = 0x00000001055028f4
     sp = 0x000000016b955a20    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
18  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     fp = 0x000000016b955ac0    lr = 0x00000001055c245c
     sp = 0x000000016b955a90    pc = 0x00000001055028f4
    Found by: previous frame's frame pointer
19  Electron Framework!Builtins_PromiseFulfillReactionJob + 0x38
     fp = 0x000000016b955b20    lr = 0x0000000105523920
     sp = 0x000000016b955ad0    pc = 0x00000001055c245c
    Found by: previous frame's frame pointer
20  Electron Framework!Builtins_RunMicrotasks + 0x29c
     fp = 0x000000016b955b68    lr = 0x00000001054fff48
     sp = 0x000000016b955b30    pc = 0x0000000105523920
    Found by: previous frame's frame pointer
21  Electron Framework!Builtins_JSRunMicrotasksEntry + 0xa4
     fp = 0xffffffffffffffff    lr = 0x0000298c0000a6d8
     sp = 0x000000016b955b78    pc = 0x00000001054fff48
    Found by: previous frame's frame pointer
22  Electron Framework!Builtins_JSConstructEntry + 0x11c
     sp = 0x000000016b955b98    pc = 0x00000001054ffea0
    Found by: stack scanning
23  Electron Framework!v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [simulator.h : 142 + 0x4]
     sp = 0x000000016b955bd0    pc = 0x0000000104ffff5c
    Found by: stack scanning
24  Electron Framework!v8::internal::LoadIC::Load(v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Name>, bool, v8::internal::Handle<v8::internal::Object>) [ic.cc : 477 + 0x4]
     sp = 0x000000016b955c30    pc = 0x00000001050b8534
    Found by: stack scanning
25  Electron Framework!v8::internal::Runtime_LoadIC_Miss(int, unsigned long*, v8::internal::Isolate*) [ic.cc : 2343 + 0x14]
     sp = 0x000000016b955d00    pc = 0x00000001050c0634
    Found by: stack scanning
26  Electron Framework!v8::internal::Runtime_DefineDataPropertyInLiteral(int, unsigned long*, v8::internal::Isolate*) [runtime-object.cc : 953 + 0x14]
     sp = 0x000000016b955d10    pc = 0x0000000105231084
    Found by: stack scanning
27  Electron Framework!v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [execution.cc : 428 + 0x8]
     sp = 0x000000016b955da0    pc = 0x0000000105000424
    Found by: stack scanning
28  Electron Framework!Builtins_InterpreterEntryTrampoline + 0xfe
     sp = 0x000000016b955dd0    pc = 0x00000001055028e2
    Found by: stack scanning
29  Electron Framework!v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle<v8::internal::Object>*) [execution.cc : 505 + 0x4]
     sp = 0x000000016b955e00    pc = 0x00000001050004ec
    Found by: stack scanning
30  Electron Framework!v8::internal::MicrotaskQueue::RunMicrotasks(v8::internal::Isolate*) [microtask-queue.cc : 165 + 0xc]
     sp = 0x000000016b955e60    pc = 0x0000000105015128
    Found by: stack scanning
31  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     sp = 0x000000016b955e80    pc = 0x00000001055028f4
    Found by: stack scanning
32  Electron Framework!Builtins_InterpreterEntryTrampoline + 0x110
     sp = 0x000000016b955ef0    pc = 0x00000001055028f4
    Found by: stack scanning
33  Electron Framework!v8::internal::MicrotaskQueue::PerformCheckpoint(v8::Isolate*) [microtask-queue.cc : 117 + 0x0]
     sp = 0x000000016b955f70    pc = 0x0000000105014f50
    Found by: stack scanning
34  Electron Framework!Builtins_CallApiCallback + 0xd0
     sp = 0x000000016b955f90    pc = 0x0000000105503bb4
    Found by: stack scanning
35  Electron Framework!Builtins_CallApiCallback + 0xd0
     sp = 0x000000016b955f98    pc = 0x0000000105503bb4
    Found by: stack scanning
36  Electron Framework!Builtins_JSEntryTrampoline + 0xa8
     sp = 0x000000016b9560a0    pc = 0x000000010550006c
    Found by: stack scanning
37  Electron Framework!Builtins_JSEntry + 0xa4
     sp = 0x000000016b9560d0    pc = 0x00000001054ffd08
    Found by: stack scanning
38  Electron Framework!Builtins_ConstructProxy + 0x39c
     sp = 0x000000016b956130    pc = 0x00000001054ffc60
    Found by: stack scanning
39  Electron Framework!v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [simulator.h : 142 + 0x14]
     sp = 0x000000016b956170    pc = 0x0000000104ffffd0
    Found by: stack scanning
40  Electron Framework!v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [simulator.h : 142 + 0x14]
     sp = 0x000000016b9561e0    pc = 0x0000000104ffffd0
    Found by: stack scanning
41  Electron Framework!v8::internal::LookupIterator::Delete() [lookup.cc : 669 + 0xc]
     sp = 0x000000016b9562a0    pc = 0x0000000105174148
    Found by: stack scanning
42  Electron Framework!v8::internal::Object::AddDataProperty(v8::internal::LookupIterator*, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes, v8::Maybe<v8::internal::ShouldThrow>, v8::internal::StoreOrigin) [objects.cc : 2816 + 0xc]
     sp = 0x000000016b9562b0    pc = 0x0000000105191864
    Found by: stack scanning
43  Electron Framework!v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) [execution.cc : 462 + 0x4]
     sp = 0x000000016b956340    pc = 0x0000000104fff4f8
    Found by: stack scanning
44  Electron Framework!v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) [api.cc : 4994 + 0x14]
     sp = 0x000000016b9563d0    pc = 0x0000000104f86f48
    Found by: stack scanning
45  Electron Framework!node::InternalCallbackScope::Close() [callback.cc : 144 + 0x8]
     sp = 0x000000016b9564f0    pc = 0x0000000106d5b6ec
    Found by: stack scanning
46  Electron Framework!node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context) [callback.cc : 197 + 0x4]
     sp = 0x000000016b956560    pc = 0x0000000106d5ba68
    Found by: stack scanning
47  Electron Framework!v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr<v8::internal::BackingStore>) [js-array-buffer.cc : 113 + 0x4]
     sp = 0x000000016b9565b0    pc = 0x0000000105140bc0
    Found by: stack scanning
48  Electron Framework!v8::internal::JSArrayBuffer::Setup(v8::internal::SharedFlag, std::__1::shared_ptr<v8::internal::BackingStore>) [js-array-buffer.cc : 51 + 0x8]
     sp = 0x000000016b9565f0    pc = 0x0000000105140af8
    Found by: stack scanning
49  Electron Framework!node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*) [async_wrap.cc : 769 + 0x1c]
     sp = 0x000000016b956690    pc = 0x0000000106d6c4c0
    Found by: stack scanning
50  Electron Framework!node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks) [stream_base.cc : 346 + 0x10]
     sp = 0x000000016b9566f0    pc = 0x0000000106e7a02c
    Found by: stack scanning
51  Electron Framework!node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&) [stream_base.cc : 0 + 0x10]
     sp = 0x000000016b956720    pc = 0x0000000106e7bed8
    Found by: stack scanning
52  Electron Framework!node::LibuvStreamWrap::OnUvRead(long, uv_buf_t const*) [stream_base-inl.h : 126 + 0x10]
     sp = 0x000000016b956790    pc = 0x0000000106e80710
    Found by: stack scanning
53  Electron Framework!node::LibuvStreamWrap::ReadStart()::$_1::__invoke(uv_handle_s*, unsigned long, uv_buf_t*) [stream_wrap.cc : 218 + 0x4]
     sp = 0x000000016b9567c0    pc = 0x0000000106e80ed0
    Found by: stack scanning
54  Electron Framework!uv__stream_io [stream.c : 1239 + 0xc]
     sp = 0x000000016b956810    pc = 0x00000001046d6f80
    Found by: stack scanning
```",2021-01-06T23:39:45Z
755781425,"Please ask your question on [StackOverflow](https://aka.ms/vscodestackoverflow). We have a great community over [there](https://aka.ms/vscodestackoverflow). They have already answered thousands of questions and are happy to answer yours as well. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-06T23:42:06Z
755781626,"@eamodio, of course 👍

![code](https://user-images.githubusercontent.com/46295920/103833179-3925ac80-5078-11eb-96d8-befd6da3dd1b.gif)

Every time a change is staged in one of the projects, it collapses all of them and I have to open it again to resume what I was doing 🤔",2021-01-06T23:42:40Z
755782578,"@eamodio so there's no way to detect this with git? If not, then that's a shame.",2021-01-06T23:45:41Z
755783104,"To clarify, what I was imagining was that you would login with your own credentials and get a token for yourself that could either write to your own settings, or be used to read other's settings. So you would never share your token",2021-01-06T23:47:24Z
755783179,"@jekitf I think that utf8 is ok, but the one 2 lines above it might be the issue. But not sure. I won't really be able to look at this this iteration at least, so any testing/PR that you can provide would be greatly appreciated.",2021-01-06T23:47:37Z
755783371,"@rzhao271 No, fixed now.",2021-01-06T23:48:19Z
755783476,Not that I know of.,2021-01-06T23:48:41Z
755783976,"Thanks! I was seeing the same behavior over break, but I can't reproduce this myself anymore. What version of VS Code are you using? And can you still reproduce it on the latest insiders edition?",2021-01-06T23:50:25Z
755784568,"Both the dumps indicate the crash happens after call to `fork`. I am not sure what the cause is here, but it would be a side effect of having all those child process spawn calls being delayed. In your case two extensions definitely standout from the devtools log, can you disable `vscode.git` and `eamodio.gitlens` ?",2021-01-06T23:52:26Z
755785654,"@Tyriar It made errors where it was impossible to open shell due to errors/exceptions, much more visible. Instead of showing 'Starting...', it shows error message, which gives more troubleshooting info. 

For example, it made it easy to diagnose errors like this: https://github.com/microsoft/vscode/issues/76542#issuecomment-508529866 (It can't get access to parent process env for some reason).",2021-01-06T23:56:32Z
755786006,"Thanks for the explanation.

You can already express non-mutating changes by just updating your custom document's internal state, but you are correct that these cannot hook into undo/redo events",2021-01-06T23:57:52Z
755786728,Yes this was changed in #110108 as is by-design (template strings should now be consist with folded brackets and arrays),2021-01-07T00:00:35Z
755787565,"@eamodio, I'm using the current stable...

![image](https://user-images.githubusercontent.com/46295920/103834187-aa665f00-507a-11eb-9f86-b9ed251883f1.png)

As for the insiders version, I haven't tried it yet but will tomorrow morning to see if it keeps happening and will keep you posted 😉",2021-01-07T00:03:36Z
755788576,"The behavior you describe sounds expected  to me. Determining when a webview is actually ready is best left up to each extension IMO (for example, does ready mean that the dom has finished loading or that all linked assets have also loaded?) so I'm not sold on adding a new API 

I haven't seen other reports of people running into this so I can't say if this is a common issue or not but we would accept a PR that add a  note in the webview guide if you think it could help others avoid frustration. Here's the webview docs: https://github.com/Microsoft/vscode-docs/blob/master/api/extension-guides/webview.md",2021-01-07T00:06:57Z
755789693,"Interesting.

Could you clarify what the purpose of disabling them would be? To see if further crashes occur? 

`vscode.git`, being the built-in git plugin is pretty useful :)

Should I perhaps try using this workaround instead: https://github.com/microsoft/vscode/issues/105446#issuecomment-727079169 ?",2021-01-07T00:11:07Z
755790935,"This is thrown from the GitHub auth server. I'm not completely sure under what circumstances, but I think is related to proxies.

Duplicate: https://github.com/microsoft/vscode/issues/108304",2021-01-07T00:15:16Z
755791011,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Marketplace (#112115)](https://www.github.com/microsoft/vscode/issues/112115) <!-- score: 0.455 -->
- [Marketplace isn't working (#113198)](https://www.github.com/microsoft/vscode/issues/113198) <!-- score: 0.446 -->
<!-- potential_duplicates_comment -->",2021-01-07T00:15:30Z
755791216,@lydell I believe this works similarly to the solution I'd posted above. It's a great hack; I'm not really sure of edge cases--and this feature should still ideally be added to VSCode itself given how useful it is.,2021-01-07T00:16:16Z
755791461,"I've quit using vs code and github together. I lost too much work as it ate
my code on both machines and the github server. They will remain
separate for me.

On Wed, Jan 6, 2021 at 6:03 PM Pedro Gonçalves <notifications@github.com>
wrote:

> @eamodio <https://github.com/eamodio>, I'm using the current stable...
>
> [image: image]
> <https://user-images.githubusercontent.com/46295920/103834187-aa665f00-507a-11eb-9f86-b9ed251883f1.png>
>
> As for the insiders version, I haven't tried it yet but will tomorrow
> morning to see if it keeps happening and will keep you posted 😉
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/112354#issuecomment-755787565>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AORUJSWMDON77QOSS54JLALSYT26NANCNFSM4UX4PQNA>
> .
>


-- 
Mark Anderson
Monroe Crossing
612-386-1070
",2021-01-07T00:17:05Z
755792727,"> Could you clarify what the purpose of disabling them would be? To see if further crashes occur?

Just to reduce the number of fork calls being made and see if the crash happens.

Yes you can also try that workaround, but I would like to find out the extension causing this issue first.",2021-01-07T00:21:22Z
755798053,"One other thing that I'm not sure is relevant or not. 

Separate from vscode, I'm running node `15.5.0` compiled to arm64.

I've seen `EFAULT`, `EPIPE` in the vscode terminal while running nodejs apps at random times. I need to restart them relatively often. Streams seem to be failing in general for random reasons that I haven't been able to figure out yet.

The above is when running nestjs or other express based servers.

I disabled `vscode.git` and `eamodio.gitlens` as per your request and will update on the outcome.

Example from just now:

<img width=""803"" alt=""Screenshot 2021-01-07 at 02 44 06"" src=""https://user-images.githubusercontent.com/697707/103836604-3c2d9680-5092-11eb-8e22-f058407ff326.png"">
",2021-01-07T00:38:03Z
755823173,"I really thought I had something already for dynamically registered configuration, because that was an issue for the bing settings service where some settings couldn't be indexed because they were only registered on windows, and that process runs on mac. So I thought there was a flag that would allow it to be registered but ""invisible"". But I can't find anything like that.

@bpasero can you think of a setting that is only registered on Windows?",2021-01-07T01:23:22Z
755823539,Probably I will just hardcode it to not show the warning for that pattern. It's not a big deal.,2021-01-07T01:24:31Z
755831966,"![image](https://user-images.githubusercontent.com/16214503/103841220-0de39300-5061-11eb-9918-d0356f5ead97.png)
",2021-01-07T01:52:21Z
755836662,Duplicate of #110276,2021-01-07T02:08:54Z
755847950,I have published a npm package for `Expand` and `ExpandDeep` based on the SO answer: https://www.npmjs.com/package/type-expand,2021-01-07T02:46:59Z
755850477,"Does it work if you don't use a `@` in your ssh config? That is the syntax for connecting to that IP with the user ""Vultr""",2021-01-07T02:56:36Z
755850715,"We try to keep VS Code lean and we think the functionality you're asking for is great for a VS Code extension. Maybe you can already find one that suits you in the [VS Code Marketplace](https://aka.ms/vscodemarketplace). Just in case, in a few simple steps you can get started [writing your own extension](https://aka.ms/vscodewritingextensions). See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T02:57:30Z
755850806,I don't want to modify the actual text within what we display. But using a search editor might make this easier for you,2021-01-07T02:57:52Z
755850828,Change the setting `terminal.integrated.rightClickBehavior` : default,2021-01-07T02:57:56Z
755850914,"Seems worth exploring with an extension first. If enough extensions/languages need this sort of thing, we could consider it for VS Code / LSP

Also please give issues a descriptive title",2021-01-07T02:58:16Z
755851969,Did this just start happening for you in version 1.52?,2021-01-07T03:02:14Z
755852573,"@eamodio This did not use to work at all for me. 

This is the error output. It seems that it is unable to determine that the remote is using `git@github.com-work` and attempts to pull from `git@github.com`

```
> git pull --tags origin feature/new-feature
git@github.com: Permission denied (publickey,keyboard-interactive).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
```

The above error that I described also happens for Gitlab repositories, where I have two SSH keys for my work Gitlab account and personal Gitlab account. The sync button will also attempt to pull/push from `git@gitlab.com` instead of `git@gitlab.com-work`",2021-01-07T03:04:17Z
755852800,please open a new issue @danielhuang if it is different from this and doesn't resolve with my above reccomendations.,2021-01-07T03:05:05Z
755852936,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Windows explorer icons should be updated with the icons for the current VS Code file icon theme (#109742)](https://www.github.com/microsoft/vscode/issues/109742) <!-- score: 0.502 -->
<!-- potential_duplicates_comment -->",2021-01-07T03:05:38Z
755853882,"<!-- 9078ab2c-c9e0-7adb-d31b-1f23430222f4 -->
:slightly_smiling_face: This feature request received a sufficient number of community upvotes and we moved it to our backlog. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T03:09:08Z
755853979,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T03:09:30Z
755854000,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T03:09:35Z
755854004,"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 -->
This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T03:09:36Z
755854012,"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 -->
:slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T03:09:37Z
755855610,"@mjbvz sorry,it still not working

❗️❗️❗️ Please fill in the sections below to help us diagnose the issue ❗️❗️❗️

**TypeScript Version:** 4.2.0-dev.20210106

**Steps to reproduce crash**
1.
2.
3.

**TS Server Log**
❗️Server logging disabled. To help us fix crashes like this, please enable logging by setting:
```json
""typescript.tsserver.log"": ""verbose""
```
After enabling this setting, future crash reports will include the server log.

**TS Server Error Stack**
Server: `semantic`
```
RangeError: Maximum call stack size exceeded
    at Object.scan (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:10874:50)
    at nextTokenWithoutCheck (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29123:43)
    at nextToken (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29135:20)
    at abortParsingListOrMoveToNextToken (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29996:13)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29732:21)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
    at parseList (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29728:35)
    at parseBlock (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:32730:34)
    at parseStatement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:33143:28)
    at parseListElement (/Users/vision_x/.vscode/extensions/ms-vscode.vscode-typescript-next-4.2.20210106/node_modules/typescript/lib/tsserver.js:29744:20)
```",2021-01-07T03:15:35Z
755856062,"![image](https://user-images.githubusercontent.com/40595135/103846786-e2e95580-50d9-11eb-8203-d496818c1e14.png)
",2021-01-07T03:17:15Z
755856306,"Thank you for drawing my attention to that. I'm opening the same project folder in both cases, but for whatever reason the stable build (1.52.1) shows ""TypeScript React 3.9.7"" in the lower right corner, while the Insiders build shows ""TypeScript React 4.1.2"". If I click on the version shown on the status bar, then ""Select TypeScript Version..."", the stable build shows that I am set to ""Use Workspace Version 3.9.7"" then the line below that shows ""node_modules/typescript/lib."" However in the Insiders build, with the same project folder open and while viewing the same file, it shows ""Use VS Code's Version 4.1.2"". Indeed, after changing the version in the stable build to ""Use VS Code's Version 4.1.2"" the problem no longer occurs. So that is the difference.

I'm not sure why stable and Insiders are coming up with different TS versions when I open the same project folder. I'm guessing that setting is not stored in the project folder then, but I don't know where it would be. I also completely deleted my VS Code application folder and reinstalled the stable version, so I'm guessing the setting is not in there either.

I suppose changing this setting will be a good enough fix, or we can update our project's TS version. I am a little concerned about ignoring the project TS version in general--it seems like one would always want the editor to understand the same TS version that is actually going to be used when building the project.",2021-01-07T03:18:04Z
755857639,"Ok, please fill in the issue template with as much information as possible",2021-01-07T03:22:54Z
755860855,"Here's a javascript example for array destructuring:

```json
""arraydestructuring"": {
        ""prefix"": ""[a"",
        ""body"": [
            ""[a, b, ...next] = ${1:array}""
        ],
        ""description"": ""arraydestructuring""
    }
```

which gets you:

```
[a, b, ...next] = array]
```

when you type: `[a<TAB or ENTER to accept intellisense>`",2021-01-07T03:33:42Z
755861837,"A few complications that I've run into while working on this API:

### Trusted domains
If a user opens a url inside of VS Code itself, I believe that this uri **should not** go through the trusted domains flow. Right now, the trusted domains are checked before any openers (internal or external) are ever invoked, so there is no way to skip the trusted domains check for a specific opener.

### Port forwarding
In port forwarding cases, an extension needs to know both the original uri that triggered the open (`localhost:8000`) as well as the uri that has been resolved (`long-codespaces-url-pointing-to-localhost-8000`). 

Our simple browser extension for example only wants to open urls for specific hosts (such as only opening localhost urls). To implement this, it needs to validate against the original uri but ultimately open the resolved uri if the validation passes

---

To solve these two issues, I believe we should refactor `IOpenerService.open`. Here's what `IOpenerService.open` does today:

1. For a given uri, such as `localhost:8000`
1. Validate that uri (i.e. do trusted domains)
2. The find an opener for it
2. If we find an opener for an external uri, then resolve the uri (i.e. do the port forwarding)
2. Pass the external opener the resolved uri to open

Instead, I think the flow should look more like:

1. For a given uri, such as `localhost:8000`
1. Find the first valid opener for that uri.
2. In that opener, run a pre-open check against `localhost:8000` (this is where trusted domains would be handled)
3. If that check was ok, then resolve the uri (i.e. do the port forwarding)
3. Then using both the original uri and the resolved uri, do the actual opening


/cc @JacksonKearl Since I know you've been doing some trusted domains stuff recently
",2021-01-07T03:36:39Z
755864721,"Thanks for checking. Using an older typescript version would explain the issue.

Try running the `TypeScript: Select typescript version command` with a typescript file open. For stable, you likely changed VS Code to use the workspace version of typescript (3.9.7) while insiders is using the default version of TypeScript that VS Code ships with (4.1.2). 

The specific TS version used is not stored as a normal VS Code setting for security reasons, so deleting the settings file has no effect on it (you'd need to fully delete all user data associated with VS Code)",2021-01-07T03:46:58Z
755865046,"When Windows restarts automatically (or manually) due to some reason, VSCode is closed by the OS but it attempts to invoke update during the OS shutdown process and it results in corruption of VSCode files.

I think VSCode should update it on launch rather than on close.",2021-01-07T03:48:13Z
755865724,"better example!

A javascript example for `Symbol.iterator`:

```json
""SymbolIterator"": {
		""prefix"": ""[Symbol.iterator"",
		""body"": [
			""[Symbol.iterator]: () => {"",
			""    return {"",
			""        next: () => {"",
			""            return { value: value, done: false };"",
			""        }"",
			""    };"",
			""}""
		]
	}
```

which gets you:

```js
[Symbol.iterator]: () => {
        return {
            next: () => {
                return { value: value, done: false };
            }
        };
    }]
```
> Notice the extra `]` at the end

when you type: `[Symbol<TAB or ENTER to accept intellisense>`

",2021-01-07T03:50:31Z
755866355,"Yes  for mac it just denied the permission , and logged the error that it could not find a media device, but in a WSL and Linux environment it doesn't deny them.",2021-01-07T03:52:49Z
755868265,"@mjbvz I added some information according to the issue template, is this information enough?

- vscode Version: 1.52.1
  Version: 1.52.1
  Commit: ea3859d4ba2f3e577a159bc91e3074c5d85c0523
  Date: 2020-12-16T16:30:02.420Z (3 wks ago)
  Electron: 9.3.5
  Chrome: 83.0.4103.122
  Node.js: 12.14.1
  V8: 8.3.110.13-electron.0
  OS: Darwin x64 18.7.0
- os version:
  macOS Mojave 10.14.6
  MacBook Pro (13-inch, 2017, Two Thunderbolt 3 ports)
  2.3 GHz Intel Core i5
  8 GB 2133 MHz LPDDR3
  
Steps to Reproduce:
1. in terminal run `code .` to open vscode
2. select a .js file
3. reproduce this error(Maximum call stack size exceeded)

Does this issue occur when all extensions are disabled?: No",2021-01-07T04:00:25Z
755870235,So what's the solution for this or like do you have any reference on how to solve this issue?,2021-01-07T04:08:00Z
755870799,"Thank you for helping point me to a solution. We'll look into upgrading our TS version.

As far as the behavior of VS Code it still seems like an area for improvement though. Is using older TS versions unsupported? It just seems like a huge ""gotcha"". Configuring the right version of Node.js, TS, all the stuff in tsconfig, and apparently the VS Code setting to all work together is confusing and frustrating enough. If the old version is not supported perhaps it would save users a lot of time to not allow selecting it in the first place. I certainly never would have expected that my CPU usage is going to 100% because at some point in the distant past I selected ""Use workspace version"" instead of ""Use VS Code's version"".

I'm also not sure why it is a good idea to use a different version in the editor than you will actually use when compiling. This seems like it will lead potentially to different errors & warnings being shown in the editor vs. when actually compiling with tsc, which would be another source of confusion. Surely the editor should understand the code the same way the compiler does in order to present correct feedback to the developer. On the documentation page https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions it seems to list this as one of the reasons for configuring this setting: ""Making sure you are using the same version of TypeScript for IntelliSense that you use to compile your code"", although it also makes the rather vague claim that ""You can just use VS Code's built-in TypeScript version for IntelliSense without worry for most common cases.""",2021-01-07T04:10:04Z
755871278,"When you focus on the Markdown file there are more action buttons to display. This leaves less space for the tabs, causing the wrapping. ",2021-01-07T04:11:52Z
755881159,"> One possible approach would be to assign a URL to a standardized settings ""package"" that could be downloaded and installed, and reinstalled whenever wanted, by anyone who was given the URL.

This is something I've heard from other professors as well. Having some kind of configuration file or configuration from url option for them to outline their settings to then distribute to their students. Classrooms are a great use-case for read-only settings sharing.  

",2021-01-07T04:47:02Z
755882205,"> The only issue I see here is the fact that the selection occurs, but otherwise I am not sure how to improve this.

This is the same conclusion I came to as well unfortunately. I'm also not familiar enough with how the selection works, so I don't know if I can help much there.",2021-01-07T04:50:42Z
755882246,"I can't seem to reproduce this issue when decreasing the window size (or did you mean something else by ""space is limited""?)

When I decrease the window size, the editor toolbar is just covered up:

![f9b5cd9fb3f802fa1dee3afbda0efa94](https://user-images.githubusercontent.com/32284796/103819210-98130380-502f-11eb-9c60-b31ea610c897.png)
",2021-01-07T04:50:52Z
755883869,"> This works for me. Can you reproduce with latest vscode insiders?
> https://code.visualstudio.com/insiders/

yes, it works  most time,
if i reproduce it with latest vscode insiders, then what should i do next.",2021-01-07T04:56:39Z
755884481,"> @bersbersbers to clarify, we will probably not be able to prevent editors from jumping, after all you enabled wrapping tabs in settings and **different editors can have different number of actions.**

I'm not sure the issue is that different editors have different numbers of actions in my case [I do see how that could trigger it too, though] - the issue as it appears to me it that actions are hidden when an editor is un-focused. What if you did not hide them (that is, provide an option to make the actions stick upon changing editors)? This would prevent jumping upon focus change, and by the way, it  would also calm the UI a bit which is very busy when I change focus - note how the actions are rendered in two steps. On the left side, a superset of the final actions is shown initially before some are removed while the right side, a subset of the final actions is shown before some more are added:

![OxGLBJUTeT](https://user-images.githubusercontent.com/12128514/103852789-ec0ffd80-50ac-11eb-8c38-313343515416.gif)
",2021-01-07T04:58:29Z
755888392,"Here's an accompanying visual for @DynDux's proposed change:

![sMfvSBbQ8t](https://user-images.githubusercontent.com/32284796/103853743-6e300000-5074-11eb-9fb5-9703bc1fdcf3.gif)
",2021-01-07T05:11:45Z
755889026,"> Here's an accompanying visual for @DynDux's proposed change:
> 
> ![sMfvSBbQ8t](https://user-images.githubusercontent.com/32284796/103853743-6e300000-5074-11eb-9fb5-9703bc1fdcf3.gif)
> 

great",2021-01-07T05:13:58Z
755889102,"The effect presented above (which appears consistently when changing from a diff editor to a regular editor in my setup, potentially, but not necessarily due to extensions) makes the original issue even more impactful as I just noticed: the editor jumps down and then up again as editor actions are added and then removed, if the larger set of action leads to wrapping and the final set does not.

I acknowledge that I caused this issue by enabling the option to wrap tabs, but if this is intended, then the option is simple not usable for me.

![VKXVvBut6d](https://user-images.githubusercontent.com/12128514/103853856-54f87500-50af-11eb-8fa1-1e4b4c39010c.gif)
",2021-01-07T05:14:18Z
755891854,"@bpasero I see another issue that edirot font size change also changes the font size of filename in tab. so if some one increases editor font size, which I normally do to not strain my eyes, the tabs row takes more vertical space.",2021-01-07T05:23:03Z
755906194,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [live shAre (#113414)](https://www.github.com/microsoft/vscode/issues/113414) <!-- score: 0.839 -->
- [Format on Save (#113597)](https://www.github.com/microsoft/vscode/issues/113597) <!-- score: 0.715 -->
- [will not update (#111905)](https://www.github.com/microsoft/vscode/issues/111905) <!-- score: 0.67 -->
- [Not using installed extensions  (#113701)](https://www.github.com/microsoft/vscode/issues/113701) <!-- score: 0.668 -->
- [Image File Not Showing (#111306)](https://www.github.com/microsoft/vscode/issues/111306) <!-- score: 0.66 -->
<!-- potential_duplicates_comment -->",2021-01-07T06:04:18Z
755906500,"It looks like you're using the VS Code Issue Reporter but did not paste the text generated into the created issue. We've closed this issue, please open a new one containing the text we placed in your clipboard.

Happy Coding!",2021-01-07T06:05:10Z
755915775,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [live server  (#110372)](https://www.github.com/microsoft/vscode/issues/110372) <!-- score: 0.54 -->
- [VS Code tries to reopen most recent Live Share session upon opening (#110982)](https://www.github.com/microsoft/vscode/issues/110982) <!-- score: 0.447 -->
- [Prettier and Live Server doesn't works with automaticaly (#110148)](https://www.github.com/microsoft/vscode/issues/110148) <!-- score: 0.445 -->
<!-- potential_duplicates_comment -->",2021-01-07T06:29:35Z
755918403,"A similar issue discusses removal of code inside `<pre>` and `<code>` tags in https://github.com/microsoft/vscode/issues/110945, but that appears under [CommonMark spec 0.29 4.5 Fenced code blocks](https://spec.commonmark.org/0.29/#fenced-code-blocks)",2021-01-07T06:36:29Z
755918654,The `<pre>` and `<code>` blocks are allowed under [CommonMark spec 0.29 4.5 Fenced code blocks](https://spec.commonmark.org/0.29/#fenced-code-blocks).,2021-01-07T06:37:11Z
755918975,They are tracked here in this repository. I was mainly asking you to get some help from others that were successful in using the progress indicator with discrete progress and then come back here if you still think there is a bug in VSCode itself or if the documentation should be updated.,2021-01-07T06:37:59Z
755919533,"@roblourens you mean `included` like here?

https://github.com/microsoft/vscode/blob/c03bc427cf71dae7766cd6e451c492b12e87e544/src/vs/workbench/electron-sandbox/desktop.contribution.ts#L281-L281",2021-01-07T06:39:22Z
755919914,"<!-- UNABLE_TO_LOCATE_COMMIT_MESSAGE -->
Issue marked as unreleased but unable to locate closing commit in issue timeline. You can manually reference a commit by commenting `\closedWith someCommitSha`, then add back the `unreleased` label.",2021-01-07T06:40:17Z
755920186,"Nice, I suggest to continue via a PR.",2021-01-07T06:41:01Z
755920302,Can you try to reproduce with our nightly insider builds? You can give our preview releases a try from: https://code.visualstudio.com/insiders/,2021-01-07T06:41:19Z
755924372,"I found a workaround: delete **C:\Users\<user>\AppData\Roaming\Code\User\workspaceStorage\<workspace_the_right_directory>**
It helped me.
https://github.com/microsoft/vscode/issues/12448#issuecomment-655001292
The problem source, as I think is also there:
https://github.com/microsoft/vscode/issues/12448#issuecomment-639278969

> For example, opening a file /some/path/file.css and /some/path/FILE.css would result in just 1 editor opening. Internally we introduced the notion of ""canonical"" URIs, meaning that the first time a file is opened, we take the casing for granted and anytime a different case is opened, we use the first one.

So, if you will rename the file, changing only the case of some letters, internally it still have the old name, until you clear VSC workspace database.
If it's a complex cross-platform problem, I suggest to refresh internal names on pressing a refresh button in file explorer.
",2021-01-07T06:52:03Z
755931986,"@isidorn , are you planning to open up the exclusion api anytime soon?",2021-01-07T07:10:49Z
755933401,"The editor font size is not used anywhere outside the editor, i think you talk about zooming?",2021-01-07T07:14:16Z
755933659,"@mohan-ys VS Code is built with Electron, which is built with Chromium. All font rendering in the editor is delegated ultimately to Chromium. If you open this test page in Chrome or the new Edge (based on Chromium), how does the text render? https://jsfiddle.net/wk0juteL/ Can you please include screenshots.",2021-01-07T07:14:52Z
755934759,":+1: Next time you notice a crash, please click `Open Developer Tools` or `Help > Toggle Developer Tools` and please paste the output here.",2021-01-07T07:17:41Z
755935903,"Yeah I do like the idea of not hiding editor actions for inactive editor groups when tab wrapping is enabled, i am happy to accept a PR in this area. ",2021-01-07T07:20:28Z
755936270,Happy to accept a PR to fix this. ,2021-01-07T07:21:23Z
755940423,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T07:31:19Z
755940535,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T07:31:37Z
755941214,"Please ask your question on [StackOverflow](https://aka.ms/vscodestackoverflow). We have a great community over [there](https://aka.ms/vscodestackoverflow). They have already answered thousands of questions and are happy to answer yours as well. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T07:33:12Z
755950080,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Breakpoint moves with copy line up/down action (#75426)](https://www.github.com/microsoft/vscode/issues/75426) <!-- score: 0.463 -->
<!-- potential_duplicates_comment -->",2021-01-07T07:54:12Z
755950509,"> (Experimental duplicate detection)
> Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
> 
> * [Breakpoint moves with copy line up/down action (#75426)](https://www.github.com/microsoft/vscode/issues/75426)

Nope, it's not ",2021-01-07T07:55:11Z
755951693,"Although the debouncing works as of 1.52.1, the lsof use is still an issue on macOS 11.1. The command that is spawned to update cwd is `lsof -OPl` which performs hostname resolution. This causes the terminal to hang for up to 1 sec every time you press enter in the terminal. The fix is to add `-n` to disable hostname lookup here:

https://github.com/microsoft/vscode/blob/f3b8f4f765c11247be91bfd4ddd0669245f60ae6/src/vs/workbench/contrib/terminal/node/terminalProcess.ts#L338",2021-01-07T07:57:47Z
755959310,"> Those are not steps. Please file a nice issue with reproducable steps. Also can you reproduce with vscode insiders
> https://code.visualstudio.com/insiders/

I found this problem will occur in multi workspace view. when one folder setting root

like this 
![image](https://user-images.githubusercontent.com/3301995/103868237-94e94780-5103-11eb-8b2d-9db1be659bde.png)
",2021-01-07T08:14:20Z
755960679,"Related: https://code.visualstudio.com/docs/editor/editingevolved#_common-questions

This is for the file/editor picker (default `Cmd+P`) and not the picker you talk about but maybe that is sufficient.",2021-01-07T08:17:30Z
755961727,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T08:19:46Z
755962141,"Oh, sorry. I got that wrong.. ",2021-01-07T08:20:45Z
755962168,"Found this thread wondering why Visual Studio Code keeps crashing my Win10  20H2 (Build 19042.685) system if use visual studio code on it yet if I use notepad++ its fine.

I'm using an Intel Graphics card, and Brave browser (forked from same as chrome, with additional security added, junkware/telemetry removed, etc) however. That fits the chrome details but I'm not seeing much discussion of intel videocards here.

Symptoms are the entire PC freezes, is unresponsive, video does not refresh and even the system clock in the lower right corner just stops, and accepts no input.  No crash to bluescreen just a full system freeze.

I have to force a power cycle to use the system again; But I lose everything unsaved in progress when I do.

Will attempt the gpu off switch and see how that goes.

Edit: This seems to help with crashes but it slows down visual studio code so much that it becomes unusable in other ways on the system I repro this with.  Its such a painful experience.
",2021-01-07T08:20:48Z
755963070,"@alexdima Below is the output of the text in Chrome Browser (I modified it a little because I installed 'Fira Code' mainly for the ligatures & also, these ligatures show 'Fira Code` accurately). 
![image](https://user-images.githubusercontent.com/54783631/103868035-572df400-50ee-11eb-8ebd-6fc4106b1e6f.png)

![image](https://user-images.githubusercontent.com/54783631/103868006-48474180-50ee-11eb-9fd1-1a1245b8b4d2.png)

Then I installed 'Fira Code' again & the result is below.
![image](https://user-images.githubusercontent.com/54783631/103868353-cc99c480-50ee-11eb-9acf-5b975692863f.png)

",2021-01-07T08:22:46Z
755963171,To _verify_ make sure that you can have a snippet like this: `Hello $UUID`,2021-01-07T08:23:00Z
755963350,"Easy for me to reproduce, I also see flickering:

![recording](https://user-images.githubusercontent.com/900690/103868965-f1c80c00-50c9-11eb-95da-d7a7a5767a0c.gif)
",2021-01-07T08:23:21Z
755964326,"I verified that the `vscode.workspace.onWillRenameFiles` event is fired for folders, so this is probably an LSP issue.",2021-01-07T08:25:39Z
755970711,Make your provider return a `DefinitionLink`/`LocationLink` (see https://github.com/microsoft/vscode/blob/0319fedae103b2d867fc02a2c9dd848a087ed8b4/src/vs/vscode.d.ts#L4971). That allows to define an origin selection range,2021-01-07T08:38:37Z
755979480,"> Any plans on adding `--disable-renderer-accessibility` to the argv.json file? `--disable-gpu` does nothing for me.

Is this something you'd consider implementing @alexdima - if I may respond to your [latest comment on this issue](https://github.com/microsoft/vscode/issues/107016#issuecomment-754576321)?

I'd find this very useful as I assume this would set the argument everytime VSCode is opened, no matter how. Personally, I constantly use the ""Open with Code"" option in the Windows Explorer context menu.",2021-01-07T08:57:14Z
755985946,Depends on #111616.,2021-01-07T09:08:58Z
755986103,"@alexdima thanks for troubleshooting with us. 

When I last tried to dig into this problem a little more, I disabled all extensions and still had the same behavior. I will go ahead and try with the bisect tool and see what happens though.

I'll attach a screenshot of the developer tools console output for reference: 
<img width=""555"" alt=""Screen Shot 2021-01-07 at 10 06 52"" src=""https://user-images.githubusercontent.com/10424353/103873517-3656a600-50d0-11eb-85cf-438c70f80b4c.png"">
",2021-01-07T09:09:18Z
755986106,Duplicate of https://github.com/microsoft/vscode/issues/109460,2021-01-07T09:09:19Z
755988135,"The problem seems to be fixed but orca does not announce the new status of the chek when I press space bar.
I need to navigate in the list of breakpoints to confirm that the check is checked or not. 
",2021-01-07T09:13:02Z
755989794,Ping,2021-01-07T09:16:11Z
755994068,"OK! This issue has led me down a rabbit hole!
After I found this workaround (to install Fira Code after every restart of the the computer). Next time I restarted the computer (not VSC but the computer itself), I searched for Fira Code in the 'Available Fonts' & it was not there !!! I have no idea why. I have installed fonts recently just for myself (not for 'all users') & they are still available even after restart 
So, I opened MS word to see if the font was there & it was there!
![image](https://user-images.githubusercontent.com/54783631/103873957-919b8f00-50f6-11eb-9f83-9c66f21df48f.png)
Then I installed it again. It - as expected - showed up in both 'available font' search & MS word.
![image](https://user-images.githubusercontent.com/54783631/103874071-b8f25c00-50f6-11eb-8748-b62fcf7dac9d.png)
This got me even more intrigued. So, I restarted again & searched the FONTS folder this time. The font was there but still did not show-up in the 'available Fonts' search.
![image](https://user-images.githubusercontent.com/54783631/103874222-eb03be00-50f6-11eb-90a5-461476e73d1a.png)
Then I searched for the font right next to it. It shows up !
![image](https://user-images.githubusercontent.com/54783631/103874434-2605f180-50f7-11eb-918c-259e6f46d7b9.png)
Then I installed it again. It - as expected - it showed up in the 'available font' search.
![image](https://user-images.githubusercontent.com/54783631/103874365-12f32180-50f7-11eb-9287-60b2e2a1b2b6.png)

Now, I don't know what it going on.
",2021-01-07T09:23:57Z
755997592,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Tooltip scrollable auto close when scrolling down quickly (#113484)](https://www.github.com/microsoft/vscode/issues/113484) <!-- score: 0.481 -->
- [Horizonal Scrolling through pointer on scroll bar (#109959)](https://www.github.com/microsoft/vscode/issues/109959) <!-- score: 0.468 -->
<!-- potential_duplicates_comment -->",2021-01-07T09:30:12Z
755998616,"Can you add a screenshot?
What is the 'Jupyter Notebook theme'? I'm not very familiar with Jupyter, so if you have steps to reproduce, that would help.
",2021-01-07T09:31:58Z
755999815,"It turns out that this seems to be what macOS does now, was able to reproduce with a simple Electron sample:

![image](https://user-images.githubusercontent.com/900690/103876361-d3ffa480-50d3-11eb-8d1f-95177969d801.png)

```ts
dialog.showMessageBox(mainWindow, {
  message: ""Hello World"",
  buttons: [
    ""Hello"",
    ""World"",
    ""More"",
    ""No""
  ]
});
```

I am not sure if there is something Electron could do, moving to Deepak.",2021-01-07T09:34:01Z
756007274,"I agree that is super weird. This might be a bug, but it could also be some security thing or some corporate user policy that might be causing this. I'm sorry, I honestly don't know.",2021-01-07T09:46:57Z
756010832,"The ""Peripherals"" view is contributed by an extension and not part of VS Code.",2021-01-07T09:53:31Z
756011028,/causedByExtension,2021-01-07T09:53:51Z
756011110,"> Add custom task

Which folder did you add the task to?",2021-01-07T09:53:59Z
756011374,"This issue is caused by an extension, please file it with the repository (or contact) the extension has linked in its overview in VS Code or the [marketplace](https://aka.ms/vscodemarketplace) for VS Code. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T09:54:28Z
756011626,"**""+"" Cheats|** @rzhao271 

1- **`to+`**
```
text-outline:0 0 #000;
```

2- **`tsh+`**
```
text-shadow:0 0 0 #000;
```

3- **`bg+`**
```
background:#fff url() 0 0 no-repeat;
```

4- **`f+`**
```
font:1em Arial,sans-serif;
```

5- **`bd+`**
```
border:1px solid #000;
```

6- **`bdt+`**
```
border-top:1px solid #000;
```

7- **`bdr+`**
```
border-right:1px solid #000;
```

8- **`bdl+`**
```
border-left:1px solid #000;
```

9- **`op+`**
```
opacity: ;
filter: alpha(opacity=);
```

10- **`choose+`**
```
Alias of xsl:choose>xsl:when+xsl:otherwise
<xsl:choose>
    <xsl:when test=""""></xsl:when>
    <xsl:otherwise></xsl:otherwise>
</xsl:choose>
```

11- **`ol+`**
```
Alias of ol>li

<ol>
    <li></li>
</ol>
```

12- **`ul+`**
```
Alias of ul>li

<ul>
    <li></li>
</ul>
```

13- **`dl+`**
```
Alias of dl>dt+dd

<dl>
    <dt></dt>
    <dd></dd>
</dl>
```

14- **`map+`**
```
Alias of map>area

<map name="""">
    <area shape="""" coords="""" href="""" alt="""" />
</map>
```

15- **`table+`**
```
Alias of table>tr>td

<table>
    <tr>
        <td></td>
    </tr>
</table>
```

16- **`colgroup+, colg+`**
```
Alias of colgroup>col

<colgroup>
    <col />
</colgroup>
```

17- **`tr+`**
```
Alias of tr>td

<tr>
    <td></td>
</tr>
```

18- **`select+`**
```
Alias of select>option

<select name="""" id="""">
    <option value=""""></option>
</select>
```

19- **`optgroup+, optg+`**
```
Alias of optgroup>option

<optgroup>
    <option value=""""></option>
</optgroup>
```

20- **`pic+`**
```
Alias of picture>source:srcset+img

<picture>
    <source srcset="""" />
    <img src="""" alt="""" />
</picture>
```

21- **`bdb+`**
```
border-bottom:1px solid #000;
```

22- **`@f+`**
```
@font-face {
    font-family: 'FontName';
    src: url('FileName.eot');
    src: url('FileName.eot?#iefix') format('embedded-opentype'),
         url('FileName.woff') format('woff'),
         url('FileName.ttf') format('truetype'),
         url('FileName.svg#FontName') format('svg');
    font-style: normal;
    font-weight: normal;
}
```

23- **`d:ib+`**
```
display: inline-block;
*display: inline;
*zoom: 1;
```
",2021-01-07T09:55:01Z
756014292,"Per the other issue I linked in the OP, they ""support Markdown without HTML tag support"".  That's... a position to take, I guess -- if I had to write an IDE I'd certainly want to farm out Markdown parsing to one of the squillion existing libraries rather than write a partial implementation myself -- but at least they're clear about it.  My concern is not with getting the tags *supported*, it's that stripping the tags should not also remove the content inside the tags.",2021-01-07T10:00:09Z
756023054,@spcBackToLife Did you see a bug in the product related to this?,2021-01-07T10:16:15Z
756025104,Can you uninstall and reinstall VS Code?,2021-01-07T10:19:58Z
756027004,"So weird, it seems keytar is the only one:

```
➜  archs find . -name '*.node' | xargs file
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/keytar/build/Release/keytar.node:                          ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/spdlog/build/Release/spdlog.node:                          ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=79e66434515226cc13ad9ee6f153da1ce837a828, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/native-is-elevated/build/Release/iselevated.node:          ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=66c9609600956add52abe37ad87ad8e05b46b0cf, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/vscode-encrypt/build/Release/vscode-encrypt-native.node:   ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=7057f9476a6ff6d6c2c548294c1fad7611bda125, with debug_info, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/vsda/build/Release/vsda.node:                              ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=17bfe6f30fec39e3bb5069ce96a807c7bded2315, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/node-pty/build/Release/pty.node:                           ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=dbf5c95305e07dc3b44c38bd92e6149943e5c869, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/native-watchdog/build/Release/watchdog.node:               ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=8b7281451991f813f2e5515b86c3ac2433fb9dc5, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/native-keymap/build/Release/keymapping.node:               ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=0dbe96b94dbeaabaa50723e06b4961269ede6d21, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/vscode-sqlite3/build/Release/sqlite.node:                  ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=82ca1a9cfd961f8a51d6226ca2326d4ae7b5fe40, not stripped
./VSCode-linux-x64/resources/app/node_modules.asar.unpacked/vscode-nsfw/build/Release/nsfw.node:                       ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=ebf10b7f37d02e129b35c6362b395bcdde641eb8, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/keytar/build/Release/keytar.node:                        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, BuildID[sha1]=5297fc4f4077850c4730db5527ea7f40de21e038, stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/spdlog/build/Release/spdlog.node:                        ELF 64-bit LSB shared object, ARM aarch64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=b3c3bc4183e4831a1214e77b3f4cc15ceda6e2fc, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/native-is-elevated/build/Release/iselevated.node:        ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=bcdf56a4adef3d2f90aa66e415117f207abcd5c9, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/vscode-encrypt/build/Release/vscode-encrypt-native.node: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=411f02c31b09c965f83df6ca59a800aac17131d6, with debug_info, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/vsda/build/Release/vsda.node:                            ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=882e2d8abd75ade35274a9128387bf9b45fe97f2, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/node-pty/build/Release/pty.node:                         ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=f8c33aadd5b48f2c213301dcfe053d8d6aa78d65, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/native-watchdog/build/Release/watchdog.node:             ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=e2041b2123a5f8a3cc31c5a227be0f3f01c2ef78, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/native-keymap/build/Release/keymapping.node:             ELF 64-bit LSB shared object, ARM aarch64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=a5c2a3faf254f95a513ef99d57471b59f8e7603b, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/vscode-sqlite3/build/Release/sqlite.node:                ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=dcccb9ce6cb8ee2381bf5771fecce5511d452a38, not stripped
./VSCode-linux-arm64/resources/app/node_modules.asar.unpacked/vscode-nsfw/build/Release/nsfw.node:                     ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]=5b49ed819f209225dd8303da1ac8ebc13619888f, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/keytar/build/Release/obj.target/keytar.node:             ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=54993d2b8de866c2d90a3d1ecb69e76d5ba1d523, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/keytar/build/Release/keytar.node:                        ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=54993d2b8de866c2d90a3d1ecb69e76d5ba1d523, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/spdlog/build/Release/spdlog.node:                        ELF 32-bit LSB shared object, ARM, EABI5 version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=c5c3f2ef92bf69e055678f6406162f466ec67ecd, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/native-is-elevated/build/Release/iselevated.node:        ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=628e0743371f036a932b424cc2937c777e8e8a9a, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/vscode-encrypt/build/Release/vscode-encrypt-native.node: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=756aac140bbfdcba597a9c9d6e764841d6e06211, with debug_info, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/vsda/build/Release/vsda.node:                            ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=01be4c3d0321b4725197477c4d33b872d74a07f4, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/node-pty/build/Release/pty.node:                         ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=0698ea68c85d9f8336060d8319d402f98aadc1e3, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/native-watchdog/build/Release/watchdog.node:             ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=315fac3a32031600644e35719e2878b874632c86, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/native-keymap/build/Release/keymapping.node:             ELF 32-bit LSB shared object, ARM, EABI5 version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=ed0539deb76f3c06321f818ace638ff7f25d6a38, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/vscode-sqlite3/build/Release/sqlite.node:                ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=ad6b5221c0f86f313ef92e96cceb38a0489935a0, not stripped
./VSCode-linux-armhf/resources/app/node_modules.asar.unpacked/vscode-nsfw/build/Release/nsfw.node:                     ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=1e523ca4b0856f64e828b8f09860e6327c7ecb8d, not stripped
```",2021-01-07T10:23:31Z
756027830,"> @spcBackToLife Did you see a bug in the product related to this?

I have develop a framework of electron, refer from vscode, I have a sence like this:

I need to connect ipc in webview preloadjs, and then when I refresh page, I need to do is :

disconnect webview ipc connection,
reconnect webview ipc connection

when i refresh a lot of times ,""disconnect"" will be done many times.

",2021-01-07T10:25:06Z
756028662,"> @spcBackToLife Did you see a bug in the product related to this?

not from vscode production, just read the vscode source , and i think here should use 'once', I am also curious about why not use once",2021-01-07T10:26:42Z
756029933,"> @spcBackToLife Did you see a bug in the product related to this?

here is source code of vscode
![image](https://user-images.githubusercontent.com/20703494/103881892-06ca8c80-5116-11eb-97ea-c917c1864e86.png)
so when I have refresh page action, it must run more then once of this 'onDidClientDisconnect'.

so, I think here should be like this:
![image](https://user-images.githubusercontent.com/20703494/103882020-31b4e080-5116-11eb-966a-dd0661fe8658.png)
",2021-01-07T10:29:17Z
756031552,"We don't use `once` because as soon as it happens, the entire machinery gets disposed.

Let me know if you eventually find a bug in the product related to this. Until then, let's leave the code since it obviously works just fine.",2021-01-07T10:32:21Z
756032038,#52855,2021-01-07T10:33:12Z
756034441,"@SneakyFish5 @DynDux given we also have https://github.com/microsoft/vscode/issues/113926 as an issue I wonder if we should revisit the editor actions toolbar altogether when tabs wrap: what if we simply treat the editor actions toolbar as a ""tab"", always being the last ""tab"" in the strip. This would:
* avoid having to use the `margin-right` hack an absolute positioning as the actions would then always appear last
* fix https://github.com/microsoft/vscode/issues/113926 by automatically wrapping these actions to the next line when space is little
* fix this issue: we could configure this last ""fake"" tab to always fill the remaining space

Thoughts?

**PS:** this solution would probably not work for when wrapping is disabled, so it has to be a custom solution only when wrapping is on.",2021-01-07T10:38:11Z
756034623,"We no longer publish ARM to this repo, those are old and likely to stay there. Do they cause any harm to you?",2021-01-07T10:38:30Z
756038054,Sorry but this was closed out of scope: https://github.com/microsoft/vscode/issues/66913,2021-01-07T10:44:53Z
756038237,file:///atlsecsrv-net-atlsecsrv-com/VirtNetWK,2021-01-07T10:45:13Z
756039558,electron issue for the webview case: https://github.com/electron/electron/issues/27211,2021-01-07T10:47:51Z
756040999,"@eamodio, about that update you on this issue: using the latest insiders version...

![image](https://user-images.githubusercontent.com/46295920/103883661-6c4a5900-50d5-11eb-8fba-1b496a91c3c5.png)

It now appears that if I stage and commit a change on the 1st project on the list, it operates as expected by not collapsing that 1st project 👍

![code-insiders](https://user-images.githubusercontent.com/46295920/103884255-38236800-50d6-11eb-8aca-0ca712dc9fd9.gif)

But when I stage a change from the 2nd project on the list (and probably all the ones after), it automatically expands the 1st project on the list 🤔

**Edit:** I forgot to upload the GIF 🤦‍♂️",2021-01-07T10:50:31Z
756042083,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Allows zoom keyboard shortcuts (Ctrl+=, Ctrl+-) to be quietly ""hijacked"" by extension shortcuts (IntelliJ IDEA Keybindings) (#110254)](https://www.github.com/microsoft/vscode/issues/110254) <!-- score: 0.536 -->
- [Add percentage for zoom in/out, don't zoom everything in/out. (#48019)](https://www.github.com/microsoft/vscode/issues/48019) <!-- score: 0.517 -->
- [\[Bug?\] zoom in-out (#70696)](https://www.github.com/microsoft/vscode/issues/70696) <!-- score: 0.491 -->
<!-- potential_duplicates_comment -->",2021-01-07T10:52:35Z
756043080,"Are there any real use cases of the current behavior? I don't understand. 

When I search the explorer pane like this, I do so to search for filenames. when I type in ""modal"", I want all the files containing the word, ""modal"" in them and not the files containing the individual letters. And if I'm not wrong I don't think anyone wants that as I can see by the number of closed issues.

So can you elaborate on how is this out-of-scope?",2021-01-07T10:54:37Z
756044745,"Hi, 

@RMacfarlane - rather the Jupyter extension team. For reference, I found multiple (duplicate) issues filed there already:

https://github.com/microsoft/vscode-jupyter/issues/3936
https://github.com/microsoft/vscode-jupyter/issues/4227",2021-01-07T10:57:45Z
756045846,"Thanks for checking. Out of scope means:

> We closed this issue because we don't plan to address it in the foreseeable future. You can find more detailed information about our decision-making process [here](https://aka.ms/vscode-out-of-scope). If you disagree and feel that this issue is crucial: We are happy to listen and to reconsider.
> 
> If you wonder what we are up to, please see our [roadmap](https://aka.ms/vscoderoadmap) and [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.
> 
> Thanks for your understanding and happy coding!",2021-01-07T11:00:01Z
756046434,You mean the extension view? Make it wider and you'll see the extension icons.,2021-01-07T11:01:17Z
756046754,"I pushed a workaround, but it is a bit ugly, I would prefer https://github.com/microsoft/vscode/issues/113801#issuecomment-756034441",2021-01-07T11:01:51Z
756046816,"What does `git branch` return in your repository, in the command line?",2021-01-07T11:01:58Z
756047140,Did you follow the contribution guide? https://github.com/microsoft/vscode/wiki/How-to-Contribute,2021-01-07T11:02:41Z
756048516,"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 -->
This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle).

Happy Coding!",2021-01-07T11:05:28Z
756049032,fyi - I have pushed a9dc6d2 which works around the aforementioned electron issue by the (discouraged) use of a default policy. ,2021-01-07T11:06:30Z
756049176,"@joaomoreno, If I click on the current branch in the lower left corner of VScode, a list of all branches appear except the master branch.

![image](https://user-images.githubusercontent.com/5120011/103885738-c43a8d00-50e0-11eb-9cc4-d36b4a5bb869.png)
",2021-01-07T11:06:50Z
756049242,"@gjsjohnmurray somehow I cannot reproduce anymore, maybe some changes I pushed today also fixed this one. Can you still reproduce running out of sources, or maybe try tomorrow?",2021-01-07T11:06:58Z
756049749,"![recording](https://user-images.githubusercontent.com/900690/103885896-fcda6680-50e0-11eb-8c9d-f2a692f16364.gif)
",2021-01-07T11:08:08Z
756049829,"I can not reproduce this with latest vscode insiders
Can you reproduce without the PHP extension using vscode insdiers 
https://code.visualstudio.com/insiders/",2021-01-07T11:08:17Z
756050223,"If you have reproducable steps that work all the time let me know and we can reopen this.
For now closing this
fyi @sandy081 ",2021-01-07T11:09:02Z
756050498,"@iamshreeram currently not on the plan, but we might do it. I do not really know, sorry.",2021-01-07T11:09:35Z
756059174,"When started with lowercase host:
```
Looking for git in: C:\Programs\Git\bin\git.exe
Using git 2.28.0.windows.1 from C:\Programs\Git\bin\git.exe
> git rev-parse --git-dir
Open repository: \\<host>\anrdaemon\Documents\<repo>
> git status -z -u
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git rev-parse <branch>
> git rev-parse --symbolic-full-name <branch>@{u}
> git rev-list --left-right <branch>...refs/remotes/origin/<branch>
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git rev-parse --git-dir
Open repository: \\<HOST>\anrdaemon\Documents\<repo>
> git status -z -u
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git rev-parse <branch>
> git rev-parse --symbolic-full-name <branch>@{u}
> git rev-list --left-right <branch>...refs/remotes/origin/<branch>
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :<repo>/includes/api.php
> git show --textconv :<repo>/includes/messages.php
> git ls-files --stage -- \\<host>\anrdaemon\Documents\<repo>\<path>\includes\api.php
> git ls-files --stage -- \\<HOST>\anrdaemon\Documents\<repo>\<path>\includes\messages.php
> git cat-file -s db7cda155b5a8180b600615c0a882ceffa108ab7
> git cat-file -s af6c2b3341881bf4eb845cd08d1001c6d8414de7
> git check-ignore -v -z --stdin
```

When started with uppercase host:
```
Looking for git in: C:\Programs\Git\bin\git.exe
Using git 2.28.0.windows.1 from C:\Programs\Git\bin\git.exe
> git rev-parse --git-dir
Open repository: \\<HOST>\anrdaemon\Documents\<repo>
> git status -z -u
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git rev-parse <branch>
> git rev-parse --symbolic-full-name <branch>@{u}
> git rev-list --left-right <branch>...refs/remotes/origin/<branch>
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git rev-parse --git-dir
Open repository: \\<host>\anrdaemon\Documents\<repo>
> git status -z -u
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git rev-parse <branch>
> git rev-parse --symbolic-full-name <branch>@{u}
> git rev-list --left-right <branch>...refs/remotes/origin/<branch>
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :<repo>/includes/api.php
> git show --textconv :<repo>/includes/messages.php
> git ls-files --stage -- \\<host>\anrdaemon\Documents\<repo>\<path>\includes\api.php
> git ls-files --stage -- \\<HOST>\anrdaemon\Documents\<repo>\<path>\includes\messages.php
> git cat-file -s af6c2b3341881bf4eb845cd08d1001c6d8414de7
> git cat-file -s db7cda155b5a8180b600615c0a882ceffa108ab7
```",2021-01-07T11:27:27Z
756060036,"This happens for a file that is outside of the currently opened workspace folder, in the above gift `package.json` is in a parent folder of the `MidIRT` workspace folder",2021-01-07T11:29:17Z
756060965,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Git log (#17936)](https://www.github.com/microsoft/vscode/issues/17936) <!-- score: 0.613 -->
- [Publish to GitHub doesn't work (#108444)](https://www.github.com/microsoft/vscode/issues/108444) <!-- score: 0.597 -->
- [git changes not showing after branch merge (#112717)](https://www.github.com/microsoft/vscode/issues/112717) <!-- score: 0.549 -->
- [Unable to change default git location in vscode (#112261)](https://www.github.com/microsoft/vscode/issues/112261) <!-- score: 0.545 -->
- [Git: Could not hash object when staging selected ranges (#58874)](https://www.github.com/microsoft/vscode/issues/58874) <!-- score: 0.533 -->
<!-- potential_duplicates_comment -->",2021-01-07T11:31:15Z
756061566,"@jvesouza thanks for trying it out, thus adding verified label.

I also tried it with Voice Over and Voice Over nicely reads the status of the checkmark once it is changed.
Maybe @joanmarie has an idea why Orca is not announcing.
On the VS Code side we properly update the `aria-checked` attribute on the element.",2021-01-07T11:32:26Z
756061830,"感谢您创建此问题！

然而，由于您没有使用英语，我们很难进行处理。如果可能，请您将此问题描述修改为英文。请您直接编辑此问题，不要提交回复或新问题。

请注意，机器翻译服务通常无法处理用于讨论软件问题所需的技术性语言，所以我们推荐您寻找一位熟悉相关技术的人来协助翻译。

如果您无法做到，没有关系。此问题已经被标记为需要翻译，等待社区成员志愿进行翻译。

---
Thanks for creating this issue!

Unfortunately, as the description is not in English, it's hard for us to work on. If possible, please edit the original issue to be in English.

In our experience, automatic translation services are not able to handle the technical language needed to effectively communicate about software issues, so we recommend finding a human translator who is familiar with our technology to help.

Otherwise, we have marked this as needing translation and a community member may be able to help out.
<!-- translation_requested_comment -->",2021-01-07T11:33:00Z
756063364,"That's very ""pragmatic"" There is also this feature request https://github.com/microsoft/vscode/issues/66162 which asks ""file references"" to become a concept in VS Code, like other language features. 

@mjbvz Is your current usage only a command to show those references? Do you have plans for more elaborate case like warning users when they delete a file that's still referenced from other files? That would be a nice platform feature and work well across languages, like css-html etc",2021-01-07T11:36:16Z
756066170,Closing. This is now done. @testforstephen please try this out with next insiders. Thanks,2021-01-07T11:42:43Z
756066392,"> Another problem is should we support truncated (or handled in the server side)?

Not sure what you mean by that?",2021-01-07T11:43:13Z
756066718,And what does `git branch` return?,2021-01-07T11:43:53Z
756068565,"@weinand Thanks.
Assigining to January to investigate more what is going on on the VS Code side
",2021-01-07T11:48:00Z
756069134,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T11:49:14Z
756069141,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T11:49:16Z
756069149,"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T11:49:17Z
756072070,"Ah sorry...

```
$ git branch
* @kleas
  develop
  fetch
  master
```",2021-01-07T11:55:55Z
756074183,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [\[Settings Editor\] Cannot shift focus back to TOC (#101959)](https://www.github.com/microsoft/vscode/issues/101959) <!-- score: 0.575 -->
- [Settings UI TOC truncates category names, could make better use of horizontal space (#79581)](https://www.github.com/microsoft/vscode/issues/79581) <!-- score: 0.54 -->
- [Accessibility: Provide better user interface for the settings screen (#94525)](https://www.github.com/microsoft/vscode/issues/94525) <!-- score: 0.476 -->
<!-- potential_duplicates_comment -->",2021-01-07T12:00:24Z
756085553,"> This looks to have been finalized in #109923

Can you please explain how to add more supported languages to this setting?
I tried to look at the changelog you posted and at the documentation but there is no example.

The setting recently changed from ""editor.renameOnType"" to ""editor.linkedEditing"" and I looked for both with no success.

I tried several parameters with ""languages.registerLinkedEditingRangeProvider"" from [this](https://github.com/microsoft/vscode/issues/109923#issuecomment-741866857) comment but none worked and I can't seem to find the correct syntax (I have version 1.52.1 as suggested but in the settings.json I see ""Unknown Configuration Setting"")",2021-01-07T12:24:37Z
756086939,"Thanks


Best Wishes！
",2021-01-07T12:27:30Z
756087895,"@jrieken Is there a way to specify snippet per filename (grep)? Setting to `*.php` would solve this particular problem. And I'm guessing there are some uses when language is common, but filename is distinct. For example you may want to have some snippets for `*.d.ts` file to overwrite some module. Currently you can do that only with `.json` files using schemas.",2021-01-07T12:29:41Z
756089624,"> registerLinkedEditingRangeProvider

Can you please explain how to use this setting?
I have version 1.52.1 and settings.json says ""Unknown Configuration Settings""
I have read the documentation for both ""editor.renameOnType"" and ""editor.linkedEditing"" but it looks like there's nothing there.

I'd like to have an example of the syntax of this setting too, I tried several but none of them matched.

An extension I use to beautify files only supports html, js and css and I managed to make it work with ""blade"" and ""php"" files as they were .html with this setting:
`""beautify.language"": {""html"": [""htm"",""html"",""php"",""blade"",]},`
Do I have to do something similar or do I just need to type the extension in a particular way?

Thanks in advance, have a nice day",2021-01-07T12:33:15Z
756089894,"(Experimental duplicate detection)
Thanks for submitting this issue. Please also check if it is already covered by an existing one, like:
- [Sanity test gulp issue on Win64 Zip release (#110040)](https://www.github.com/microsoft/vscode/issues/110040) <!-- score: 0.566 -->
<!-- potential_duplicates_comment -->",2021-01-07T12:33:50Z
756091086,"Actually this is not so trivial because currently we do not allow to click on editor actions for inactive groups, it would simply not work and rather target the other group that is active.",2021-01-07T12:36:35Z
756092636,This is now fixed. The root directory is still `CachedData` but the individual hash each cache file uses considers now the arch as well. Keeping the root directly the same helps with the cached data cleaning,2021-01-07T12:40:13Z
756093345,@KapitanOczywisty that is tracked here: https://github.com/microsoft/vscode/issues/75955,2021-01-07T12:41:50Z
756095580,"Yes you are correct my zoom was set to 1 and now -0.5 looks nice. incidentally my old font size(12) matched the font size in tab text. Now I changed font size in editor to 10 but tab font size is still bigger ~12

![image](https://user-images.githubusercontent.com/397543/103893843-f87b7100-5113-11eb-872d-98c34fceb577.png)
",2021-01-07T12:47:02Z
756098890,"Ah thanks for clarifying. Yes, we currently do not detect when a file comes back for files outside of the workspace because that would mean we had to watch pretty much the entire disk. But I pushed a fix to clear the ""deleted"" upon successful save.",2021-01-07T12:54:02Z
756099482,Hope consider it again,2021-01-07T12:55:19Z
756099806,"The described behavior is how it is expected to work. If you disagree, please explain what is expected and what is not in more detail. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!",2021-01-07T12:55:57Z
756099825,"Yes, this can happen for a brief moment because we write to the settings file, it should not remain like that but clear briefly after.",2021-01-07T12:55:59Z
756101168,"I have not seen any crashes since disabling `vscode.git` and `eamodio.gitlens` in several hours of usage. By now there would've definitely been a crash.

The experience overall has been way smoother without the git integration. It would stutter quite a lot previously. Seems like https://github.com/libuv/libuv/pull/3064 might be complete soon and hopefully this can be resolved.

Note however that I still see these in the developer tools:

```
[IPC Library: Search] Uncaught Exception:  Error: read EFAULT
    at Pipe.onStreamRead (internal/stream_base_commons.js:205:27)

ERR Request textDocument/codeAction failed with message: Cannot read .eslintignore file: /Users/andreialecu/.../.eslintignore
Error: EFAULT: bad address in system call argument, read: Error: Request textDocument/codeAction failed with message: Cannot read .eslintignore file: /Users/andreialecu/.../.eslintignore
Error: EFAULT: bad address in system call argument, read
	at /Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52031
	at /Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52325
	at Immediate.<anonymous> (/Users/andreialecu/.vscode-insiders/extensions/dbaeumer.vscode-eslint-2.1.14/client/out/extension.js:1:52690)
	at processImmediate (internal/timers.js:456:21)
```

I haven't noticed anything particularly wrong caused by them though.

These random EFAULT's have been reported on macOS in Github Desktop recently here:
https://github.com/desktop/desktop/issues/11258
https://github.com/desktop/desktop/issues/11325

(not sure if these are from arm64 or not, but they're both Big Sur - 10.16.0 seems to be the same as macOS 11)

Like mentioned in my previous comment: I also get these errors in plain nodejs apps, and I also opened https://github.com/nodejs/node/issues/36826. Not sure what's going on.",2021-01-07T12:58:38Z
756120666,Any plans to update the [yearly roadmap](https://github.com/microsoft/vscode/wiki/Roadmap) for 2021 in this iteration?,2021-01-07T13:36:40Z
754791809,+1,2021-01-05T17:47:37Z
754793988,"> Does text search work?

Nope. I don't find `src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.css` via file search and there should also be a text match in that file

<img width=""349"" alt=""Screenshot 2021-01-05 at 18 50 31"" src=""https://user-images.githubusercontent.com/1794099/103680736-e5876600-4f86-11eb-8a2c-a08b41704362.png"">
",2021-01-05T17:51:19Z
754794401,"however this works for me:

![image](https://user-images.githubusercontent.com/900690/103680868-14054100-4f87-11eb-8735-abf199e2343d.png)
",2021-01-05T17:51:56Z
754794637,"I have actually added custom width in shrink mode as part of a new PR which
has title for custom height.

Please upvote the same.

On Tue, Jan 5, 2021, 11:15 PM Benjamin Pasero <notifications@github.com>
wrote:

> There is no setting currently to control the minimum width of a tab when
> setting the tab sizing to shrink. It is hardcoded to 80px.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/microsoft/vscode/issues/70413#issuecomment-754790081>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AADBBZ223MGI2NJ3SCG6AQTSYNFZ3ANCNFSM4G5XB4KA>
> .
>
",2021-01-05T17:52:18Z
754795332,"Added primary action to dropdown. But in notifications, dropdown is getting shown on top of the button

<img width=""476"" alt=""image"" src=""https://user-images.githubusercontent.com/10746682/103680963-2ed7b580-4f87-11eb-8613-c6f5ae54b2c3.png"">

@sbatten can this be fixable?",2021-01-05T17:53:24Z
754796404,"I have something I can repro now, it works in my remote vscode repo but not local",2021-01-05T17:55:05Z
754796902,/duplicate,2021-01-05T17:55:49Z
754797056,"Who put this in .gitignore? `out*/` 🤔 

Well, I would only expect that to match from root but rg seems to apply it like `**/out*`",2021-01-05T17:56:04Z
754797170,"@bpasero , That is right. I would say, a request to remove specific sub-folders or a file from a folder in the file explorer.

Currently, vscode lets us to _Remove folder from workspace_ but it does not allow us to _remove a sub-folder_ from a folder. It allows us to _delete_ the sub-folder but not _remove_ .",2021-01-05T17:56:17Z
754800301,This feature would be great,2021-01-05T18:01:09Z
