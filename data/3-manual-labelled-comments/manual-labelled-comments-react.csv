id,Text,created_at,Emotion
309970195,It's surprising that functional components are not PureComponent by default...,2017-06-21T05:48:30Z,neutral
368877149,Speaking of workarounds. I've just added this hack to my jest snapshot tests. ReactDOM.createPortal = node = node,2018-02-27T13:38:42Z,joy
523610642,+1 on bringing back some version of this feature that enables a quick highlevel view of rerenders even for rerenders that are a result of when we update context.,2019-08-21T19:17:47Z,joy
557217372,"js return React.cloneElement(child, { innerRef: node = node ? setRefs.set(child.key, node) : setRefs.delete(child.key) }); You're passing the ref via innerRef prop. It should be passed via ref. js return React.cloneElement(child, { ref: node = node ? setRefs.set(child.key, node) : setRefs.delete(child.key) }); Edited by to fix typo.",2019-11-21T18:39:08Z,anger
586544137,This warning is absolute idiocy.,2020-02-15T02:20:54Z,anger
615871428,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 9decbb0975f2ef981437610094a4932a996924b0: |Sandbox| Source | ||| |[React]( Configuration | ",2020-04-18T13:27:27Z,anger
696081106,"I did something quite similar, Can't remember where I saw the code originally or if I rewrote something from SO I still think building this into react would be very useful. function useIsFirstRender() { const isRenderRef = useRef(true); useEffect(() = { isRenderRef.current = false; }, []); return isRenderRef.current; } export default useIsFirstRender; ",2020-09-21T12:26:45Z,fear
726995837,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit e84b363a6d419ef3b53371ecf558bfe29556de91: |Sandbox| Source | ||| |[React]( Configuration | ",2020-11-13T19:43:23Z,anger
754126769,"This is impacting user who uses mobx as their state management, as each of component should be wrapped with observer. I noticed that this problem only affect [snowpack]( project, [CRA]( are fine. When component is wrapped in observer, fastrefresh does not work.",2021-01-04T18:05:00Z,fear
754338803," sorry for the slow reply. That's a good point, let me think about it. at the very least I want to make sure whatever design we pick here doesn't clash with the possibility of doing that in the future, even if we decide not to implement it now.",2021-01-05T02:09:10Z,sadness
754494934,"Looks like this is unrelated to React and even JavaScript since the error message comes from Java. Please provide a CodeSandbox ( a link to a repository on GitHub, or provide a minimal code example that reproduces the problem. Here are some tips for providing a minimal example: <! mui template: <! react template: ",2021-01-05T08:44:52Z,fear
754540668,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320546). Thanks!",2021-01-05T10:09:55Z,anger
754542386,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 27a7be030bb51c47aead7b6c8790f8d327cc5886: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-05T10:13:22Z,anger
754549442,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,2021-01-05T10:27:59Z,joy
754600189,"With all the respect, wrapper doesn't sound like cheating, it is cheating. Tree shaking and other tools to analyze code which know only about ES6 modules semantics won't fully work with it ever. If there will be major release of React, I think it will be more beneficial for community to go with correct ES6 modules and namedonly exports, that's what versioning is about to do breaking changes if they are really necessary. If there is problem with tooling (to bundle two versions or other issue) it should be probably fixed on tooling side. ",2021-01-05T12:15:51Z,neutral
754629378," tree shaking works equally well with CJS, it's just not enabled by default in the popular bundlers, so they could already handle things without any ESM whatsoever if it was important to do so. The problem that needs fixing on the tooling side is ""treeshaking often only works with ESM by default"".",2021-01-05T13:16:21Z,fear
754663867,Will this style also might produce the same issue? export default withStyles(appStyle)(App);,2021-01-05T14:19:44Z,neutral
754716439,"Since dynamic imports exist, wellbehaved libraries are required anyways.",2021-01-05T15:43:31Z,neutral
754718201,"Putting it in another words, you just create a component, which receives isVisible prop and renders children if passed expression evaluates to true. ts import React from 'react'; type ConditionalWrapperProps = { isVisible: boolean; children: React.ReactNode; }; const ConditionalWrapper = (props: ConditionalWrapperProps) = (props.isVisible ? <{props.children}</ : <</); export default ConditionalWrapper; ",2021-01-05T15:46:24Z,fear
754721780,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 5643c33f731e22a8863cb2ea16bfb942d69f47c6: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-05T15:52:10Z,anger
754745936,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit cf267fe40f749694f8ecb4b68d1cad907cc58d03: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-05T16:30:18Z,anger
754759925," Unfortunately, I've decided to also remove the accessibility directory from the React repository for now About a year later, I'd like to ask if there's any plan or progress to bring these back.",2021-01-05T16:54:25Z,neutral
754830883,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 4972f76c2af4d3698deecbda825cd3069bf81843: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-05T18:54:25Z,anger
754834930,"The reason this was fixed is because for some reason, before, we only did the check in commitLifeCycles, and not flushPassiveEffectsImpl (see [here]( Now we always create the effect in commitHookEffectListMount, so the check is always run.",2021-01-05T19:02:05Z,anger
754841924,"In my case, the text was already rendering in the span tag. However, what worked for me is adding a key attribute to my span tag.",2021-01-05T19:15:22Z,anger
754873329,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320551). Thanks!",2021-01-05T20:14:52Z,anger
754874747,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 2e20506f4b96eb1a5e925a70873e528ebaf6e3a0: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-05T20:17:28Z,anger
754892838,Nice find! This is technically a breaking change so we should wrap it in a flag. Will turn on before 18.,2021-01-05T20:53:50Z,joy
754893133,Oh nvm it's just a warning?,2021-01-05T20:54:26Z,neutral
754932965,Tests were failing b'c we never enabled cache for experimental test renderer builds (so the hook was missing).,2021-01-05T22:10:39Z,sadness
755119524,"This is the default dom behavior, unrelated to React. [HTMLSelectElement.value]( A DOMString reflecting the value of the form control. Returns the value property of the first selected option element if there is one, otherwise the empty string. You can use [HTMLSelectElement.selectedOptions]( to get the selected options which is a HTMLCollection. See the updated example: [",2021-01-06T06:50:18Z,neutral
755138689,"I'd expect this to fail Flow without the changes to ReactNativeTypes. Also, you'll want to add some unit tests for these (React has unit tests!) You can check out the history of those files to find previous PRs I've made for examples of how to write tests",2021-01-06T07:38:32Z,neutral
755139703,"If you'd like to roll this out incrementally, you could add the Fabric implementation behind a React feature flag, and if the flag is false have it use the Paper implementation. Then you can migrate JS callsites to the new api now without waiting for the native fabric code to have that method yet. ",2021-01-06T07:41:29Z,fear
755160052,Please experiment with markdown (e.g. or pull requests (see for further documentation) on a personal repository. Opening PRs creates notifications for maintainers and everyone watching this repository.,2021-01-06T08:29:20Z,fear
755161954,Answered on StackOverflow. but I am unable to get any answer for this question from stackoverflow You can't expect a satisfying answer to your question within a day on StackOverflow. You might also be interested in existing issues:,2021-01-06T08:33:18Z,sadness
755166048,Perfectly answered in,2021-01-06T08:42:56Z,joy
755168252,Please experiment with markdown (e.g. or pull requests (see for further documentation) on a personal repository. Opening PRs creates notifications for maintainers and everyone watching this repository.,2021-01-06T08:47:47Z,fear
755171595,"Thanks for answering. Have accepted your answer . Will follow the linked issue. You can't expect a satisfying answer to your question within a day on StackOverflow. Sorry about that  , was in a bit of deadline that's why. But will keep in mind for future. Btw is there any interest towards enabling github discussions on this repo ? Because lots of issues could belong better in Github discussions. ",2021-01-06T08:54:49Z,anger
755295957,Shouldn’t we be deprecating method calls on host instances in favor of module level calls that pass an instance anyway? Why do this in two steps instead of just deprecating the calls directly in both places and add the third? You’d make people migrate to this only to migrate away later.,2021-01-06T13:22:19Z,anger
755341327,"Thanks for the report. This behavior changed in React 17 intentionally. A workaround is explained in the [React 17 Release candidate blog post]( jsx export default function Blah() { const node = useRef() useEffect(() = { const currentNode = node.current; return () = { console.log(currentNode) } }, []) return ( <div ref={node} ... </div ) } ",2021-01-06T14:47:42Z,fear
755341845,"Oh, looks like I didn't notice that. Thx.",2021-01-06T14:48:37Z,joy
755351171,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320556). Thanks!",2021-01-06T15:03:58Z,anger
755352650,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 423800ee089d1a556edae4ea827c88e494c8965a: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-06T15:06:15Z,anger
755368319,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,2021-01-06T15:31:21Z,joy
755430458,"Hey , simply add overflowanchor: none; on list element. More on this [here]( and [here]( This behavior is not related to react.",2021-01-06T17:04:33Z,fear
755571247," Shouldn’t we be deprecating method calls on host instances in favor of module level calls that pass an instance anyway? Why do this in two steps instead of just deprecating the calls directly in both places and add the third? You’d make people migrate to this only to migrate away later. Just trying to understand this does that mean we no longer want to be calling functions like ref.measure, ref.blur() etc? Are we planning to deprecate these too? What's the new way?",2021-01-06T19:35:39Z,anger
755649508,"I'm not sure what the latest API proposal is but it should be something like instead of ref.measure(...) it would be LayoutSomethingSomething.measure(ref, ...), and instead of ref.blur() it would be FocusManagerOrSomething.blur(ref).",2021-01-06T20:32:19Z,neutral
755727665," Eli's proposal is here: I will be updating this PR to remove methods from the HostComponent API, and follow a pattern similar to viewCommands.",2021-01-06T21:32:49Z,neutral
755823439," is it accurate to say that by switching from v9 to v11, in order to add support for one OS, it broke support for another OS?",2021-01-07T01:24:12Z,anger
755870429,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit f9cc0ba618dcc5aa34082e484e6d76e99127ed15: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-07T04:08:41Z,anger
755875689,Made some updates. Will add tests later.,2021-01-07T04:28:08Z,neutral
755912183,This repo is for issues with React itself. Please create this issue in the Create React App repo with a repo we can use to reproduce.,2021-01-07T06:20:08Z,fear
756038095,can you merge the fix with a feature flag? (i.e. enableable from settings) I'm having the __REACT_DEVTOOLS_GLOBAL_HOOK__ fix and I want to remove it!,2021-01-07T10:44:56Z,neutral
756139945,"No. If there was a simple fix that just needed to be merged, it would have been merged already. Both previous attempts to fix this have needed to be reverted because they've caused unexpected problems. Regardless, the fix is not something that could be enabled/disabled via a setting– because it requires changes to things like the extension manifest JSON.",2021-01-07T14:11:54Z,anger
756141270,"No? What Os was broken by the switch from v9 to v11? We haven't even released that change yet. This issue was broken prior to that upgrade. My point in mentioning it was that– beyond upgrading to the latest Electron, there isn't much we can do on our end (short of a major rewrite to move away from Electron entirely which we don't have the bandwidth for).",2021-01-07T14:14:05Z,sadness
756185455,"I'm sorry you experienced this bug!  Looks like this problem was already reported though () so I'm going to mark this issue as a duplicate and close it. If you have additional context that might help us repro this problem, please leave a comment on the other issue! Thank you",2021-01-07T15:27:25Z,sadness
756186827,I'd welcome a PR that updates the README for standalone to add a section for Debian.,2021-01-07T15:29:24Z,joy
756199638,"This is not an issue of React itself because React doesn't have any type definition for TypeScript in the repository. I think you should file the issue to which is the repository that maintains /react and /reactdom, or ",2021-01-07T15:49:27Z,fear
756208983,"The effect is using handler so it should be included in the deps array. The effect hook is not the same mental model as the lifecycle methods class components have. I highly recommend reading the blog post to understand the concept of the effect model. If you have confidence for the usage and want to keep the deps array empty, you can disable the warning by eslintdisablenextline reacthooks/exhaustivedeps ",2021-01-07T16:04:11Z,neutral
756212757,Stop using npm link and use [yalc]( if you want to save yourself hours of misery,2021-01-07T16:10:04Z,anger
756280910,Answered in,2021-01-07T18:01:27Z,neutral
756338324,"Thanks for the PR, but we generally don't take PRs that make things ""cleaner"". They very rarely help and usually tend to introduce subtle bugs. In general, we prefer verbose lowlevel code that's inlined instead of outlined helpers even when they're more legible.",2021-01-07T19:41:27Z,neutral
756339423,"Thanks for the PR! Do you know if the demo fully runs on Node 12 after this? I'm not sure how useful this is in practice since these packages won't be productionready for a while, and 14 is LTS anyway. ",2021-01-07T19:43:15Z,neutral
756357972,hey I beleive that the demo does fully run on Node 12 after this change (and the one I sent to the demo)... although to be honest I didn't test it out extensively.,2021-01-07T20:15:54Z,neutral
756366155,I would love to work on this issue.,2021-01-07T20:31:28Z,joy
756437676,we had two versions of React being installed in a monorepo. needed to use metro's blacklistRE field and alias react to root node_modules,2021-01-07T22:58:19Z,fear
756499388,Here's another similar discussion:,2021-01-08T02:03:49Z,joy
756508521,Got it. Thanks for your explanation.,2021-01-08T02:36:02Z,joy
756525895,"Intermediate thing to get you all through. My tests seem to confirm it's all good, but still, use with caution. js import {useEffect, useRef} from 'react'; const equal = (a: unknown[], b: unknown[]): boolean = { if(a === b) return true; if(a.length !== b.length) return false; return a.every((e,i) = Object.is(e,b[i])); }; export const useEffectVariadic = (create: () = (() = void)|void, deps: unknown[]): void = { const prevDeps = useRef<unknown[]([]); const count = useRef<number(0); if(!equal(prevDeps.current, deps)) count.current++; prevDeps.current = deps; useEffect(create, [count.current]); }; // usage like normal useEffect useEffectVariadic(() = { console.log(""hi""); }, variableLengthArrayOfStuff); ",2021-01-08T03:35:19Z,fear
756550957,Thanks for the report. I was unable to reproduce this issue with codesandbox ( It seems to me that this is not caused by React but your build tool (e.g. createreactapp or next.js or a custom webpack config). I recommend that you file an issue in the repositories responsible for those tools. Be sure to include a minimal reproducible example.,2021-01-08T05:15:03Z,fear
756797963,1. It worked the first time I ran it. 2. Then I added useRef and console for debugging (don't think is related to the but might help) Unfortunately these steps aren't going to help us repro the bug being reported here. Can you please provide a link to the code that you're running when this happens?,2021-01-08T14:56:28Z,fear
756829931," there are only 5 calls to fs promise APIs that were causing issues with the built in flow definitions. I've pushed f49efc8 which ignores types for those 5 calls so we can remove all the custom type information related to fs / promises and rely entirely on the builtin types elsewhere. Unsure if this approach is preferable, feel free to drop the commit and force push if you don't like the approach.",2021-01-08T15:52:16Z,fear
756919985,Sorry closed it by mistake. I added repo link and some more steps to reproduce it.,2021-01-08T18:20:55Z,sadness
756920903,"Good explanation , thanks!",2021-01-08T18:22:38Z,joy
756922653,Thank you. That would be very helpful.,2021-01-08T18:26:06Z,joy
756925267,"Do you mean the messenger.com homepage? That works for me. <img width=""987"" alt=""Screen Shot 20210108 at 1 31 13 PM"" src="" ",2021-01-08T18:31:36Z,neutral
756926524,"Hey , if you can't reproduce this without testinglibrary, I recommend tracking this in the issue you created there in If this ends up being a bug in React let us know.",2021-01-08T18:34:00Z,fear
756927241,"It just started working again for me, yet now it shows up with ""Anonymous"" under the compiler section, which is different then what I used to see. Thank you for your help and quick response! On Fri, Jan 8, 2021, 10:31 AM Ricky <notifications.com wrote: Do you mean the messenger.com homepage? That works for me. [image: Screen Shot 20210108 at 1 31 13 PM] < — You are receiving this because you authored the thread. Reply to this email directly, view it on GitHub < or unsubscribe < . ",2021-01-08T18:35:21Z,fear
756927727,Also can't repro and React doesn't really touch CSS files directly says. Closing until there's more information that shows this is a React issue.,2021-01-08T18:36:24Z,fear
756935091,No sweat!,2021-01-08T18:52:57Z,joy
756989204,"Encountered this issue while using an SVG image with many paths (in my case the 4631 paths are rendered ok, but when I add one more I got the dev tools error). react_devtools_backend.js:5158 Uncaught RangeError: Maximum call stack size exceeded at shouldFilterFiber (react_devtools_backend.js:5158) at mountFiberRecursively (react_devtools_backend.js:5820) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) I import the svg using: import { ReactComponent as Map } from './map.svg'; ",2021-01-08T20:43:10Z,fear
757056793,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0e9ccb78c131f74faf7d2a7102d792170a3b653c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-09T00:10:08Z,anger
757067862,how about set esModule to true ?,2021-01-09T01:02:05Z,neutral
757073240,"Your issue may be because your __html top most element is a <p tag, and you are using dangerouslySetInnerHTML on a <p tag. I also ran into this issue, and found that using a outermost <span tag fixes the issue.",2021-01-09T01:33:54Z,anger
757108647,;) Is this working with ReactJs or NodeJs?,2021-01-09T07:09:58Z,neutral
757120538,I'm not sure but it could be here because of IE11.,2021-01-09T09:11:31Z,sadness
757122454,I'm not sure but it could be here because of IE11. I think the function might have made the compatibility for IE11.,2021-01-09T09:28:54Z,sadness
757129105,Thanks for the feedback. I will close this,2021-01-09T10:29:38Z,joy
757349019,"style={{ ""bordercolor"": ""black"" }}, also solves the problem",2021-01-09T18:37:30Z,neutral
757360324,"Since these are all subjective nits that don't seem to alter or clarify the original meaning, I'm going to close. But thanks for your suggestions.",2021-01-09T20:07:30Z,sadness
757370118,"In this instance yes, however the behaviour wanted is to actually ""unset"" the CSS variable, having the border change to black is merely the effect of unsetting.",2021-01-09T21:31:12Z,anger
757401807,"Can you reproduce this issue with React only (not using Gatsby)? If not, then it's probably a Gatsby bug. Since you've filed it as a Gatsby bug, I suggest closing this issue (unless you're able to reduce the repro to be React only).",2021-01-10T02:29:18Z,fear
757406524,"I have got the same error. My problem was the manual setting this.updater = null in my class constructor, but when I renamed it, problem solved.",2021-01-10T03:20:28Z,anger
757417073,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320567). Thanks!",2021-01-10T05:04:54Z,anger
757417397,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit faa4481c2da601658e7d3242df6a139654964492: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-10T05:07:07Z,anger
757443631,"Issue with Gatsby and hydration, I will close this.",2021-01-10T09:17:08Z,joy
757530657,"Thanks for your work, but these benchmarks for an isolated function without context are often [misleading]( Happy to revisit if you can show that this function is the bottleneck in this code.",2021-01-10T19:33:00Z,joy
757531814,"Hey , thanks for taking time to write out this proposal. Isn't this what [React.memo]( does already?",2021-01-10T19:41:51Z,anger
757660578,"Thanks for the report. As you already discovered, this issue was already reported in createreactapp where it was identified that the issue is with ( I recommend opening an issue in as this issue is not actionable from within the React repository. A fix or workaround is only viable from the createreactapp or optimizecssassetswebpackplugin repository.",2021-01-11T06:52:46Z,fear
757734259,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320571). Thanks!",2021-01-11T08:45:20Z,anger
757738994,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 6763a1cb0dfa5f2783c8cd88b294f9d6807f36f1: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-11T08:48:44Z,anger
757812415,"Thanks for the detailed report with reproduction! If I understood it correctly then you're dispatching in the reducer. I would consider calling dispatch in a [reducer a sideeffect which is not allowed in React]( I think you need to wrap the dispatch and call the middleware when you want to dispatch not when you're ""reducing"".",2021-01-11T09:41:53Z,fear
757813660,Please experiment with markdown (e.g. or pull requests (see for further documentation) on a personal repository. Opening PRs creates notifications for maintainers and everyone watching this repository.,2021-01-11T09:42:43Z,fear
757819208,"Thanks for the report. It's mistakenly reporting warnings thinking the tests update the react state, but we don't. It's not clear from the code you posted that the code isn't doing any state updates. Could you reduce this as much as possible so that we end up with a single test and every bit of component code visible in the repro? Otherwise it'll be very hard to identify how that false positive was produced.",2021-01-11T09:46:17Z,fear
757854268,"Could you clarify what's a react state update in this context? Every single test throw this warning, so any of them will be a good place to experiment. I can make a repro with the smallest possible code for easier understanding too, I'll do that now.",2021-01-11T10:18:26Z,fear
757858260,I've updated the description and added a proper reproduction branch/PR on my own repository.,2021-01-11T10:25:48Z,joy
757868321,"React.memo can't prevent _unmountandmount_ of HeavyComponent. jsx const HeavyComponent = React.memo(() = { useEffect(() = { console.log(""mount!"") }, []); return <spanhi</span }); If HeavyComponent is implemented in this way, every time state in C changes, we'll see ""mount!"" message.",2021-01-11T10:45:42Z,fear
757871223,never noticed it was possible to edit the keys. :) Would something like doubleclicking the key to make it editable be better? Looking at the sources tab in Chrome it is not possible to edit a variable name there when debugging. The same goes for the debug panel in VS Code. Both of them supports collapse/extend when clicking the keys. In Chrome you doubleclick on the value to edit it; In VS Code you can double click on either key or value to edit the value.,2021-01-11T10:51:32Z,fear
757888921,"Why not to simply expose functions like renderA and renderB instead? Or you can expose default props for each variant: javascript function Cmp() { const defaultProps = state ? defaultPropsA : defaultPropsB const props = { ...defaultProps, customProp: ""foo"" } return <HeavyComponent {...props} } Or pass a prop that denotes specific variant javascript function HeavyComponentOfType({ type, ...props }) { switch (type) { case ""A"": return (<HeavyComponent someProp=""true"" {...props}); case ""B"": return (<HeavyComponent someProp=""false"" {...props}); default: (() = throw new Error('Unknown type'))() } } ",2021-01-11T11:24:37Z,anger
758055669,"The repro case you've provided isn't sufficient to trigger the error you've reported. Here's a Code Sandbox: Can you modify it so the bug can be reproduced? By the way, you are not removing the ""mousewheel"" event listener in an effect cleanup function, which will be expected to cause a problem after the component unmounts.",2021-01-11T16:09:11Z,anger
758065931,"I have the same issue, too. It's very annoying to get this warning any time I type useEffect() in VS Code. <img width=""478"" alt=""Screenshot 20210111 at 17 23 36"" src="" Thanks for fixing this!  ",2021-01-11T16:25:05Z,anger
758196041,how did you fix this issue?,2021-01-11T20:13:58Z,anger
758198953,Thanks for the fix!,2021-01-11T20:19:13Z,joy
758199230,This was caused by a bug in scheduler that was fixed in . I wouldn't guess it's related to what you're seeing (if you're seeing a bug in a product test).,2021-01-11T20:19:42Z,fear
758288071,"3rd party libraries are outside of my direct control so I wouldn't want to be barraged by warnings I can't do anything about. The only thing to do for 3rd party library warnings is to wait and see if there'll be a fix or switch the library for an alternative (assuming a suitable alternative exists). The other issue is that [strict mode seems to break functionality]( I'd love to keep using strict mode, but having to manually include every component except for the one component isn't very practical (at least for me).",2021-01-11T23:25:18Z,fear
758294422,Going to land incrementally,2021-01-11T23:42:52Z,neutral
758296882,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit e973623daa139e93d94840e3c09aedb6fc1e0c90: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-11T23:49:33Z,anger
758298335,How is this stale? Something doesn't work. That's called a bug.,2021-01-11T23:53:39Z,neutral
758333581,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 4e7e36cbfdaac82cebdc59db601ff906483559b7: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-12T01:32:35Z,anger
758426215,"Close this issues because it's intended feature. + I changed to like this js const actions = { increase: () = { middleware({ type: ""INCREASE"", payload: 1 }); return dispatch({ type: ""INCREASE"", payload: 1 }); }, substract: () = { middleware({ type: ""SUB"", payload: 1 }); return dispatch({ type: ""SUB"", payload: 1 }); } }; ",2021-01-12T06:02:56Z,fear
758705302,"Hey , thanks for submitting. We only disable the console in the second call, you should still see logs from the first call. Starting with React 17, React automatically modifies the console methods like console.log() to silence the logs in the second call to lifecycle functions. If we didn't do this, the console would contain duplicate messages so we made the tradeoff to disable it in the second pass. This can have side effects, which we offer a [workaround for](",2021-01-12T14:48:09Z,fear
758708946,"Can confirm this will happen in the long term (React 19+), but there's no formal timeline. We'll give a fair amount of lead time before making the change.",2021-01-12T14:53:53Z,joy
758714490," The other issue is that strict mode seems to break functionality. To me, that indicates that Grid has a bug and StrictMode is making the bug's behavior occur in a reproducible way. That's one of the main purposes of strict mode and how it works.",2021-01-12T15:02:41Z,fear
758748322,"Thinking about this more, shouldn't this be allowed: function Component1() { try { useHook(); } catch { // ignore catch } return <div /; } ",2021-01-12T15:48:43Z,fear
758760934,"Hi, I had this bug while trying to export a functional component upon declaring it. export default Map = () = {...} would fail, while: const Map = () = {...} then: export default Map; would work like a charm! I don't know if there is any general provision against exporting a component upon declaring it, because it works fo me in other situations. If so, I would love to learn about the reason. I'm using: ""react"": ""16.13.1"", ""reactnative"": ""0.63.3"",",2021-01-12T16:07:46Z,fear
758769735,"I'd agree regarding consistent usage for builtins, but I think it might be confusing if some hooks are ""valid"" in a trycatch and others aren't (should a hook that just wraps a builtin be allowed? what if we call a builtin after a custom hook?). I don't have a strong preference either though. Regarding the example: I don't think this should be allowed. If useHook throws internally because, e.g., we're accessing something on a null'd useContext field, we'd exit useHook early/conditionally before calling any remaining hooks in it.",2021-01-12T16:21:08Z,neutral
758819304,Hey thanks for the explanation. You actually highlighted the underlying issue I am having! I'm trying to write a child reconciler right now and eventually discovered the existence of the two passes. Would you be able to direct me to the design/intent for this twopass approach or maybe how to disable it for childreconcilers in the tree?,2021-01-12T17:33:16Z,joy
758841955,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 3ed789b477f73a6afc70f591aacb658648dc0f55: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-12T18:11:49Z,anger
758893404,"Yea, I understand that, which is great for the author of the 3rd party lib, but not much I can do about it other than disable react strict mode for my entire app :) ",2021-01-12T19:46:17Z,sadness
758894862,Which is probably what you should do (at least for now). StrictMode is providing a valuable signal in this case: the library you're using in your application is probably not going to work well in concurrent mode.,2021-01-12T19:49:06Z,neutral
758964737,isn't that true whether or not the try/catch is used?,2021-01-12T20:48:47Z,fear
758970285,"Sure! [Here's]( the PR adding the double render in strict mode, [here's]( the issue that inspired it, and [here's]( the PR for ignoring the second log.",2021-01-12T20:52:17Z,anger
759252976,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320578). Thanks!",2021-01-13T07:08:45Z,anger
759255012,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0d13591d0d5d22456275fc257759fb0d170113c8: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-13T07:13:23Z,anger
759255846,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 33ef48fde1c924ac8b8901dd830600ad68ccb105: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-13T07:15:21Z,anger
759494337," This turned off the rule for me, and I'm able to keep my config as well ",2021-01-13T14:44:48Z,anger
759647199,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 6ea9ed6922859d940a37cd33f3cce4bfd8498d06: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-13T18:50:29Z,anger
759696136,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 17ec8b4672db4ca42942b4b70ffd2ac9e230e850: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-13T19:45:06Z,anger
759733634,I think this issue has resurface itself in reactdom.13.1 which pulls scheduler.19.1,2021-01-13T20:54:32Z,neutral
759840565,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit ed273c2594ac85e679deb593b2f31301a5993b6f: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-14T00:18:25Z,anger
759916294," I have figured out the issue in my code. Before: // the issue here is that I mutate the quantity value. cart.purchases[index] = { product: action.product, quantity: cart.purchases[index].quantity + 1, }; After: // I was mutating purchases and now increment its quantity in an immutable way: const incrementPurchasesQuantity = (purchases: Purchase[], index: number) = { return [ ...purchases.slice(0, index), { ...purchases[index], quantity: purchases[index].quantity + 1 }, ...purchases.slice(index + 1), ]; }; cart = { shop, // this is another field in cart, ignore it in this case purchases: incrementPurchasesQuantity(purchases, index), }; Hope it helps. ",2021-01-14T04:23:40Z,anger
759929102,"I think the same issue is happening to me: react_devtools_backend.js:5158 Uncaught RangeError: Maximum call stack size exceeded at shouldFilterFiber (react_devtools_backend.js:5158) at mountFiberRecursively (react_devtools_backend.js:5820) at mountFiberRecursively (react_devtools_backend.js:5871) at mountFiberRecursively (react_devtools_backend.js:5871) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) at mountFiberRecursively (react_devtools_backend.js:5880) I'm rendering (among other things) about 10k very small react elements jsx function PlaceholderRow() { return ( <tr className=""candidaterow"" <td colSpan=""10""</td </tr ); } React Developer Tools 4.10.1 (12/4/2020)",2021-01-14T05:07:50Z,fear
760003021,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit e522991c4172021e5d46c9ff4c3829eff2f57b0d: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-14T08:01:06Z,anger
760081891,"Thanks for the reproducible example! You're logging twice: 1. console.log(""roo""); logs ""roo"" 2. console.log(ref.current.say()); which logs the return value of say() which is undefined so you log undefined In the title you're saying ref.current is undefined sometimes but in your repro ref.current.say() would crash if that would be the case. The expected behavior aways get roo diff say() { console.log(""roo""); + return ""roo"" } I don't see how this is related to React.",2021-01-14T09:44:33Z,fear
760083394,Thanks for the report Error happens while trying to use the profiler on my React app on Chrome Could you elaborate a bit more on this point: 1. Does this happen with every app or just your app? If it only happens with your app can you reduce this to a minimal example and share with us? 2. What exact steps in the profiler lead to this error?,2021-01-14T09:47:16Z,fear
760087939,"Thanks for the report. This looks familiar to <script src="" process.env.NODE_ENV==='development'?'development':'production' %.min.js""</script There is no development.min.js. You're probably never hitting this branch in the ternary and always use the production bundle. Mixing the React production bundle with the JSX dev bundle is already identified as the cause of Maybe your NODE_ENV isn't set at all? Usually the dev/prod flags are checked by process.env.NODE_ENV !== 'production'. Could you share a cloneable repro that I can tinker with?",2021-01-14T09:55:56Z,anger
760137511,"This should be reopened! The explanation here why this issue is closed is definitely wrong! Yes there is a problem with standards compliance. But if standard compliance would be the reason for this issue, it would fail in dev mode, too! That's because the browser is always in production mode, whether react is in dev or not! So there is definitely a fixable bug in react causing the dev mode to work different from production! ",2021-01-14T11:28:03Z,fear
760179266,"This is old Chrome bug, I just open for it.",2021-01-14T12:55:27Z,neutral
760208457," (As a side note, I think we should start preparing semver releases using the preparereleasefromci script, too, and get rid of preparereleasefromnpm. I think downloading from npm was a neat idea originally, but because we already run npm pack before storing the artifacts in CI, there's really not much additional safety; the only safeguard it adds is the requirement that a ""next"" release must have already been published.) What's the main motivation for this change? Seems like that's a nice safeguard, though it's admittedly not totally necessary. What additional benefit do we get from publishing from CI?",2021-01-14T13:50:24Z,neutral
760248754,"Thanks your debugging. As read your express and rewrite my example code, I thank it may be other issue. My opinion of this report is some times I call ref.current.foo() as say, ref.current.say() , and got null or undefined. I can understand the logic of this issue, the ref.current has been reassigned to the default state. maybe anther component’s rerender cause it. I’ll debug on my code first. So, let me close this issue, and say thanks again. ",2021-01-14T14:56:43Z,fear
760297958," What's the main motivation for [getting rid of the prepare from npm script]? Seems like that's a nice safeguard, though it's admittedly not totally necessary. What additional benefit do we get from publishing from CI? Not much other than fewer things to maintain, or accidentally subtly break.",2021-01-14T16:13:10Z,fear
760298266," and others, please merge it, I also want this feature;) Thanks! 1,5 years, why haven't merged?",2021-01-14T16:13:39Z,joy
760302146,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0602ce5ede4cdc0b951c4d684418961c0505002b: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-14T16:19:43Z,anger
760322851,"If it helps anybody, this is how I solved it in my event handler event.relatedTarget?.click()",2021-01-14T16:52:38Z,fear
760347808,Reopening since the [PR that would implement this feature]( is still open.,2021-01-14T17:33:23Z,fear
760430276,RESOLVED: The issue was caused by /plugintransformreactconstantelements behaving unexpectantly. Removing this package resolved the issue.,2021-01-14T19:37:25Z,joy
760688279,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit d75105b7747cf2d90e1a7ccc2c298ab5da2f2438: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-15T06:41:27Z,anger
760700221,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit e35a7ee273098632896b3bef08d9922ad89a248c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-15T07:10:13Z,anger
760788564,"I'm running into the same issue as above. I have a stateful nonReact class for API accesses that I pass around the app, and I define a useFetchAPI() hook function inside of it that I only call from function components. It would be nice to not require adding explicit comments to disable ESLint for those lines.",2021-01-15T09:46:56Z,joy
760816987,Duplicate of,2021-01-15T10:35:34Z,neutral
760909367,Is the goal for this to eventually support wwwmodern and wwwclassic too?,2021-01-15T12:17:48Z,joy
760932400,"Hello, Your explanation, for the most part, makes total sense. I definitely understand in principle now that I set myself up for an infinite loop with the way that I structured RenderLogo. That said, I do have one final question at this point. Why does setting a variable in the way that I did trigger a rerender of the screen? That's ultimately my biggest source of confusion at this point. Thanks again for your help!",2021-01-15T13:09:06Z,fear
760964122,"Ah, okay. That makes total sense. Thanks for the detailed explanation!",2021-01-15T14:11:27Z,joy
761019442,"Seems suspicious that it's only discovered many months after the 16.14 release. I'd bet that something is wrong with the polyfilling, but I don't know how exactly. The symptom appears to mean that when react is initialized, Symbol polyfill is not yet there, but when reactdom is initialized, the Symbol polyfill has already run. This would cause them to not recognize each other. Can you check if this is correct, and why this might be happening?",2021-01-15T15:47:23Z,fear
761020349,"Check the compiled code. I wonder if TS is inserting an import to react/jsxruntime _before_ other imports, which would cause the polyfill to run too late.",2021-01-15T15:48:40Z,fear
761035847,"You're right, there is a jsxruntime before the polyfill import (if I read the minified file correctly), however it does not appear to be TS related as I have the same problem when creating another project using CRA but skipping the typescript template this time. ![image]( This is from the nonTS version ☝️ I do agree with you that it's really strange that it's taken this long for the problem to surface though I've spent a good part of the day googling without finding anyone else having the same problem (in recent months) 🤷 ",2021-01-15T16:15:17Z,anger
761046228,"All tests pass now except for ""_should poll for updates for the currently selected element_"" (in inspectedElementtest). That one's interesting because it seems like it _should_ be passing, except the transition+refresh that get scheduled never gets rendered. Will dig in more this afternoon.",2021-01-15T16:33:57Z,fear
761069222,"So the easy workaround for now is to separate the file where you load the polyfill and the file where you use JSX. js import 'reactapppolyfill/ie11'; import 'reactapppolyfill/stable'; import './renderApp'; // Call ReactDOM.render here The upstream solution is to move the order of the imports, I think. I.e. make the transform put the JSX import last. Can you file an issue in Babel to discuss this?",2021-01-15T17:15:37Z,neutral
761069533,Going to close it here since the issue is not something we can fix in the _React library_ but it can be fixed in Babel and TS.,2021-01-15T17:16:11Z,fear
761076161,We had a previous report in which we moved to The fix was merged but is not released yet. So the next release of /plugintransformreactjsx should fix this.,2021-01-15T17:28:41Z,sadness
761194893,"I'm sorry you experienced this bug!  Looks like this problem was already reported though () so I'm going to mark this issue as a duplicate and close it. If you have additional context that might help us repro this problem, please leave a comment on the other issue! Thank you",2021-01-15T21:00:02Z,sadness
761195954,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 6bc4eb649f5bef91c7fba97bbdd9f3ce38e1a1d6: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-15T21:02:38Z,anger
761197639,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit ae89c8afcf420edd9ab8b9f9f7b2aff113da882c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-15T21:06:46Z,anger
761213755,Okay. That test is still not great and I'd love to get input on how to resolve it. Otherwise I think this PR is ready for another set of eyes!,2021-01-15T21:42:32Z,fear
761221023,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit d6d2baa4b65618e8a3e7bec81761175caa0458bd: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-15T22:00:22Z,anger
761430627,"This really does not need to be added to React, at all. It can stay in userland.",2021-01-16T05:13:08Z,anger
761591072,"The code above looks overengineered to me. I’d recommend checking out this article: [Tidy TypeScript: Avoid traditional OOP patterns]( You can also check out how [apolloclient]( or [reactquery]( are implemented. In short, they have classbased stateful cores with clean classfree react hooks around them.",2021-01-16T16:24:59Z,fear
761599847,I am working on a burshable parallel coordinates graph with d3 v6 in react. I have the exact same issue: Attempted import error: 'event' is not exported from 'd3selection' (imported as 'currentEvent').,2021-01-16T17:16:02Z,fear
761600570,okay. 1 minute later I appear to have found an answer: like written in [this article]( let selected = d3.brushSelection(this); should fix the problem,2021-01-16T17:20:49Z,joy
761602220,"Still an issue, although less interesting the older it gets (e.g. we are dropping support for IE11 in a few months)",2021-01-16T17:31:57Z,neutral
761716728,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit e1192f430a788359feb35471e301861af0e188d1: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-17T02:16:12Z,anger
761803268,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320605). Thanks!",2021-01-17T12:21:15Z,anger
761803612,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit b8a28f67cd57ae6f6d047f5b8f25592ee954a912: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-17T12:23:40Z,anger
761808446,Just hit this warning and realized that I actually do want to have undefined as the initial value otherwise how does the placeholder het rendered? The input box uses placeholder to render in case the initial value is undefined and setting the value to anything else stops the placeholder string from rendering.,2021-01-17T12:58:34Z,fear
761823586,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 09b8fa9685a97076a78a24fc72ee4cbb5049af7c: |Sandbox| Source | ||| |[React]( Configuration | |[React (forked)]( PR | ",2021-01-17T14:44:24Z,fear
761853351,"Hi ! Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign at < If you are contributing on behalf of someone else (eg your employer), the individual CLA may not be sufficient and your employer may need to sign the corporate CLA. If you have received this in error or have any questions, please contact us at [cla.com](mailto:cla.com?subject=CLA%20for%20facebook%2Freact%20%2320607). Thanks!",2021-01-17T18:01:55Z,anger
761853843,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0d75def6353b03075952e218af5db5b160b69280: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-17T18:04:34Z,anger
762065560,Ohh. Why didn't you mark this in the documentation for StrictMode?,2021-01-18T08:08:55Z,anger
762197249," My understanding here is that the agreed solution for this is to introduce defaultMuted to be consistent. Do you think this could be a ""good first issue"" to tackle by looking at other default props or there is more than that? Is somebody already working in that direction?",2021-01-18T11:46:09Z,anger
762387373,"Sounds like a local issue considering: error An unexpected error occurred: ""registry.npmjs.org/react: errorPEM routines:get_name:no start line"". info If you think this is a bug, please open a bug report with the information provided in ""C:\Users\nadia\Desktop\MERN Stack\tinderapp\yarnerror.log"". This indicates that you should open a bug report in ",2021-01-18T17:35:23Z,fear
762388825,Sounds like this was also requested in Is there anything different between these two issues?,2021-01-18T17:38:52Z,joy
762438985,Seems exactly this. I haven't found it by search's I github (was not sure about what to type) Thanks I close it,2021-01-18T19:40:53Z,fear
762443635,"This doesn't sound like a bug. Since iframes are sandboxed from the parent page you shouldn't be able to access the parent page from an iframe. Going to close, but if you create a codesandbox reproducing the issue I'll take a closer look.",2021-01-18T19:53:25Z,anger
762444243,Thanks but Node 16 is still pending and we'll want to confirm all our dev workflows work before enabling it.,2021-01-18T19:55:09Z,joy
762445175,are you able to reproduce this without Hookstate to rule out Hookstate as the source of the issue?,2021-01-18T19:57:45Z,neutral
762446261,"As the error message states, there are three common usererrors that can cause this to happen. Closing as there is no code sample and the stated behavior works as expected. if you still believe this is a bug in React and not in your code, please provide a codesandbox that reproduces it and I'll take a look.",2021-01-18T20:00:37Z,fear
762451178,"Hey , thanks for the suggestion and tests. Let's leave this in userland though.",2021-01-18T20:13:28Z,joy
762460790," Using React.useState doesn't cause this issue. I wouldn't have opened an issue for this if it wasn't for the fact that the owner of hookstate mentioned [never having come across this error before]( The crash is somewhere within the devtools. And I think it is relatively recent issue as I have not seen it before and I am sure I used more than one state hook in many places. So yes, this is somewhat of a Hookstate issue but it wasn't present in a previous version of React Dev Tools acording to the owner of Hookstate.",2021-01-18T20:38:33Z,fear
762483494,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit fa037cf70f7a556c24516393acd310f5cddbd8a4: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-18T21:44:33Z,anger
762484276,"Note our whole approach to ""how to not fire events while disabled"" seems flawed and there's a bunch of bugs related to it. Just a note to whoever looks at this again to investigate it deeper than the latest symptom. ",2021-01-18T21:46:56Z,fear
762502731,"Confirmed. do you want to put in a PR to fix it? You should be able to just change newChild to Object.prototype.toString.call(newChild) in the three or so places that this error is thrown. That change would result in this message: Objects are not valid as a React child (found: [object Temporal.ZonedDateTime]). If you meant to render a collection of children, use an array instead.""",2021-01-18T22:50:28Z,anger
762503405," does Hookstate use React Hooks under the hood? If so, this issue should be reproducible with vanilla React. If not, and Hookstate is not using React, then it is not supported by React DevTools.",2021-01-18T22:53:03Z,fear
762506540,"Hey , thanks for the suggestion. You can set the initial value of the state to the default value you want in a controlled component. If defaultValue was allowed, then it would violate the ""single source of truth"" aspect of controlled components because there would then be two sources of truth for the value.",2021-01-18T23:04:45Z,joy
762507198,it is indeed using React Hooks under the hood. ![image]( And I tried reproducing it with React Hooks and no errors popped up.,2021-01-18T23:07:06Z,fear
762511949,"I'm sorry you experienced this bug! Looks like this problem was already reported though () so I'm going to mark this issue as a duplicate and close it. If you have additional context that might help us repro this problem, please leave a comment on the other issue!",2021-01-18T23:26:20Z,sadness
762513604," thanks for the info! I'm going to close this until there's a vanilla React reproduction case since, as you said, this works when using just React hooks.",2021-01-18T23:33:27Z,anger
762524088,It seems like I do not have permissions to reopen it. Could you please reopen it?,2021-01-19T00:13:39Z,neutral
762533163,"Does using useMemo on _blockA_ and _blockB_ child components from the first example, prevent its rerender?",2021-01-19T00:47:03Z,fear
762550193,Concise version of this bug is opened:,2021-01-19T01:52:01Z,fear
762550726," thanks for the detailed information, I'll reply on the new issue.",2021-01-19T01:54:05Z,joy
762551561," thanks for submitting, continuing the discussion from It's very common for stack traces to point to React internals where the issue is sourced in user code. Since you're the expert of the way your library works, can you strip down the example to use vanilla React?",2021-01-19T01:57:15Z,fear
762554475," Does using useMemo on _blockA_ and _blockB_ child components from the first example, prevent its rerender? No. That memoizes the JSX and can have a similar effect to memo. But it doesn't provide any sort of unique ID to the tree and React will not move the tree when it changes parents.",2021-01-19T02:08:00Z,fear
762555210,"Have you seen the code in the demo repo? I stripped down the example to just that: tsx export function useState() { React.useState(0); React.useEffect(() = { return () = {} }); } This is vanilla react, there is nothing left from Hookstate really. And this hook causes the crash if used twice in a component. I can not make it smaller than this. Is it good enough?",2021-01-19T02:10:50Z,fear
762556457,"Here is the complete reproducer in 16 lines of vanilla react code: tsx import React from 'react'; function useState() { React.useState(0); React.useEffect(() = () = {}); } function Counter() { useState(); React.useState(0); return <divOpen React Dev Tools Components panel, click on Counter component and observe the crash in the logging console.</div; } export default Counter; ",2021-01-19T02:15:33Z,fear
762558174,I have updated the original description too. There is nothing left from Hookstate in the above 16 lines of vanilla react code.,2021-01-19T02:20:25Z,sadness
762558516,Committed the same code sample to the demo repository now.,2021-01-19T02:21:30Z,anger
762561214,"Issue reproduced, and it's a naming conflict? Renaming the custom hook to useMyState seems to work. ",2021-01-19T02:30:35Z,anger
762561628,"Maybe naming. But devtools should not influence how I name my functions, right? Compiler is happy with this name, so why not...",2021-01-19T02:32:09Z,joy
762561778," thanks a ton for following up and reducing the code down. The issue is that DevTools errors when a custom hook is named useState. If you rename the custom hook in your example to useStateCustom, DevTools does not error.",2021-01-19T02:32:45Z,anger
762562606,", sure, but I can not rename the hook as it is the interface of the public library and I could not find better name originally. Hookstate.useState is in the different module and naming space than React.useState. It does not cause any conflict for the compiler and bundler, why should it for devtools. Hookstate.useState is the supercharged version of React.useState, hence named identically as it is nearly plug and play replacement.",2021-01-19T02:36:09Z,neutral
762563868,"Yeah, I agree, it probably shouldn't error but I don't have a much context as so let's wait to see what he says. In the meantime, I've created a failing test here Thanks again for reporting the issue and stripping down the issue so I could debug it quickly.",2021-01-19T02:40:48Z,neutral
762564027,"And thanks shi for debugging this as well, nice find!",2021-01-19T02:41:22Z,joy
762564039,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 2834ddcc0e7fa1df918c4b92120924020248722c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-19T02:41:26Z,anger
762578896,"my workaround try to be KISS by abuse self reference from JS context. But it always point to latest, not sure what could it break in various mode and lifecycle in react. At least it work in my case. export default function useStableCallback<T extends (...args: any[]) = unknown(callback: T): T { const ref = useRef({ stableProxy: (...args: any) = { return ref.current.targetFunc(...args); }, targetFunc: callback, }); ref.current.targetFunc = callback; return ref.current.stableProxy as T; } ",2021-01-19T03:29:04Z,fear
762628508,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit c0730375e404ea0da84e88ef149166e1f87d806d: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-19T06:22:20Z,anger
762652707,yarn ok npm not exec,2021-01-19T07:20:42Z,neutral
762702413,"Big thanks for this solution with reactdom only, what I wanted to avoid is a dependency to Enzyme which would be counterproductive. I am in the context of Storybook storyshots, which uses reacttestrenderer as a default. Not sure how to switch the render mode for a specific story but I'll check that. ",2021-01-19T09:03:22Z,fear
762751816,It seems like onSubmit isn't propagated,2021-01-19T10:29:30Z,neutral
762788409,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit ad46678fd19f328d1e2e37efd19d8cca70043a02: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-19T11:41:02Z,anger
762791402,That test is still not great and I'd love to get input on how to resolve it. Does help?,2021-01-19T11:47:32Z,sadness
762808155,"Thanks for the report. Whenever you want to update state based on the current state, you should use [functional state updates]( I applied this pattern to your codesandbox and it seems to result in the expected behavior: Does this solve your problem?",2021-01-19T12:23:20Z,anger
762810836,Awesome!! yeah it will work for me. Thanks alot.,2021-01-19T12:28:52Z,joy
762854298,"For googlers, this post is providing a satisfying solution with React Testing Library : After a first try, it feels more robust and faster to me than using Enzyme, in the context of Storyshots/Jest.",2021-01-19T13:55:58Z,fear
762890472,"Thanks ! I wish I knew why [that one test]( required such approach to pass, but I think that's something I can follow up with later.",2021-01-19T14:50:42Z,joy
762898523,Excellent. Thank you for pushing a test. I'm rebasing this branch locally since it conflicts with some Suspense changes I made last week. I'll review it momentarily.,2021-01-19T15:02:11Z,joy
762900476,"try to use a clean context with this [library]( see this [code sandbox example]( check also this [article]( actually, you can create a clean context with _createContext_ from _reacthooksincallback_ ![Screenshot 20210119 at 15 53 49]( and use the _useContextSelector_ hook to pick only the desired part from your context ![Screenshot 20210119 at 15 59 47]( you can also _filter out rerenders noise from derived context's hooks_ like with this _formik_ example ![Screenshot 20210119 at 15 49 38]( ",2021-01-19T15:04:49Z,neutral
762902101,Soon as CI passes I'll land this. Thanks again for the great investigation work and for your patience.,2021-01-19T15:07:23Z,joy
762903019,That test is still not great and I'd love to get input on how to resolve it. Does help? That comment was referring to [this]( which is different. Your findings with the inline snapshot are interesting though. So the real issue was the async done() callback? (Obviously the date formatting issue but that's separate.) Maybe we can discuss the pros and cons of that in a follow up PR :),2021-01-19T15:08:47Z,neutral
762905063,Thanks for the bug report and concise repo. I'll take a look this morning.,2021-01-19T15:11:44Z,fear
762930389,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit a887dbe5dc80ffd5d80aedc4603b296e277c227d: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-19T15:47:47Z,anger
762951522,Thanks!,2021-01-19T16:17:32Z,neutral
762965879," I am still working on linking the reactnative part (reactspring is giving me issues), but checkout for a reactnativeweb storybook + CRA example. ",2021-01-19T16:39:09Z,neutral
763043254,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 4452907c335cdc55eb2cc49e588e386350ff0479: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-19T18:40:27Z,anger
763078532,"I'm having this issue as well using Next.js. My experience aligns with when using the ReactDOMServer.renderToString() method within a useMemo, I get the error: TypeError: Cannot set property 'memoizedState' of null",2021-01-19T19:33:18Z,anger
763087121,"The only real solution for me is to use React as an external in webpack, then to load the React delivery in the root html page. Like this react will 'ot be bundled in the app and all the code will use the same instance",2021-01-19T19:49:18Z,fear
763107524," in your smaller version, I don't think you need the useEffect",2021-01-19T20:20:08Z,neutral
763107647,Seems like (maybe among other things) this check is not great:,2021-01-19T20:20:27Z,neutral
763107972," in your smaller version, I don't think you need the useEffect You do, if you want to repro the runtime error. Without it, the error isn't thrown (although the inspected tree is missing info I think)",2021-01-19T20:21:06Z,neutral
763132611,Can confirm this is happening on the standalone version on Windows. Initial messages are sent: ![image]( but the app stays blank: ![image](,2021-01-19T20:52:32Z,fear
763252730,"sandbox build failed with { [Error: EACCES: permission denied, mkdir '/tmp/output/scheduler'] which I guess is some systemic issue. I'll try to rebase and hope for the best :)",2021-01-20T01:05:30Z,anger
763254999,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 58a4d1cd61d605279522e2296be82a060083dcdc: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-20T01:11:40Z,anger
763300624,So now.. which is the recommended way to check if a component (instead of an element) is memo component?,2021-01-20T03:16:10Z,neutral
763322107,"Should be reopened. This still occur on v16.8.2. I figure out that when using webpack to bundle, the line to declare useState threw an error, for instance: var _b=(0,react.useState)(0)",2021-01-20T04:27:57Z,anger
763349603,"So now if I return an instance of MyCustomType, and it MyCustomType is defined, we'll no longer call it? Not a big deal, but seems unintentional. Also maybe we shouldn't stringify the type in the production build at all. Only in dev.",2021-01-20T05:43:18Z,neutral
763355124,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 6079094ac192d64e2da444e2c1cc17f4370abdee: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-20T05:56:19Z,anger
763364871,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 21d4b03af874b93aaec9a0453ddd31d59b128c50: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-20T06:17:09Z,anger
763448537,I guess it is because of the unsettled width and height of the image tag?,2021-01-20T08:59:52Z,neutral
763489802,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit d5e72247e7a3da3b3cc250f82d5f81821642dc15: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-20T10:04:28Z,anger
763578633,"I use the MobX, so according to [the tutorial]( I added the babel plugin [""/pluginproposalclassproperties"", { ""loose"": false }] and I have the same problem. When remove the babel plugin, the problem is solved. Does anyone know why? ",2021-01-20T12:37:45Z,anger
763584152,I agree with the regression and another solution should be made. I will close this PR and create a issue instead. :),2021-01-20T12:48:19Z,neutral
763627967,Thanks,2021-01-20T14:06:39Z,neutral
763755563,"I need to sit this task down for now because I have something more pressing to work on. If anyone else feels like picking it up, that would be great. We have pretty good test coverage in reactdebugtools.",2021-01-20T16:22:52Z,joy
763810547," that was intentional on my part because calling the toString of the instances will give you some string representation of the value of the instance instead of a string of the object's name, so the error message doesn't make sense. E.g.: Objects are not valid as a React child (found: 1611163658464) vs: Objects are not valid as a React child (found: [object MyCustomType]) Is that fair?",2021-01-20T17:30:08Z,anger
763811506,Reopening since it came up again in,2021-01-20T17:31:45Z,sadness
763811537,Thanks for the report. Closing this in favor of reopening which discussed the same problem.,2021-01-20T17:31:47Z,joy
763818644,Thanks for the report. This sounds like a duplicate of . It would help a lot if you could provide a reproduction (preferably with a codesandbox ( to .,2021-01-20T17:43:55Z,joy
763892483,"That's not the way custom hook support is supposed to work in DevTools, and I don't think it would be what you wanted anyway (e.g. Effect hook would be invisible in this scenario).",2021-01-20T19:52:15Z,anger
763896275,"Brian, yes, I want the effect hook invisible when it is inside of custom hook named useState. I understand you proposal does not have the downside for all other custom hooks, right? On Thu, 21 Jan 2021, 08:52 Brian Vaughn, <notifications.com wrote: That's not the way custom hook support is supposed to work in DevTools, and I don't think it would be what you wanted anyway (e.g. Effect hook would be invisible in this scenario). — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub < or unsubscribe < . ",2021-01-20T19:58:58Z,anger
763897062,It just happens to be the effect hook because of the way this example code is structured. It could be other arbitrary hooks that were shown or hidden if the code were structured differently. That's not a design that I think we would be able to land.,2021-01-20T20:00:25Z,anger
763901312,"When you pass an anonymous function to forwardRef, like: forwardRef((props, ref) = {...}), the name of the inner component is undefined (so React falls back to using Anonymous as the name in the UI). DevTools supports a custom displayName attribute if you want to specify what the name should be, although we suggest that be a DEVonly setting (not something you ship to production). Or you could just use a named function, like forwardRef(function MyComponent(props, ref) {...}).",2021-01-20T20:08:22Z,fear
763902507,"Looking at your project specifically, I think it's probably this function: Just change: js export const Box = React.forwardRef( ( { Flex, Column, Grow, ColorBg, Fit, Position, P, M, OverflowX, OverflowY, children, style = {}, debug, ...rest }, ref ) = { to: js export const Box = React.forwardRef( function Box( { Flex, Column, Grow, ColorBg, Fit, Position, P, M, OverflowX, OverflowY, children, style = {}, debug, ...rest }, ref ) { ",2021-01-20T20:10:29Z,fear
763903668,"I wrote [this comment]( only a few moments ago. I need to sit this task down for now because I have something more pressing to work on. If anyone else feels like picking it up, that would be great. We have pretty good test coverage in reactdebugtools. It still holds.",2021-01-20T20:12:36Z,joy
763917540," Looking at your project specifically, I think it's probably this function: Just change: js export const Box = React.forwardRef( ( { Flex, Column, Grow, ColorBg, Fit, Position, P, M, OverflowX, OverflowY, children, style = {}, debug, ...rest }, ref ) = { to: js export const Box = React.forwardRef( function Box( { Flex, Column, Grow, ColorBg, Fit, Position, P, M, OverflowX, OverflowY, children, style = {}, debug, ...rest }, ref ) { Thanks you so much friend for your time and sorry for this stupid mistake ! your awesome. Is work !!",2021-01-20T20:38:47Z,sadness
763918042,Not a problem. Very glad it's sorted.,2021-01-20T20:39:37Z,joy
763996745,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,2021-01-20T22:34:13Z,joy
764463788,"Hmm, yeah I'm not saying that the code I wrote its 100% correct or should result in working behaviour. I'm saying that the error message was really unhelpful and confusing as to finding out the code was actually incorrect.",2021-01-21T08:18:12Z,anger
764606600,"I tried everything from here and from other places as well, but no luck. I still get the ""invalid hook call"" error. I [raised my question on Stackoverflow]( with repo links, and details, but for some reason, people started to downgrade it. If anyone here could help me, I'd really appreciate it! ",2021-01-21T12:21:47Z,anger
764655409,"I'm sorry you experienced this bug!  Looks like this problem was already reported though () so I'm going to mark this issue as a duplicate and close it. If you have additional context that might help us repro this problem, please leave a comment on the other issue! Thank you",2021-01-21T13:50:32Z,sadness
764720112,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 77f5475f105089b498b2105db5a47707b963a340: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-21T15:25:27Z,anger
764764479,"I am having a similar problem and I believe this is a bug in react dev tools. I am using a component which has no props but is using useContext inside (new context, not the legacy one). However in reactdevtools the message is ""The parent component rendered."" I think this is the exact case described here: ",2021-01-21T16:21:27Z,neutral
764816750,"Hey, any chance to get a review on this one? Or to have a discussion about whether or not it should be merged?",2021-01-21T17:35:48Z,neutral
764881783,Have you considered using something like instead of rolling your own?,2021-01-21T19:26:33Z,neutral
764924428,Here is a fork of the original codesandbox without passing useSortBy to the useTable hook (but really the entire Table component could be removed now as it serves no purpose) as you can see it works perfectly fine. So it'd be interesting to see whatever in useSortBy causes the propagation of the click event to be delayed.,2021-01-21T20:42:52Z,joy
764967225,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 62d0b1367d906352239cbedd4d9756b0b4534108: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-21T21:57:04Z,anger
764969685," Should I rewrite invokeEffectsInDev to be iterative or are we okay with recursion in DEV only methods? Probably should just in case, until we can resolve the issue we found in the open source dev build. But doesn't need to block this PR.",2021-01-21T22:02:18Z,neutral
764997783,"I have to agree with . If the intended behavior is to strip invalid markup, that behavior should match in dev and prod, but it doesn't. That is definitely a problem.",2021-01-21T23:05:11Z,anger
765022176,This happens on all apps that I open It occurs when trying to view the flame graph after a recording,2021-01-22T00:09:46Z,anger
765144448,: Is the link to the issue the only place where integration for fastrefresh is documented?,2021-01-22T05:49:43Z,fear
765228059," This happens on all apps that I open It would help us a lot if you can share one of those apps. As minimal as possible until you can no longer reproduce the error. ""all apps that I open"" is a bit ambiguous since all the apps you did open might use a specific React API that causes this issue.",2021-01-22T08:22:39Z,fear
765302624," i have something similar, did u solve it?",2021-01-22T10:19:30Z,neutral
765406897,"How is this going? In React17, throwing Promise during rendering becomes special , ErrorBoundary can't catch throwing Promise but anything else! This forbid us to implement our own version of Suspense with 'maxDuration' featrue.",2021-01-22T13:45:47Z,fear
765414150," Should I rewrite invokeEffectsInDev to be iterative or are we okay with recursion in DEV only methods? Probably should just in case, until we can resolve the issue we found in the open source dev build. But doesn't need to block this PR. Okay. I wasn't sure since my recollection was that it seemed like the recursive methods didn't actually cause performance problems. I'll post a follow up PR.",2021-01-22T13:55:15Z,neutral
765464392,Hey Did you enable some [component filters]( and then forget to turn them off?  That's my guess.,2021-01-22T15:01:41Z,neutral
765465692,"Yeah, unfortunately this isn't very actionable for us at the moment. (Profiler works fine for me.) Getting access to one of your apps (or better yet a smaller reduced test case) would be very helpful though!",2021-01-22T15:03:12Z,joy
765466395," Hey  Did you enable some [component filters]( and then forget to turn them off?  That's my guess. Hi Brian, thanks for the check on this. I currently have no component filters enabled.",2021-01-22T15:04:06Z,neutral
765466837,Hey can you please provide a repro for this problem?,2021-01-22T15:04:44Z,neutral
765467414,"Seems pretty likely to have something to do with your DevTools extension settings, since incognito (same DevTools version) works fine. Tried uninstalling and reinstalling?",2021-01-22T15:05:32Z,neutral
765471833," Seems pretty likely to have something to do with your DevTools extension settings, since incognito (same DevTools version) works fine. Tried uninstalling and reinstalling? That worked 🤦 Thank You!",2021-01-22T15:11:30Z,neutral
765472843,No problem. That's pretty curious though. First time I've heard a report of this kind of bug. Glad you got it sorted though!,2021-01-22T15:12:47Z,joy
765496034,"The following works const ref = useRef(); useEffect(() = { console.warn(ref.current.getBoundingClientRect().width) console.warn(ref.current.getBoundingClientRect().height) // Padding and margin console.warn(window.getComputedStyle(ref.current).paddingTop) console.warn(window.getComputedStyle(ref.current).marginTop) }, []); ",2021-01-22T15:44:16Z,fear
765539850,I think the Code Sandbox failure doesn't look to be related to my PR. Looks like a timeout of some sort?,2021-01-22T16:41:44Z,sadness
765608362,I have the same issue on Opera 63 with the latest React Dev Tools via Chrome extensions on ElementaryOS. Any help?,2021-01-22T18:35:55Z,fear
765635254,Thanks! Going to merge so I can rebase on top,2021-01-22T19:27:32Z,joy
765643620,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 1297a660bab109dde5aa1d6c0cdedf8585d25f8d: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-22T19:44:03Z,anger
765646334,Merging so I can rebase another branch on this :),2021-01-22T19:49:27Z,joy
765665355,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 4b28e164f9df6899cb40bad224f9333c0ddf8100: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-22T20:29:28Z,anger
765874329,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 26d596d3cdd8226f160f801c3386ffe20e657286: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-23T06:02:45Z,anger
765899784,Is the issue still unresolved or fixed? I would like to work on this,2021-01-23T10:09:50Z,fear
766138255,"Obvious question: why useSelectedContext, and not useContextSelector?",2021-01-23T16:51:43Z,anger
766142018,"lol, I was waiting somebody ask. Although I understand the intuition, what it's supposed to be is useSelectedContextValue which is too long. In one of the RFCs, there was a discussion about the idea of useContext(ctx, selectorFn). Certainly, this requires to drop unstable_observedBits. Might look cleaner. (Personally, I'm ok with whatever decision is made.)",2021-01-23T17:05:46Z,neutral
766145501,"Think of this PR as a proof of concept. It’s very unlikely to be the final design. We can bikeshed more before release. Re: why it’s a separate hook , makes it easier to track usages internally, and delete if needed. Also avoids a conflict with observed bits, which we still need to remove. This also isn’t the only contextrelated feature we have planned, and it’s unclear how they’ll overlap. Might be separate hooks, might be all the same hook.",2021-01-23T17:28:40Z,neutral
766150624,"Gotcha. Out of curiosity, any chance of an RFC or something discussing the other plans for context?",2021-01-23T17:51:02Z,neutral
766151150,"When they’re more fleshed out, yeah. One of the motivations for this PR was that the other proposals are only useful in combination with this feature (bailing out during render if nothing has changed).",2021-01-23T17:54:30Z,anger
766279204,"Usually we want to change ref.current (isn't this exactly why refs are for?), so I don't see much practical value in the getInstance approach. The useState solution is very natural and exactly what's needed. But ideally, React should just improve useRef to accept a lazy init.",2021-01-24T02:32:02Z,neutral
766289380,"I think, close this issue, since it has more debate rather than solving problem...",2021-01-24T04:27:06Z,neutral
766295089,There's also docs [here](,2021-01-24T05:32:52Z,neutral
766330080," Even if we could catch that promise wrapped in an error (e.g. throw ({ promise: new Promise(...) });) that our custom Suspense implementing ErrorBoundary will catch, that will not help us because React unmounts the node that throws anything which is not a promise or handles a caught promise itself. I agree with you, it would be great to have more flexibility and catch promises in our custom components besides the builtin Suspense one.",2021-01-24T11:11:39Z,anger
766410208," There are several other methods to conditionally render or hide(CSS display,opacity...) an Element. A visible property would be redundant. If you need this feature you can think about an HOC. If I create a new Component, it does not have a Display property. It requires extra job. Small, but extra. And it is very a often common case.",2021-01-24T18:39:56Z,neutral
766410818,Key is not redundant with html id because id is renderend to the DOM and key is used internally by the framework.,2021-01-24T18:44:12Z,neutral
766423955,also messes up with rem units.,2021-01-24T20:10:53Z,neutral
766427520,issue resolved.,2021-01-24T20:35:25Z,neutral
766497143," In one of the RFCs, there was a discussion about the idea of useContext(ctx, selectorFn). Certainly, this requires to drop unstable_observedBits. Might look cleaner. (Personally, I'm ok with whatever decision is made.) I think this is better, we can easily bail in/out of the selector functionality anytime. Could also imagine the API being like this: tsx declare function useContext<T(ctx: Context<T): T; declare function useContext<T, R(ctx: Context<T, selector: (value: T) = R, isEqual?: (prev: R, next: R) = boolean): R; ",2021-01-25T02:21:08Z,fear
766550514,"A quick test in recent versions of FF, Chrome, and Safari shows that Chrome, FireFox and Safari now have matching behavior: onInput fires while dragging the slider, onChange fires on release. I suspect it'd now make sense for React to also match this behavior. Code pen: GIF: ![Screen Recording 20210124 at 10 25 23 PM]( ",2021-01-25T05:27:17Z,fear
766627733,Thank you for your fixes! We faced the same problems and are waiting for this changes to be published. can you shed some light on when it will be available in stores?,2021-01-25T08:02:57Z,fear
766729412,"Support requests filed as GitHub issues often go unanswered. We want you to find the answer you're looking for, so we suggest the following alternatives: Coding Questions If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions. stackoverflow.com/questions/tagged/react Talk to other React developers There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. ",2021-01-25T10:51:02Z,anger
766734788,"It doesn't look like this bug report has enough info for one of us to reproduce it. Please provide a CodeSandbox ( a link to a repository on GitHub, or provide a minimal code example that reproduces the problem. Here are some tips for providing a minimal example: <! mui template: <! react template: ",2021-01-25T11:00:41Z,fear
766735731,"It doesn't look like this bug report has enough info for one of us to reproduce it. Please provide a CodeSandbox ( a link to a repository on GitHub, or provide a minimal code example that reproduces the problem. Here are some tips for providing a minimal example: <! mui template: <! react template: ",2021-01-25T11:02:12Z,fear
766749089,"Was there any changes to how fiber renders in 17.x? Maybe it all boils down to synchronous vs asynchronous rendering after setOpen if in React 16 it was async, but in 17.x it is optimized to be sync then that would explain the difference in behavior. I can't find any release notes about this, so i'm not sure whether this side effect is something that was considered or if it is actually some unintended side effect.",2021-01-25T11:25:31Z,fear
766753809,"A thought on meaningful names: I personally don't mind if the output is like the example from point 2. Knowing that all hooks are executed in order makes it trivial to find the offending hook. I'd much rather have that solution earlier than a more ""elegant"" solution later.",2021-01-25T11:34:17Z,fear
766823816,"I'm going to close this issue because I think the current state of this feature is fine and I have no plans to change it. If someone would like to submit a PR+proposal for a new behavior though, I will review it.",2021-01-25T13:41:19Z,neutral
766857404,"It was happening here, I deleted the folder node modules and ran npm update. So I solved the problem.",2021-01-25T14:34:04Z,fear
766864803,This would be a bug with (different repository),2021-01-25T14:44:39Z,fear
766888862,"Yes, please file this in the createreactapp repo: That repo is maintained by a different team. I would migrate it myself but GitHub doesn't support that to my knowledge.",2021-01-25T15:18:17Z,neutral
766941750,ReactDOM.unstable_createRoot is still giving me the same error.,2021-01-25T16:33:25Z,fear
766961538,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA.",2021-01-25T17:02:43Z,anger
766979375,Let's keep the discussion at [RFC 119]( and [RFC 118](,2021-01-25T17:27:17Z,anger
767075534,This is a testonly change so I'm just going to merge it.,2021-01-25T19:58:10Z,neutral
767087043,Completed in,2021-01-25T20:18:34Z,joy
767096983,Merge it please,2021-01-25T20:36:08Z,neutral
767106437,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 6e691a674685f5e2f60bced3e38ebc41b31b3073: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-25T20:55:02Z,anger
767112714," Thanks you for the solution, changing key helped me to solve the issue as well.",2021-01-25T21:06:41Z,joy
767134704,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 28e7657d017aa2147cd8692f6f660b2de29ff345: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-25T21:49:14Z,anger
767151713,"Hi, Could the changes in this PR, specifically adding the exports field in package.json, be backported to React 16? It'd help fix , though a release still needs to be made.",2021-01-25T22:20:56Z,fear
767264361,Do you mind splitting the queueMicrotask stuff into its own PR? Then stack the rest on top,2021-01-26T03:26:47Z,neutral
767269284,I wasn't thinking that queueMicrotask would be integrated into the scheduler since it's not natively neither. They're separate things. Is there a reason that this isn't literally export scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : ... when it's available? That's the minimal overhead.,2021-01-26T03:32:08Z,fear
767276167," I can break this up, do you agree with that this shouldn't be in scheduler? If so, where should this go?",2021-01-26T03:42:47Z,neutral
767276554,I'm not sure where this should live but the part I don't get is why it's adding it to a scheduler queue? It seems like it should just be straight passthrough. It could be part of scheduler just to have one convenient way to get all these polyfills but now I'm skeptical it belongs there because it's tempting to integrate it unnecessarily and you have to always pull in the whole scheduler even if you depend on only this function. Nobody else is going to do that so there's no code sharing benefit.,2021-01-26T03:44:22Z,anger
767276931,I would do it as an export of Scheduler for now. js import queueMicrotask from 'scheduler/queueMicrotask';,2021-01-26T03:45:56Z,neutral
767276946,Maybe it should just be a host config?,2021-01-26T03:45:59Z,neutral
767277559,"Arguably all of the Scheduler methods should be host configs so we can possibly swap them out postTask one day without the Scheduler package indirection. (So, the same rationale for not wrapping queueMicrotask). But I don't want to bikeshed this right now so just put it somewhere and we can figure out the host config Scheduler boundary later.",2021-01-26T03:48:05Z,neutral
767278251,"If we publish a timer polyfill we'll likely put that in the Scheduler package, too. We also may need to publish our own Promise polyfill for older browsers, so it integrates properly with our message event listener. I don't think we're going to solve all of that in this PR.",2021-01-26T03:50:52Z,neutral
767278283,"I was thinking that for React Native it might be that discrete !== micro task. Since we can implement it differently there and some discrete might need to consider the thread they're on. Seems like Host Config might be the better injection point there but could be layered twice. Like the DOM host config defers to scheduler/queueMicrotask. Where as for scheduling work, it makes sense to have a shared one since it's public API and integrates with other scheduled things.",2021-01-26T03:50:56Z,fear
767279783,"We could call it like queueDiscrete or something. That's fine, though feels like too early of an abstraction right now and I wouldn't block the PR over it. I would put a TODO and then revisit when React Native is ready.",2021-01-26T03:56:48Z,fear
767279991," one key benefit of using the scheduler for this right now is that we call cancelCallback when the priority changes. With this implementation, that just works. With a separate queueMicrotask impl, we'd have to sort out that cancelation. I know had a suggestion for how to remove that dependency on cancelCallback, but I didn't entirely follow it.",2021-01-26T03:57:42Z,anger
767280401,We can't cancel discrete work though. So that won't make sense anyway.,2021-01-26T03:59:13Z,anger
767280492,The suggestion is to not cancel the microtask once it's scheduled,2021-01-26T03:59:30Z,anger
767281483,"We do need to cancel nondiscrete tasks once the priority changes to discrete (like a child that uses startTransition and a parent that doesn't), so we'll need to only cancel the nondiscrete tasks somehow, which seems nontrivial to unblock this.",2021-01-26T04:01:58Z,neutral
767281806,"Maybe it is trivial, and we just don't store the microtask on the node.",2021-01-26T04:03:02Z,neutral
767282944,Let's continue in the separate PR? That way we can focus on that by itself,2021-01-26T04:07:02Z,neutral
767287725,Seems good. Thanks,2021-01-26T04:25:19Z,joy
767291567," [from our docs]( The onChange event behaves as you would expect it to: whenever a form field is changed, this event is fired. We intentionally do not use the existing browser behavior because onChange is a misnomer for its behavior and React relies on this event to handle user input in real time. Going to close this as it seems to be working as documented, but thanks for submitting.",2021-01-26T04:39:15Z,neutral
767294535,"The scheduler is designed to be used with no build steps, which means using ES5 syntax. See for more context.",2021-01-26T04:50:51Z,neutral
767294845,Could you add a test for this?,2021-01-26T04:52:09Z,neutral
767355476,"I have experienced the same problem with a react native app. basically am calling an asynchronous API call when the component mounts using useEffect() then update state on successful callback. This is on my login screen, after the user token is set, I get the error when the user is presented with the home screen.",2021-01-26T07:23:15Z,fear
767366147,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 40e168abcecce13cb83901feeadf20359a1bbecb: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T07:48:32Z,anger
767382958,"you can move react and reactdom from dependencies to devDependencies in your lib，this can ensure react consistency in project // package.json { ""dependencies"": {}, ""devDependencies"": { ""/react"": ""^17.0.0"", ""/reactdom"": ""^17.0.0"" ""react"": ""^17.0.0"", ""reactdom"": ""^17.0.0"", } } ",2021-01-26T08:25:05Z,fear
767383859,"you can move react and reactdom from dependencies to devDependencies in your lib，this can ensure react consistency in project // package.json { ""dependencies"": {}, ""devDependencies"": { ""/react"": ""^17.0.0"", ""/reactdom"": ""^17.0.0"" ""react"": ""^17.0.0"", ""reactdom"": ""^17.0.0"", } } ",2021-01-26T08:26:50Z,fear
767402867,"Ok I think I find the problem my env is jest + react native testing library + typescript, I found out that this problem occurs when resetModules: true in jest config. removing this flag solved my problem. update: here is a working fix without removing the flag: ",2021-01-26T09:02:53Z,fear
767418792,Am I the only one expect React.useCallback should do state changes in a single batch/transaction for me ?,2021-01-26T09:31:46Z,fear
767419759," 100% agree. There may be some down sides, but coding in React I feel like it's more intuative if useCallback and useEffect did everything in a batch.",2021-01-26T09:33:20Z,anger
767561701,Get outta here Ricky,2021-01-26T14:03:47Z,anger
767577882,I tried to use the defaultOption flag provided by commandlineargs for this (just adding it conditionally before calling commandlineargs) but it seems to only support boolean values. 🤷‍♂️ This is fine.,2021-01-26T14:29:06Z,anger
767578141,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit f117fc4bc02124b5651968574f0c7500f9e1357b: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T14:29:28Z,anger
767596243," If this sounds terribly confusing, it's because it barely makes sense.  ",2021-01-26T14:52:48Z,sadness
767608543,Going to close this; have pushed the branch with the tests I'd written. No fix yet though.,2021-01-26T15:11:06Z,fear
767614175,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 38888a3ae5c4fa7ad573e2b6b8683271a0eedabf: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T15:19:24Z,anger
767633251,"Going to push the ""fix"" even though I imagine it's not acceptable and we just need to add more integration tests to cover the case had in mind with two wrappers.  ",2021-01-26T15:46:41Z,fear
767672868,"Tagging to hear your thoughts about this, not because my current ""solution"" is landable.",2021-01-26T16:44:16Z,sadness
767738930,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit cf96b275dcc8092466b6fdb08565483d93ff9f35: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T18:27:35Z,anger
767775392,Proposed solution (really just a better warning and error message) in,2021-01-26T19:30:02Z,fear
767776973,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit eb42de7bc5b191817d596cb732bbe0f13ada3bc0: |Sandbox| Source | ||| |[React]( Configuration | |[useMutableSource]( Issue | ",2021-01-26T19:32:58Z,anger
767792885,Whoops forgot to gate the new tests to .,2021-01-26T20:01:35Z,sadness
767810434,"Ah nice to find this. This bug affects many form libraries for some reason, so we are seeing it a lot in Blitz apps (with concurrent mode)",2021-01-26T20:33:18Z,fear
767829535,Is that always true? We wouldn't pop anything for primitive hooks that are called directly I believe we pop at least once because the call location of the primitive should be different between the two. Once we push a primitive we also set the current levelChildren to be that of the primitive so we need to pop it to get the shared parent. I tried before asking and it did not seem like that was the case.,2021-01-26T21:09:55Z,fear
767895826,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 58b2e9fdde79d70e39af329c75c5285fa7391a44: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T23:24:30Z,anger
767901911,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0711bb0bbfa9cbea9319b0c63c411af49c9259eb: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T23:39:26Z,anger
767902924,Thanks for the feedback. I went with the HostConfig strategy and created a new stack of PRs with the head [here](,2021-01-26T23:42:15Z,joy
767902981,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit ccfee9ad3b20ab38ed7a263fdf7861244e729212: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T23:42:24Z,anger
767903968,"As you're likely aware — Concurrent Mode is experimental, and there are likely both more bugs, and more breaking changes coming. (E.g. an upcoming breaking change will make more stuff synchronous, which might end up resolving this.) I think form libraries are completely within their rights to _not_ fix this because the bug is probably ours, and we explicitly don't recommend anyone writing stable software to rely on experimental features in production. ",2021-01-26T23:45:07Z,fear
767904638,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 458f04ea08900c36a75b37a30df22be324554bb1: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-26T23:46:58Z,anger
767905346," startTransition wont work in nonexperimental gated tests. Would you just gate the tests that use it now, or duplicate them?",2021-01-26T23:48:47Z,joy
767908039," Fine to gate them. There's a TODO to fix the www classic builds (which are mistakenly interpreted as ""stable"") but experimental should work in the interim.",2021-01-26T23:55:51Z,neutral
767908690,that link doesn't work for me,2021-01-26T23:57:29Z,anger
767910837,Here:,2021-01-27T00:03:21Z,neutral
767940323,"fixed flow, ran yarn prettier, added unit tests as suggested: Passing a ref to a fabric component to the Fabric JS renderer calls the fabric native method Passing a ref to a paper component to the Paper JS renderer calls the paper native method Passing a ref to a paper component to the Fabric JS renderer calls the paper native method Passing a ref to a fabric component to the Paper JS renderer calls the fabric native method Passing a nonref to Paper JS render is an error Passing a nonref to Fabric JS render is an error",2021-01-27T01:17:42Z,anger
767966668,I can have a try. There are two versions of files in reactresonciler(old.js and new.js). Which should I modify?,2021-01-27T02:21:40Z,neutral
768020011,Not sure which ones you'll get on build.. Try changing both and see which gets used?,2021-01-27T04:27:57Z,neutral
768055012,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 99fef31f9d80372066cb6839cab92316efb0a92c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-27T06:04:51Z,anger
768055336,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit a30d15f8df39b9140283a88cdae58ac02435826a: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-27T06:05:34Z,anger
768081437,Will do.,2021-01-27T07:05:04Z,neutral
768081767,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 3cc1f205096d844ab9044b6b59c464dfbd03f6c0: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-27T07:05:42Z,anger
768241769,Thanks for the report. React version:v17.0.1 The codesandbox is using 0.0.0experimental4ead6b530. Could you clarify for which version you want to report the bug?,2021-01-27T12:06:44Z,joy
768260630,Could you either update the issue or the codesandbox so that we avoid potential confusion when the bug is reported for one version but the repro uses a different one? yeah! i have updated the version of React in the codesandbox,2021-01-27T12:43:44Z,fear
768273119,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 5c24bb5fc195458719b943fdeb885d4bd29b85af: |Sandbox| Source | ||| |[React]( Configuration | |[ReactHooks]( Issue | |[ReactHooks]( Issue | |[React]( Issue | ",2021-01-27T13:07:14Z,fear
768273820," The way this currently works is that we always assign the same lane to all transitions. It's impossible for one transition to finish without also finishing all the others. Oh I didn’t realize this was already fixed (albeit in a coarse way). Still, we do currently show all of them as “busy”, right — and that would need to be fixed too? Just to confirm the behavior I saw in the demo makes sense. ",2021-01-27T13:08:29Z,neutral
768303716,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 5dde29042b7d3080a593981ef969d4f6e4d68615: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-27T13:59:31Z,anger
768318381,"Correct, the multiple pending spinners issue needs a separate fix",2021-01-27T14:22:38Z,anger
768389885,"Is the behavior new in some version, or always been like this?",2021-01-27T16:04:50Z,neutral
768449649,"Looks like there's a DevTools test failure. I'm guessing it's a legit change, so the snapshot just needs to be updated. Have you looked into that yet?",2021-01-27T17:32:30Z,joy
768520945,Updates look great! Thanks!,2021-01-27T19:26:24Z,joy
768568318,Have you used CORS on your Nodejs server?,2021-01-27T20:50:16Z,neutral
768591592,It's not clear to me what this issue is reporting. Can you provide some example code and then describe what you expect it to do and what it _actually_ does that makes you think there's a bug?,2021-01-27T21:33:16Z,anger
768661371,Any update on this?,2021-01-28T00:08:34Z,neutral
768862542," What exactly are you expecting to be updated? They started using code actions for this fix, if you want an old behavior, enable enableDangerousAutofixThisMayCauseInfiniteLoops option in eslint config.",2021-01-28T07:37:24Z,anger
768899811,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 536e60f3cf154c42336d3f7fcc9ca7078c825987: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-28T08:52:41Z,anger
768952070,Worth noting that the example explicitly says not to copypaste this code Why? That code seems useful,2021-01-28T10:21:41Z,anger
769150265,I don't think React would do anything to reload your page given the example code above. But can you share a full repro (code that we can run) that shows this happening? Here's a Code Sandbox that's similar if you'd like a starting point:,2021-01-28T15:09:57Z,anger
769159660,"(It's still possible we'll offer a higherlevel API that enforces these constraints, but I wanted to document the current state.)",2021-01-28T15:22:23Z,joy
769170124,"Well, if your honest answer is that we should simply turn it off, then I guess we can follow it. I'll be honest though, it sounds suspiciously like the line ""why don't we just disable warnings as errors"", which I've heard about 1000 times over my years as a TD (and at one point started a swear box for programmers that even suggest it!). ",2021-01-28T15:37:17Z,anger
769173231,"Yes, my advice is to turn it off for now if: (1) it's causing a lot of warning/error messages that are interfering with your daily development (particularly if a lot of them are not actionable because they are in external libraries) and especially if (2) you aren't planning to start using the new createRoot API in the near future. Perhaps we'll come up with improvements to the suggested upgrade path before we release createRoot as stable. We're always thinking about this.",2021-01-28T15:41:45Z,neutral
769185307,"thanks, this contract explanation really helps me to solve the problem",2021-01-28T15:59:02Z,anger
769259476,"Will do thx. If you have a chance, I'd appreciate it if you manage to notify this thread if things change.",2021-01-28T17:46:26Z,neutral
769363989,Looks like this PR regressed DevTools. Seeing lots of errors when building DevTools with CI build from this revision that don't occur on the one before it: reactdom.development.js?0e6b:12358 Uncaught (in promise) TypeError: Cannot read property 'lanes' of undefined at entangleTransitions (reactdom.development.js?0e6b:12358) at refreshCache (reactdom.development.js?0e6b:16739) at eval (inspectedElementCache.js?c15b:169) at startTransition (react.development.js?e562:2351) at eval (inspectedElementCache.js?c15b:163),2021-01-28T20:27:04Z,fear
769372153,Turns out this was caused by a React regression in deeeaf1d222ba29bcce6eda0a1c4423ce10e727a which is the version my local DevTools was built with. Fixing separately.,2021-01-28T20:37:40Z,fear
769394346,Fixed in,2021-01-28T21:06:44Z,neutral
769395972,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 34465b1e609e76284c5892c62c56331ab3bed655: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-28T21:08:57Z,anger
769397821,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 29506ef390b532a6c83bd6dd8e7450eb49c81f87: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-28T21:11:26Z,anger
769458997,"Rather strange that this case is handled different on reactnative from react. In RN if you pass 16, it is interpreted as 16 pixels...in React it's interpreted as ??? This makes sharing a theme between the two more difficult. Sure we can use 16px for the field, but this seems quite arbitrary.",2021-01-28T23:08:57Z,neutral
769575673,"Any updates on this? I'm using mui's _TextField_ so there is no way for me to remove the value attribute. Can anybody look at this please? Thanks Workaround If you need the native autofill from Firefox you are currently not allowed to use the attribue value (value={name})! Instead you have to use useRef={inputEl} and get the value from there, with inputEl.current.value Here is an updated code sample: jsjsx export default function ComposedTextField() { const inputEl = useRef(null); function handleChange3(event) { setName3(event.target.value); } function handleSubmit(event) { console.log(inputEl.current.value); } <input id=""componentsimple3"" ref={inputEl} autoComplete=""on"" onChange={handleChange3} / ",2021-01-29T05:00:38Z,neutral
769631424,"I found the culprit of this behavior. I'm developing in vscode and in there I'm using ""Live Server"" from Ritwick Dey to host builds locally without much of a hassle. This Live Server triggers the page reload. That's why I don't see any errors or something. React has nothing to do with it.",2021-01-29T07:27:02Z,anger
769663961,"Using function _ () instead of () = seems to be fine with eslint. js const RenderFunction = ({ children }) = children(); const MyComponent = ({ shouldRenderHook }) = shouldRenderHook ? ( <RenderFunction {function _ () { const [state, setState] = React.useState(0); return ( <div State: {state} <button onClick={() = setState(currentState = currentState + 1)} Increment </button </div ); }} </RenderFunction ) : ( <divRendering the hook shortly…</div ); ",2021-01-29T08:41:47Z,fear
769724238,"I've been seeing these errors on regex101.com quite a lot, around 20,000 times in the past 14 days. After some googling I found this, and it seems like this might be the root cause. What are the mitigations? Is there any viable workaround?",2021-01-29T10:36:14Z,fear
769803903," What do you mean, it ignores the mouse events? This is a strange case and you can write onChange={function() {}} to suppress the warning. 6 years late but essentially this! jsx <input type=""url"" value={value} onChange={suppressMissingOnChangeHandlerWarning} onBlur={e = onChange(e.currentTarget.value)} / Works great! In case it is unclear, suppressMissingOnChangeHandlerWarning is just a function declared elsewhere so the prop is stable and sort of documented. js function suppressMissingOnChangeHandlerWarning() {} ",2021-01-29T13:26:35Z,neutral
769815510,Thanks for sharing your findings!,2021-01-29T13:49:05Z,joy
769816620,Ping :),2021-01-29T13:51:07Z,joy
769854700,Okay . Updated the error message wording and rebased.,2021-01-29T14:58:06Z,neutral
769857675,Sorry . I don't think I have enough context to answer these questions without spending a good bit of time digging into aggrid to figure out what you're talking about (and I don't have time to do that at the moment).,2021-01-29T15:03:05Z,sadness
769874472,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit ec4b81d5d227978f8ddfb24b7bc5f6e414a25e36: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-29T15:31:18Z,anger
769885930,Thanks !,2021-01-29T15:51:22Z,neutral
769905057,"I'm sorry you experienced this bug!  Looks like this problem was already reported though () so I'm going to mark this issue as a duplicate and close it. If you have additional context that might help us repro this problem, please leave a comment on the other issue! Extra repro cases would be very helpful for this issue in particular. Thank you",2021-01-29T16:23:42Z,joy
769949768,Thanks for the repro! This helped a lot identifying the issue.,2021-01-29T17:44:25Z,joy
770028705,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 97ca787b516935f57a724cebdabf9acad19b668b: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-29T20:20:21Z,anger
770036281,Oops I need to tweak this to use two flags: one to enable it for FB only and one to allow developers to optout. The reason here is that I can't set a GK to 100% of employees. Will update momentarily.,2021-01-29T20:36:51Z,neutral
770054833,"I solved this issue on a Next.js project using these two functions during the server side rendering stage. [Live codesandbox example]( javascript const checkImageUrl = async (imageUrl: string): Promise<boolean = { try { const response = await axios.get(imageUrl) if (response.status === 200) return true else return false } catch (error) { return false } } export const checkAndFormatImageUrlWithFallback = async (imageUrl: string, fallbackUrl: string): Promise<string = { const isValidImageUrl = await checkImageUrl(imageUrl) return isValidImageUrl ? imageUrl : fallbackUrl } ",2021-01-29T21:17:24Z,anger
770065365,CI test ci/circleci: yarn_testr=wwwclassic env=development variant looks like it failed but opening it in CI shows all tests passed. They just took a little too long to finish.,2021-01-29T21:40:54Z,sadness
770143594,You are welcome! i am very happy to do this,2021-01-30T02:49:12Z,joy
770172956,"This is a minor detail but some of this is alleviated by simply doing. js function useMyHook(initialValue) { return React.useState(initialValue) } function MyComponent() { const [value, setValue] = useMyHook(0) return ""..."" } The developer tools will display this as a MyHook with a State hook nested under it. It allows you to create a heading by simply grouping hooks in function names. ![image]( If you have a really big and complex component this might not be possible to do but you probably want to break down that big complex component into something smaller anyway...",2021-01-30T07:42:15Z,fear
770187614,"Since this was closed, I opened a new one: Someone has linked this issue to it: There you find another workaround: Maybe this works for you. Sadly, Firefox won't change its behaviour and on the React side, no one reacting ;(",2021-01-30T10:06:40Z,anger
770188990,": Are there any plans to fix this? It almost 2 years since the report and at least in my eyes this is a huge UX bug. This bug affects other frameworks (antd, material UI): muiorg/materialui antdesign/antdesign I'm also not getting it, why this one should be a breaking change. If autoComplete is ""on"" react could to this setAttribute('value', ''); under the hood and it would be fine. Or are there any side effects if you are doing this?",2021-01-30T10:18:41Z,fear
770246643,"Maybe I don't understand how ""highlight updates when components render"" should work. It always highlights all components, doesn't matter they did render or not. I would think it should highlight only the ones that did render",2021-01-30T17:20:09Z,neutral
770285705," If I understand correctly, the mechanism you're using here to detect a renderphase update depends on StrictMode's double rendering. The mutation is detected during the second render, and then you warn. After I posted this I started to secondguess myself because console messages are disabled during the double render, so how would your warning work... ... but then I remembered our other double invocation: the one that wraps the begin phase in invokeGuardedCallback. So you actually do warn during the Strict Mode double render, but that one gets suppressed. The warning that doesn't get suppressed is the invokeGuardedCallback one.",2021-01-30T21:48:55Z,fear
770345486,Please experiment with markdown (e.g. or pull requests (see for further documentation) on a personal repository. Opening PRs creates notifications for maintainers and everyone watching this repository.,2021-01-31T08:20:51Z,neutral
770345943,"It doesn't look like this bug report has enough info for one of us to reproduce it. I tried it in a codesandbox but that doesn't produce a hydration warning: Please provide a CodeSandbox ( a link to a repository on GitHub, or provide a minimal code example that reproduces the problem. Here are some tips for providing a minimal example: <! mui template: <! react template: ",2021-01-31T08:25:01Z,fear
770412628,Im using WebStorms and have the same issue.,2021-01-31T16:54:47Z,anger
770441243,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 45691c924e4177112ff99e85b54a36e58a113f23: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-31T19:59:58Z,anger
770445328,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 5c0aef6682062944b87baceafcb3a808a254382e: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-31T20:29:03Z,anger
770447171,"Well, this is embarrassing. It seems I had switched from using from renderToString to using renderToStaticMarkup at some point for unknown reasons. My page was quite simple so didn't actually notice this was happening other than this hydration notice. I do apologise for this. I hope you didn't waste too much time looking into this. ",2021-01-31T20:41:05Z,anger
770458842,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 964fd590907830eabd92bce7815b6927c496acb7: |Sandbox| Source | ||| |[React]( Configuration | ",2021-01-31T22:03:57Z,anger
770518187," Hi, we've decided last week that it's shipped in 87 unless we'd get some bug reports which can block the release. And thank you for the feedback about the getTargetRanges!",2021-02-01T02:17:24Z,joy
770518968,"Oops, 87 will be shipped March, 23. ",2021-02-01T02:19:40Z,neutral
770550767,"Hey , thanks for submitting. How would you improve the error?",2021-02-01T04:12:25Z,joy
770553570,"Hey , do you have any code snippets to show what PageHome.Layout is? If it's a class component, then the error is correct. If not, I'd like to talk a closer look.",2021-02-01T04:22:22Z,neutral
770556342,Looks like you already opened a let's discuss this there.,2021-02-01T04:32:35Z,joy
770557079,"Hey , thanks for the suggestion. Looks like tests are failing and the whitespace is off. This seems like an improvement to me, but I defer to .",2021-02-01T04:35:14Z,joy
770559395,"Hey , the change from React 16 to 17 is a major change, which means it could include breaking changes. Please reach out to that library to report the bug, they may have a compatible version already available.",2021-02-01T04:43:42Z,fear
770651939," We're actively looking to adopt beforeinput internally at Facebook to power a new text editor that is under development and we're also keen to see how React can adopt this too. Just curious, if that's no secret, are you working on something other than Draft.js that would be opensourced at some point or is it purely an internal project?",2021-02-01T07:57:07Z,fear
770697263," Yes, I'm working on something other than Draft.js. I expect the project to be eventually opensourced at some point too, although no guarantees or dates as it's too early :)",2021-02-01T09:06:04Z,neutral
770830299,"For the next person finding this, this was added as a part of [/react.9.20](",2021-02-01T12:45:26Z,fear
770839486,Is this a regression from v17 or are you able to reproduce still with v16? If it is a regression then it could have the same root cause as (the way React attaches events has changed).,2021-02-01T13:01:00Z,neutral
770914131,Opened an internal Diff with an alternate way of adding this warning (via a wrapper around the createroot entry points).,2021-02-01T14:52:10Z,anger
771050973,Closing in favor of the Facebook wrapper approach mentioned above.,2021-02-01T18:12:37Z,anger
771121486,The problem with that approach is that it requires 1) a virtual dom and 2) to create extra components for testing that's a lot of heavy machinery to require just to test a hookbased state machine that itself doesn't have any knowledge of a DOM. The dispatcher is effectively the handler for the various react hooks useXxx functions. Providing a way to inject an alternate dispatcher implementation (or providing another way to intercept calls to those hook functions) would make react hooks more testable.,2021-02-01T20:03:56Z,fear
771122494," it requires 1) a virtual dom We publish a test renderer package as well, if you'd like to avoid using something like JSdom. ",2021-02-01T20:05:43Z,fear
771123310," Throwing an error that's only thrown in DEV seemed weird to me (and still does) Yeah I want to follow up on this topic because I do wonder if we should be catching these. Added to next meeting's notes. as does checking the console in this way Yeah we can do this more explicitly, like by setting some global context variable. Went for this for now since it's how the mock Scheduler's yieldValue method detects it, too.",2021-02-01T20:07:05Z,anger
771124315," Went for this for now since it's how the mock Scheduler's yieldValue method detects it, too. Oh I actually didn't know that.",2021-02-01T20:08:47Z,neutral
771161511,"I get the following error when trying to invoke preventDefault on a touch event (from onTouchStart). reactdom.development.js:6202 Unable to preventDefault inside passive event listener invocation. Therefore, with the latest version of React, this issue's title (touchstart preventDefault() does not prevent click event.) is still an issue. Can this issue be reopened?",2021-02-01T21:12:32Z,fear
771223867,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 387a645da1756d08ce3e4adf055e7ba49d6018b1: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-01T23:07:21Z,anger
771299956,"thanks , this is my code snippets , i use functional component js const PageHome: React.FC = () = { return ( <div Home Content </div ); }; PageHome.Layout = ({ children }) = { return ( <Layout {children} </Layout ); }; export default PageHome; ",2021-02-02T02:20:35Z,neutral
771373271,"Hey , thanks for submitting but it doesn't appear that this is a bug. As the error says, ""To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function"". example will handle the second case, where the request returns but the component is unmounted.",2021-02-02T05:29:50Z,fear
771405942,I had the same issue and I resolved it by adding: alias: { react: path.resolve('./node_modules/react') } to resolve property in webpack config of my main app. It's was obviously my mistake of using two copies of React but I agree that it would be great if the error message was better. I think this is maybe similar to: It worked for me too!,2021-02-02T06:43:01Z,fear
771507202,"Support requests filed as GitHub issues often go unanswered. We want you to find the answer you're looking for, so we suggest the following alternatives: Coding Questions If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions. stackoverflow.com/questions/tagged/react Talk to other React developers There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. ",2021-02-02T09:43:55Z,anger
771556219," A real world example would help in understanding your problem. Right now I can only guess what you're doing. I have trie this and it still doesnt work for me <pre useEffect(() = { let mounted = true; if (mounted) { let URL = config.API_URL+""Transactions/getAll/""+page; getTransactions(URL); } return () = { mounted = false; }; }, [isLoading]); const getTransactions = async URL = { try { let response = await fetch(URL); let json = await response.json(); if (json.length 0) { await setTransactions(json); await setIsLoading(false); } else { await setTransactions([]); await setIsLoading(false); } } catch (error) { console.log(error); } }; </pre",2021-02-02T11:04:20Z,fear
771572703,"Thanks for the report. Your useExternalState hook has a sideeffect during render: updaters.add(forceUpdate);. Once you move it into the effect, batched and unbatched updates work consistent: diff function useExternalState() { const forceUpdate = useReducer(v = v + 1, 0)[1]; updaters.add(forceUpdate); useEffect(() = { + updaters.add(forceUpdate); return () = updaters.delete(forceUpdate); }, [forceUpdate]); return externalState; } The issue on the zustand repo was closed. Why do you think this is an issue with React?",2021-02-02T11:32:39Z,fear
771703395,"Destructuring works fairly poorly if your props are a disciminated union, eg: type Props = | { kind: 'range' value: Date[] } | { kind: 'day' value: Date } | { kind: 'timer' value: number } // ... Destructuring props breaks the discriminating union. This is a rare enough usecase for me personally that I'm fine with disabling the lint rule, but I'd be interested to know if anyone has a better solution ",2021-02-02T15:11:31Z,neutral
771712629,"thanks, it worked for me.",2021-02-02T15:24:34Z,joy
771827548,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit a295b48bb7d07237f44a72700356daf252ce1a94: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-02T17:39:32Z,anger
771878616,"Well, the solution is maybe a little heavy handed, but I think I've got a viable fix. Ready for another look, ",2021-02-02T18:41:04Z,sadness
771948019,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 64631978e589fe276b634361812d038670ffd09c: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-02T20:14:08Z,anger
772059082,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 74ac980df356d37f353fee78409df3e5232e25f4: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-02T22:36:09Z,anger
772083520,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA.",2021-02-02T23:21:44Z,anger
772171318,"[ By understanding this article, setting a variable to control whether the update of state is an anti pattern?",2021-02-03T02:31:41Z,neutral
772178483,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 65b3132ce04c720e7804f7658b4f735ffe79f7e5: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-03T02:52:52Z,anger
772226649,"Cool, is there any userland example of it so we can try this?",2021-02-03T04:52:47Z,neutral
772361851,"Consuming multiple contexts is very good feature as it reduces deep level of rendered component tree, which is good for performance. Also not everyone yet uses hooks api. ",2021-02-03T09:23:17Z,fear
772402934," hi can you check out this, is this a correct concurrent mode ready cache? ",2021-02-03T10:27:57Z,neutral
772417257,This is proof of concept that this feature can be implemented with ease,2021-02-03T10:51:53Z,neutral
772448291,"This pull request is automatically built and testable in [CodeSandbox]( To see build info of the built libraries, click [here]( or the icon next to each commit SHA. Latest deployment of this branch, based on commit 0e0ac678765e068be18e4f6030e92c3f8a4bc7ff: |Sandbox| Source | ||| |[React]( Configuration | ",2021-02-03T11:44:54Z,anger
772524640,Works This API has not been released except for our _experimental_ NPM release. React DevTools builds from that release though and you can see an example of the new cache used in it if you'd like to:,2021-02-03T13:55:02Z,joy
772528039,"How did break the commit param? That PR only affected the scripts/release/downloadexperimentalbuild.js which I'm the only person who uses (and I tested it). Edit Oh, it broke it if you pasted in the reproducible run with the build param. Gotcha!",2021-02-03T13:56:49Z,anger
773610777,"This should be fixed now, big shout out to the Code Sandbox team for fixing this so quickly!",2021-02-04T21:19:50Z,joy